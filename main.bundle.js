!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=332)}([function(t,n,e){var r=e(4),i=e(11),o=e(17),a=e(13),u=e(26),c=function(t,n,e){var s,f,l,h,p=t&c.F,d=t&c.G,v=t&c.S,y=t&c.P,g=t&c.B,m=d?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,b=d?i:i[n]||(i[n]={}),w=b.prototype||(b.prototype={});for(s in d&&(e=n),e)l=((f=!p&&m&&void 0!==m[s])?m:e)[s],h=g&&f?u(l,r):y&&"function"==typeof l?u(Function.call,l):l,m&&a(m,s,l,t&c.U),b[s]!=l&&o(b,s,h),y&&w[s]!=l&&(w[s]=l)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(5);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t){t.exports={breath:{min:-1,max:3,interval:5,current:0,step:.1},scaleRation:6,numberOfParts:5,image:{path:"./images/person/",ext:".png"},head:{image:"head",ratio:{height:.77,width:.29}},body:{image:"body",ratio:{height:.84,width:.295}},legs:{image:"legs",ratio:{height:.92,width:.3}},arms:{image:{left:"arm_left",right:"arm_right"},ratio:{left:{height:.85,width:.32},right:{height:.85,width:.29}},position:{left:{height:0,width:90},right:{height:0,width:85}},attack:{angle:90,step:10}},hp:{value:100,status:{NORMAL:{color:"green",value:80},AVERAGE:{color:"#f49842",value:70},CRITICAL:{color:"red",value:40}},position:{height:.75,width:.3}},text:{style:"48px serif"},name:{position:{height:.7,width:.3}}}},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t){t.exports={breath:{min:-1,max:5,interval:2,current:0,step:.1},numberOfMonsters:5,numberOfParts:5,image:{path:"./images/monster/",ext:".png"},head:{image:"head_",ratio:{height:.72,width:.7}},body:{image:"body_",ratio:{height:.74,width:.7}},legs:{image:"legs_",ratio:{height:.9,width:.715}},arms:{image:"arms_",ratio:{left:{height:.77,width:.62},right:{height:.77,width:.75}},position:{left:{height:0,width:90},right:{height:0,width:85}},attack:{angle:90,step:10,position:{height:.45,width:.6}}},hp:{value:100,status:{NORMAL:{color:"green",value:70},AVERAGE:{color:"#f49842",value:60},CRITICAL:{color:"red",value:30}},position:{height:.7,width:.72}},death:{image:"dead"},name:{position:{height:.6,width:.65}},text:{style:"48px serif"}}},function(t,n,e){var r=e(69)("wks"),i=e(34),o=e(4).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,n,e){var r=e(22),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(2),i=e(96),o=e(31),a=Object.defineProperty;n.f=e(10)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){t.exports=!e(1)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n){var e=t.exports={version:"2.6.1"};"number"==typeof __e&&(__e=e)},function(t,n,e){"use strict";function r(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}e.d(n,"a",function(){return i});var i=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,i;return n=t,i=[{key:"random",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Math.floor(Math.random()*t)+n}},{key:"normalizeText",value:function(t){return t?t.toLowerCase().trim():""}},{key:"shuffle",value:function(t){for(var n=t,e=n.length-1;e>0;e-=1){var r=Math.floor(Math.random()*(e+1)),i=[n[r],n[e]];n[e]=i[0],n[r]=i[1]}return n}}],(e=null)&&r(n.prototype,e),i&&r(n,i),t}()},function(t,n,e){var r=e(4),i=e(17),o=e(16),a=e(34)("src"),u=Function.toString,c=(""+u).split("toString");e(11).inspectSource=function(t){return u.call(t)},(t.exports=function(t,n,e,u){var s="function"==typeof e;s&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(s&&(o(e,a)||i(e,a,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:u?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,n,e){var r=e(29);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(0),i=e(1),o=e(29),a=/"/g,u=function(t,n,e,r){var i=String(o(t)),u="<"+n;return""!==e&&(u+=" "+e+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+i+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(u),r(r.P+r.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(9),i=e(33);t.exports=e(10)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(48),i=e(29);t.exports=function(t){return r(i(t))}},function(t,n,e){"use strict";var r=e(1);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(o).concat([i]).join("\n")}var a;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];null!=a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),n.push(a))}},n}},function(t,n,e){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),u=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),c=null,s=0,f=[],l=e(307);function h(t,n){for(var e=0;e<t.length;e++){var r=t[e],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(m(r.parts[a],n))}else{var u=[];for(a=0;a<r.parts.length;a++)u.push(m(r.parts[a],n));o[r.id]={id:r.id,refs:1,parts:u}}}}function p(t,n){for(var e=[],r={},i=0;i<t.length;i++){var o=t[i],a=n.base?o[0]+n.base:o[0],u={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(u):e.push(r[a]={id:a,parts:[u]})}return e}function d(t,n){var e=u(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),f.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=u(t.insertAt.before,e);e.insertBefore(n,i)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=f.indexOf(t);n>=0&&f.splice(n,1)}function y(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return g(n,t.attrs),d(t,n),n}function g(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function m(t,n){var e,r,i,o;if(n.transform&&t.css){if(!(o="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=o}if(n.singleton){var a=s++;e=c||(c=y(n)),r=_.bind(null,e,a,!1),i=_.bind(null,e,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",g(n,t.attrs),d(t,n),n}(n),r=function(t,n,e){var r=e.css,i=e.sourceMap,o=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||o)&&(r=l(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),u=t.href;t.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,e,n),i=function(){v(e),e.href&&URL.revokeObjectURL(e.href)}):(e=y(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),i=function(){v(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=p(t,n);return h(e,n),function(t){for(var r=[],i=0;i<e.length;i++){var a=e[i];(u=o[a.id]).refs--,r.push(u)}t&&h(p(t,n),n);for(i=0;i<r.length;i++){var u;if(0===(u=r[i]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete o[u.id]}}}};var b,w=(b=[],function(t,n){return b[t]=n,b.filter(Boolean).join("\n")});function _(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(n,i);else{var o=document.createTextNode(i),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(o,a[n]):t.appendChild(o)}}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(49),i=e(33),o=e(18),a=e(31),u=e(16),c=e(96),s=Object.getOwnPropertyDescriptor;n.f=e(10)?s:function(t,n){if(t=o(t),n=a(n,!0),c)try{return s(t,n)}catch(t){}if(u(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(0),i=e(11),o=e(1);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],a={};a[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",a)}},function(t,n,e){var r=e(26),i=e(48),o=e(14),a=e(8),u=e(230);t.exports=function(t,n){var e=1==t,c=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=n||u;return function(n,u,d){for(var v,y,g=o(n),m=i(g),b=r(u,d,3),w=a(m.length),_=0,x=e?p(n,w):c?p(n,0):void 0;w>_;_++)if((h||_ in m)&&(y=b(v=m[_],_,g),t))if(e)x[_]=y;else if(y)switch(t){case 3:return!0;case 5:return v;case 6:return _;case 2:x.push(v)}else if(f)return!1;return l?-1:s||f?f:x}}},function(t,n,e){var r=e(27);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){"use strict";if(e(10)){var r=e(35),i=e(4),o=e(1),a=e(0),u=e(63),c=e(94),s=e(26),f=e(45),l=e(33),h=e(17),p=e(46),d=e(22),v=e(8),y=e(122),g=e(37),m=e(31),b=e(16),w=e(50),_=e(5),x=e(14),k=e(86),S=e(38),O=e(40),E=e(39).f,P=e(88),A=e(34),j=e(7),I=e(25),M=e(53),R=e(51),T=e(90),L=e(42),F=e(56),C=e(44),N=e(89),W=e(113),D=e(9),q=e(23),U=D.f,B=q.f,H=i.RangeError,V=i.TypeError,z=i.Uint8Array,G=Array.prototype,K=c.ArrayBuffer,J=c.DataView,$=I(0),Y=I(2),X=I(3),Z=I(4),Q=I(5),tt=I(6),nt=M(!0),et=M(!1),rt=T.values,it=T.keys,ot=T.entries,at=G.lastIndexOf,ut=G.reduce,ct=G.reduceRight,st=G.join,ft=G.sort,lt=G.slice,ht=G.toString,pt=G.toLocaleString,dt=j("iterator"),vt=j("toStringTag"),yt=A("typed_constructor"),gt=A("def_constructor"),mt=u.CONSTR,bt=u.TYPED,wt=u.VIEW,_t=I(1,function(t,n){return Et(R(t,t[gt]),n)}),xt=o(function(){return 1===new z(new Uint16Array([1]).buffer)[0]}),kt=!!z&&!!z.prototype.set&&o(function(){new z(1).set({})}),St=function(t,n){var e=d(t);if(e<0||e%n)throw H("Wrong offset!");return e},Ot=function(t){if(_(t)&&bt in t)return t;throw V(t+" is not a typed array!")},Et=function(t,n){if(!(_(t)&&yt in t))throw V("It is not a typed array constructor!");return new t(n)},Pt=function(t,n){return At(R(t,t[gt]),n)},At=function(t,n){for(var e=0,r=n.length,i=Et(t,r);r>e;)i[e]=n[e++];return i},jt=function(t,n,e){U(t,n,{get:function(){return this._d[e]}})},It=function(t){var n,e,r,i,o,a,u=x(t),c=arguments.length,f=c>1?arguments[1]:void 0,l=void 0!==f,h=P(u);if(null!=h&&!k(h)){for(a=h.call(u),r=[],n=0;!(o=a.next()).done;n++)r.push(o.value);u=r}for(l&&c>2&&(f=s(f,arguments[2],2)),n=0,e=v(u.length),i=Et(this,e);e>n;n++)i[n]=l?f(u[n],n):u[n];return i},Mt=function(){for(var t=0,n=arguments.length,e=Et(this,n);n>t;)e[t]=arguments[t++];return e},Rt=!!z&&o(function(){pt.call(new z(1))}),Tt=function(){return pt.apply(Rt?lt.call(Ot(this)):Ot(this),arguments)},Lt={copyWithin:function(t,n){return W.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return N.apply(Ot(this),arguments)},filter:function(t){return Pt(this,Y(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){$(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Ot(this),arguments)},lastIndexOf:function(t){return at.apply(Ot(this),arguments)},map:function(t){return _t(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ut.apply(Ot(this),arguments)},reduceRight:function(t){return ct.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return X(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,n){var e=Ot(this),r=e.length,i=g(t,r);return new(R(e,e[gt]))(e.buffer,e.byteOffset+i*e.BYTES_PER_ELEMENT,v((void 0===n?r:g(n,r))-i))}},Ft=function(t,n){return Pt(this,lt.call(Ot(this),t,n))},Ct=function(t){Ot(this);var n=St(arguments[1],1),e=this.length,r=x(t),i=v(r.length),o=0;if(i+n>e)throw H("Wrong length!");for(;o<i;)this[n+o]=r[o++]},Nt={entries:function(){return ot.call(Ot(this))},keys:function(){return it.call(Ot(this))},values:function(){return rt.call(Ot(this))}},Wt=function(t,n){return _(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Dt=function(t,n){return Wt(t,n=m(n,!0))?l(2,t[n]):B(t,n)},qt=function(t,n,e){return!(Wt(t,n=m(n,!0))&&_(e)&&b(e,"value"))||b(e,"get")||b(e,"set")||e.configurable||b(e,"writable")&&!e.writable||b(e,"enumerable")&&!e.enumerable?U(t,n,e):(t[n]=e.value,t)};mt||(q.f=Dt,D.f=qt),a(a.S+a.F*!mt,"Object",{getOwnPropertyDescriptor:Dt,defineProperty:qt}),o(function(){ht.call({})})&&(ht=pt=function(){return st.call(this)});var Ut=p({},Lt);p(Ut,Nt),h(Ut,dt,Nt.values),p(Ut,{slice:Ft,set:Ct,constructor:function(){},toString:ht,toLocaleString:Tt}),jt(Ut,"buffer","b"),jt(Ut,"byteOffset","o"),jt(Ut,"byteLength","l"),jt(Ut,"length","e"),U(Ut,vt,{get:function(){return this[bt]}}),t.exports=function(t,n,e,c){var s=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=i[s],g=d||{},m=d&&O(d),b=!d||!u.ABV,x={},k=d&&d.prototype,P=function(t,e){U(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,xt)}(this,e)},set:function(t){return function(t,e,r){var i=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[p](e*n+i.o,r,xt)}(this,e,t)},enumerable:!0})};b?(d=e(function(t,e,r,i){f(t,d,s,"_d");var o,a,u,c,l=0,p=0;if(_(e)){if(!(e instanceof K||"ArrayBuffer"==(c=w(e))||"SharedArrayBuffer"==c))return bt in e?At(d,e):It.call(d,e);o=e,p=St(r,n);var g=e.byteLength;if(void 0===i){if(g%n)throw H("Wrong length!");if((a=g-p)<0)throw H("Wrong length!")}else if((a=v(i)*n)+p>g)throw H("Wrong length!");u=a/n}else u=y(e),o=new K(a=u*n);for(h(t,"_d",{b:o,o:p,l:a,e:u,v:new J(o)});l<u;)P(t,l++)}),k=d.prototype=S(Ut),h(k,"constructor",d)):o(function(){d(1)})&&o(function(){new d(-1)})&&F(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=e(function(t,e,r,i){var o;return f(t,d,s),_(e)?e instanceof K||"ArrayBuffer"==(o=w(e))||"SharedArrayBuffer"==o?void 0!==i?new g(e,St(r,n),i):void 0!==r?new g(e,St(r,n)):new g(e):bt in e?At(d,e):It.call(d,e):new g(y(e))}),$(m!==Function.prototype?E(g).concat(E(m)):E(g),function(t){t in d||h(d,t,g[t])}),d.prototype=k,r||(k.constructor=d));var A=k[dt],j=!!A&&("values"==A.name||null==A.name),I=Nt.values;h(d,yt,!0),h(k,bt,s),h(k,wt,!0),h(k,gt,d),(c?new d(1)[vt]==s:vt in k)||U(k,vt,{get:function(){return s}}),x[s]=d,a(a.G+a.W+a.F*(d!=g),x),a(a.S,s,{BYTES_PER_ELEMENT:n}),a(a.S+a.F*o(function(){g.of.call(d,1)}),s,{from:It,of:Mt}),"BYTES_PER_ELEMENT"in k||h(k,"BYTES_PER_ELEMENT",n),a(a.P,s,Lt),C(s),a(a.P+a.F*kt,s,{set:Ct}),a(a.P+a.F*!j,s,Nt),r||k.toString==ht||(k.toString=ht),a(a.P+a.F*o(function(){new d(1).slice()}),s,{slice:Ft}),a(a.P+a.F*(o(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!o(function(){k.toLocaleString.call([1,2])})),s,{toLocaleString:Tt}),L[s]=j?A:I,r||j||h(k,dt,I)}}else t.exports=function(){}},function(t,n,e){var r=e(5);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){var r=e(34)("meta"),i=e(5),o=e(16),a=e(9).f,u=0,c=Object.isExtensible||function(){return!0},s=!e(1)(function(){return c(Object.preventExtensions({}))}),f=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!c(t))return"F";if(!n)return"E";f(t)}return t[r].i},getWeak:function(t,n){if(!o(t,r)){if(!c(t))return!0;if(!n)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&c(t)&&!o(t,r)&&f(t),t}}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=!1},function(t,n,e){var r=e(98),i=e(72);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(22),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(2),i=e(99),o=e(72),a=e(71)("IE_PROTO"),u=function(){},c=function(){var t,n=e(68)("iframe"),r=o.length;for(n.style.display="none",e(74).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[o[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(u.prototype=r(t),e=new u,u.prototype=null,e[a]=t):e=c(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(98),i=e(72).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){var r=e(16),i=e(14),o=e(71)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,n,e){var r=e(9).f,i=e(16),o=e(7)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n){t.exports={}},function(t,n,e){var r=e(7)("unscopables"),i=Array.prototype;null==i[r]&&e(17)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n,e){"use strict";var r=e(4),i=e(9),o=e(10),a=e(7)("species");t.exports=function(t){var n=r[t];o&&n&&!n[a]&&i.f(n,a,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(13);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){var r=e(5);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(28);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(28),i=e(7)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(a=r(n))&&"function"==typeof n.callee?"Arguments":a}},function(t,n,e){var r=e(2),i=e(27),o=e(7)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[o])?n:i(e)}},function(t){t.exports={operators:["+","-","/","*"],values:{min:0,max:20}}},function(t,n,e){var r=e(18),i=e(8),o=e(37);t.exports=function(t){return function(n,e,a){var u,c=r(n),s=i(c.length),f=o(a,s);if(t&&e!=e){for(;s>f;)if((u=c[f++])!=u)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===e)return t||f||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(0),i=e(29),o=e(1),a=e(76),u="["+a+"]",c=RegExp("^"+u+u+"*"),s=RegExp(u+u+"*$"),f=function(t,n,e){var i={},u=o(function(){return!!a[t]()||"​"!="​"[t]()}),c=i[t]=u?n(l):a[t];e&&(i[e]=c),r(r.P+r.F*u,"String",i)},l=f.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n,e){var r=e(7)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:e=!0}},o[r]=function(){return a},t(o)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(2);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){"use strict";var r=e(50),i=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var o=e.call(t,n);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,n)}},function(t,n,e){"use strict";e(115);var r=e(13),i=e(17),o=e(1),a=e(29),u=e(7),c=e(91),s=u("species"),f=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=u(t),p=!o(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),d=p?!o(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],y=e(a,h,""[t],function(t,n,e,r,i){return n.exec===c?p&&!i?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),g=y[0],m=y[1];r(String.prototype,t,g),i(RegExp.prototype,h,2==n?function(t,n){return m.call(t,this,n)}:function(t){return m.call(t,this)})}}},function(t,n,e){var r=e(26),i=e(111),o=e(86),a=e(2),u=e(8),c=e(88),s={},f={};(n=t.exports=function(t,n,e,l,h){var p,d,v,y,g=h?function(){return t}:c(t),m=r(e,l,n?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(p=u(t.length);p>b;b++)if((y=n?m(a(d=t[b])[0],d[1]):m(t[b]))===s||y===f)return y}else for(v=g.call(t);!(d=v.next()).done;)if((y=i(v,m,d.value,n))===s||y===f)return y}).BREAK=s,n.RETURN=f},function(t,n,e){var r=e(4).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(4),i=e(0),o=e(13),a=e(46),u=e(32),c=e(60),s=e(45),f=e(5),l=e(1),h=e(56),p=e(41),d=e(77);t.exports=function(t,n,e,v,y,g){var m=r[t],b=m,w=y?"set":"add",_=b&&b.prototype,x={},k=function(t){var n=_[t];o(_,t,"delete"==t?function(t){return!(g&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof b&&(g||_.forEach&&!l(function(){(new b).entries().next()}))){var S=new b,O=S[w](g?{}:-0,1)!=S,E=l(function(){S.has(1)}),P=h(function(t){new b(t)}),A=!g&&l(function(){for(var t=new b,n=5;n--;)t[w](n,n);return!t.has(-0)});P||((b=n(function(n,e){s(n,b,t);var r=d(new m,n,b);return null!=e&&c(e,y,r[w],r),r})).prototype=_,_.constructor=b),(E||A)&&(k("delete"),k("has"),y&&k("get")),(A||O)&&k(w),g&&_.clear&&delete _.clear}else b=v.getConstructor(n,t,y,w),a(b.prototype,e),u.NEED=!0;return p(b,t),x[t]=b,i(i.G+i.W+i.F*(b!=m),x),g||v.setStrong(b,t,y),b}},function(t,n,e){for(var r,i=e(4),o=e(17),a=e(34),u=a("typed_array"),c=a("view"),s=!(!i.ArrayBuffer||!i.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=i[h[l++]])?(o(r.prototype,u,!0),o(r.prototype,c,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:u,VIEW:c}},function(t){t.exports={dictionary:[{word:"test",translations:["тест","тэст"]},{word:"table",translations:["стол","столик"]},{word:"window",translations:["окно","окошечко","оконце"]},{word:"laptop",translations:["ноутбук","компьютер"]}]}},function(t){t.exports={words:["test","table","window","approximately"]}},function(t){t.exports={words:["table","test","fest","work"]}},function(t){t.exports={firstName:["Ужасный","Злобный","Сопливый"],lastName:["Огр","Гном","Гоблин"],middleName:["Том","Макс","Дима"]}},function(t,n,e){var r=e(5),i=e(4).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(11),i=e(4),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(35)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){n.f=e(7)},function(t,n,e){var r=e(69)("keys"),i=e(34);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(28);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(4).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(5),i=e(2),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(26)(Function.call,e(23).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(5),i=e(75).set;t.exports=function(t,n,e){var o,a=n.constructor;return a!==e&&"function"==typeof a&&(o=a.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){"use strict";var r=e(22),i=e(29);t.exports=function(t){var n=String(i(this)),e="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){var r=e(22),i=e(29);t.exports=function(t){return function(n,e){var o,a,u=String(i(n)),c=r(e),s=u.length;return c<0||c>=s?t?"":void 0:(o=u.charCodeAt(c))<55296||o>56319||c+1===s||(a=u.charCodeAt(c+1))<56320||a>57343?t?u.charAt(c):o:t?u.slice(c,c+2):a-56320+(o-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(35),i=e(0),o=e(13),a=e(17),u=e(42),c=e(110),s=e(41),f=e(40),l=e(7)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,e,d,v,y,g){c(e,n,d);var m,b,w,_=function(t){if(!h&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},x=n+" Iterator",k="values"==v,S=!1,O=t.prototype,E=O[l]||O["@@iterator"]||v&&O[v],P=E||_(v),A=v?k?_("entries"):P:void 0,j="Array"==n&&O.entries||E;if(j&&(w=f(j.call(new t)))!==Object.prototype&&w.next&&(s(w,x,!0),r||"function"==typeof w[l]||a(w,l,p)),k&&E&&"values"!==E.name&&(S=!0,P=function(){return E.call(this)}),r&&!g||!h&&!S&&O[l]||a(O,l,P),u[n]=P,u[x]=p,v)if(m={values:k?P:_("values"),keys:y?P:_("keys"),entries:A},g)for(b in m)b in O||o(O,b,m[b]);else i(i.P+i.F*(h||S),n,m);return m}},function(t,n,e){var r=e(84),i=e(29);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){var r=e(5),i=e(28),o=e(7)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(7)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(42),i=e(7)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){"use strict";var r=e(9),i=e(33);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(50),i=e(7)("iterator"),o=e(42);t.exports=e(11).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){"use strict";var r=e(14),i=e(37),o=e(8);t.exports=function(t){for(var n=r(this),e=o(n.length),a=arguments.length,u=i(a>1?arguments[1]:void 0,e),c=a>2?arguments[2]:void 0,s=void 0===c?e:i(c,e);s>u;)n[u++]=t;return n}},function(t,n,e){"use strict";var r=e(43),i=e(114),o=e(42),a=e(18);t.exports=e(82)(Array,"Array",function(t,n){this._t=a(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var r,i,o=e(57),a=RegExp.prototype.exec,u=String.prototype.replace,c=a,s=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(c=function(t){var n,e,r,i,c=this;return f&&(e=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),s&&(n=c.lastIndex),r=a.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),f&&r&&r.length>1&&u.call(r[0],e,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=c},function(t,n,e){"use strict";var r=e(81)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r,i,o,a=e(26),u=e(104),c=e(74),s=e(68),f=e(4),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,y=0,g={},m=function(){var t=+this;if(g.hasOwnProperty(t)){var n=g[t];delete g[t],n()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return g[++y]=function(){u("function"==typeof t?t:Function(t),n)},r(y),y},p=function(t){delete g[t]},"process"==e(28)(l)?r=function(t){l.nextTick(a(m,t,1))}:v&&v.now?r=function(t){v.now(a(m,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=b,r=a(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),m.call(t)}}:function(t){setTimeout(a(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){"use strict";var r=e(4),i=e(10),o=e(35),a=e(63),u=e(17),c=e(46),s=e(1),f=e(45),l=e(22),h=e(8),p=e(122),d=e(39).f,v=e(9).f,y=e(89),g=e(41),m="prototype",b="Wrong index!",w=r.ArrayBuffer,_=r.DataView,x=r.Math,k=r.RangeError,S=r.Infinity,O=w,E=x.abs,P=x.pow,A=x.floor,j=x.log,I=x.LN2,M=i?"_b":"buffer",R=i?"_l":"byteLength",T=i?"_o":"byteOffset";function L(t,n,e){var r,i,o,a=new Array(e),u=8*e-n-1,c=(1<<u)-1,s=c>>1,f=23===n?P(2,-24)-P(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===S?(i=t!=t?1:0,r=c):(r=A(j(t)/I),t*(o=P(2,-r))<1&&(r--,o*=2),(t+=r+s>=1?f/o:f*P(2,1-s))*o>=2&&(r++,o/=2),r+s>=c?(i=0,r=c):r+s>=1?(i=(t*o-1)*P(2,n),r+=s):(i=t*P(2,s-1)*P(2,n),r=0));n>=8;a[l++]=255&i,i/=256,n-=8);for(r=r<<n|i,u+=n;u>0;a[l++]=255&r,r/=256,u-=8);return a[--l]|=128*h,a}function F(t,n,e){var r,i=8*e-n-1,o=(1<<i)-1,a=o>>1,u=i-7,c=e-1,s=t[c--],f=127&s;for(s>>=7;u>0;f=256*f+t[c],c--,u-=8);for(r=f&(1<<-u)-1,f>>=-u,u+=n;u>0;r=256*r+t[c],c--,u-=8);if(0===f)f=1-a;else{if(f===o)return r?NaN:s?-S:S;r+=P(2,n),f-=a}return(s?-1:1)*r*P(2,f-n)}function C(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function N(t){return[255&t]}function W(t){return[255&t,t>>8&255]}function D(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function q(t){return L(t,52,8)}function U(t){return L(t,23,4)}function B(t,n,e){v(t[m],n,{get:function(){return this[e]}})}function H(t,n,e,r){var i=p(+e);if(i+n>t[R])throw k(b);var o=t[M]._b,a=i+t[T],u=o.slice(a,a+n);return r?u:u.reverse()}function V(t,n,e,r,i,o){var a=p(+e);if(a+n>t[R])throw k(b);for(var u=t[M]._b,c=a+t[T],s=r(+i),f=0;f<n;f++)u[c+f]=s[o?f:n-f-1]}if(a.ABV){if(!s(function(){w(1)})||!s(function(){new w(-1)})||s(function(){return new w,new w(1.5),new w(NaN),"ArrayBuffer"!=w.name})){for(var z,G=(w=function(t){return f(this,w),new O(p(t))})[m]=O[m],K=d(O),J=0;K.length>J;)(z=K[J++])in w||u(w,z,O[z]);o||(G.constructor=w)}var $=new _(new w(2)),Y=_[m].setInt8;$.setInt8(0,2147483648),$.setInt8(1,2147483649),!$.getInt8(0)&&$.getInt8(1)||c(_[m],{setInt8:function(t,n){Y.call(this,t,n<<24>>24)},setUint8:function(t,n){Y.call(this,t,n<<24>>24)}},!0)}else w=function(t){f(this,w,"ArrayBuffer");var n=p(t);this._b=y.call(new Array(n),0),this[R]=n},_=function(t,n,e){f(this,_,"DataView"),f(t,w,"DataView");var r=t[R],i=l(n);if(i<0||i>r)throw k("Wrong offset!");if(i+(e=void 0===e?r-i:h(e))>r)throw k("Wrong length!");this[M]=t,this[T]=i,this[R]=e},i&&(B(w,"byteLength","_l"),B(_,"buffer","_b"),B(_,"byteLength","_l"),B(_,"byteOffset","_o")),c(_[m],{getInt8:function(t){return H(this,1,t)[0]<<24>>24},getUint8:function(t){return H(this,1,t)[0]},getInt16:function(t){var n=H(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=H(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return C(H(this,4,t,arguments[1]))},getUint32:function(t){return C(H(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return F(H(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return F(H(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){V(this,1,t,N,n)},setUint8:function(t,n){V(this,1,t,N,n)},setInt16:function(t,n){V(this,2,t,W,n,arguments[2])},setUint16:function(t,n){V(this,2,t,W,n,arguments[2])},setInt32:function(t,n){V(this,4,t,D,n,arguments[2])},setUint32:function(t,n){V(this,4,t,D,n,arguments[2])},setFloat32:function(t,n){V(this,4,t,U,n,arguments[2])},setFloat64:function(t,n){V(this,8,t,q,n,arguments[2])}});g(w,"ArrayBuffer"),g(_,"DataView"),u(_[m],a.VIEW,!0),n.ArrayBuffer=w,n.DataView=_},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return MathService});var _files_config_json__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(52),_files_config_json__WEBPACK_IMPORTED_MODULE_0___namespace=__webpack_require__.t(52,1),_util__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(12);function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass(t,n,e){return n&&_defineProperties(t.prototype,n),e&&_defineProperties(t,e),t}var MathService=function(){function MathService(){_classCallCheck(this,MathService)}return _createClass(MathService,null,[{key:"getRandomTask",value:function(){var t=MathService.getOperand(),n=MathService.getOperand(),e=_files_config_json__WEBPACK_IMPORTED_MODULE_0__.operators[_util__WEBPACK_IMPORTED_MODULE_1__.a.random(_files_config_json__WEBPACK_IMPORTED_MODULE_0__.operators.length-1)];return"".concat(t," ").concat(e," ").concat(n)}},{key:"isAnswerValid",value:function isAnswerValid(task,answer){return Math.floor(eval(task))===answer}},{key:"getOperand",value:function(){return _util__WEBPACK_IMPORTED_MODULE_1__.a.random(_files_config_json__WEBPACK_IMPORTED_MODULE_0__.values.max,_files_config_json__WEBPACK_IMPORTED_MODULE_0__.values.min)}}]),MathService}()},function(t,n,e){t.exports=!e(10)&&!e(1)(function(){return 7!=Object.defineProperty(e(68)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(4),i=e(11),o=e(35),a=e(70),u=e(9).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||u(n,t,{value:a.f(t)})}},function(t,n,e){var r=e(16),i=e(18),o=e(53)(!1),a=e(71)("IE_PROTO");t.exports=function(t,n){var e,u=i(t),c=0,s=[];for(e in u)e!=a&&r(u,e)&&s.push(e);for(;n.length>c;)r(u,e=n[c++])&&(~o(s,e)||s.push(e));return s}},function(t,n,e){var r=e(9),i=e(2),o=e(36);t.exports=e(10)?Object.defineProperties:function(t,n){i(t);for(var e,a=o(n),u=a.length,c=0;u>c;)r.f(t,e=a[c++],n[e]);return t}},function(t,n,e){var r=e(18),i=e(39).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,n,e){"use strict";var r=e(36),i=e(54),o=e(49),a=e(14),u=e(48),c=Object.assign;t.exports=!c||e(1)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=c({},t)[e]||Object.keys(c({},n)).join("")!=r})?function(t,n){for(var e=a(t),c=arguments.length,s=1,f=i.f,l=o.f;c>s;)for(var h,p=u(arguments[s++]),d=f?r(p).concat(f(p)):r(p),v=d.length,y=0;v>y;)l.call(p,h=d[y++])&&(e[h]=p[h]);return e}:c},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var r=e(27),i=e(5),o=e(104),a=[].slice,u={};t.exports=Function.bind||function(t){var n=r(this),e=a.call(arguments,1),c=function(){var r=e.concat(a.call(arguments));return this instanceof c?function(t,n,e){if(!(n in u)){for(var r=[],i=0;i<n;i++)r[i]="a["+i+"]";u[n]=Function("F,a","return new F("+r.join(",")+")")}return u[n](t,e)}(n,r.length,r):o(n,r,t)};return i(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(4).parseInt,i=e(55).trim,o=e(76),a=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,n){var e=i(String(t),3);return r(e,n>>>0||(a.test(e)?16:10))}:r},function(t,n,e){var r=e(4).parseFloat,i=e(55).trim;t.exports=1/r(e(76)+"-0")!=-1/0?function(t){var n=i(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(28);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(5),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){"use strict";var r=e(38),i=e(33),o=e(41),a={};e(17)(a,e(7)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(a,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(2);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(27),i=e(14),o=e(48),a=e(8);t.exports=function(t,n,e,u,c){r(n);var s=i(t),f=o(s),l=a(s.length),h=c?l-1:0,p=c?-1:1;if(e<2)for(;;){if(h in f){u=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(u=n(u,f[h],h,s));return u}},function(t,n,e){"use strict";var r=e(14),i=e(37),o=e(8);t.exports=[].copyWithin||function(t,n){var e=r(this),a=o(e.length),u=i(t,a),c=i(n,a),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?a:i(s,a))-c,a-u),l=1;for(c<u&&u<c+f&&(l=-1,c+=f-1,u+=f-1);f-- >0;)c in e?e[u]=e[c]:delete e[u],u+=l,c+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(91);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(10)&&"g"!=/./g.flags&&e(9).f(RegExp.prototype,"flags",{configurable:!0,get:e(57)})},function(t,n,e){"use strict";var r,i,o,a,u=e(35),c=e(4),s=e(26),f=e(50),l=e(0),h=e(5),p=e(27),d=e(45),v=e(60),y=e(51),g=e(93).set,m=e(251)(),b=e(118),w=e(252),_=e(61),x=e(119),k=c.TypeError,S=c.process,O=S&&S.versions,E=O&&O.v8||"",P=c.Promise,A="process"==f(S),j=function(){},I=i=b.f,M=!!function(){try{var t=P.resolve(1),n=(t.constructor={})[e(7)("species")]=function(t){t(j,j)};return(A||"function"==typeof PromiseRejectionEvent)&&t.then(j)instanceof n&&0!==E.indexOf("6.6")&&-1===_.indexOf("Chrome/66")}catch(t){}}(),R=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},T=function(t,n){if(!t._n){t._n=!0;var e=t._c;m(function(){for(var r=t._v,i=1==t._s,o=0,a=function(n){var e,o,a,u=i?n.ok:n.fail,c=n.resolve,s=n.reject,f=n.domain;try{u?(i||(2==t._h&&C(t),t._h=1),!0===u?e=r:(f&&f.enter(),e=u(r),f&&(f.exit(),a=!0)),e===n.promise?s(k("Promise-chain cycle")):(o=R(e))?o.call(e,c,s):c(e)):s(r)}catch(t){f&&!a&&f.exit(),s(t)}};e.length>o;)a(e[o++]);t._c=[],t._n=!1,n&&!t._h&&L(t)})}},L=function(t){g.call(c,function(){var n,e,r,i=t._v,o=F(t);if(o&&(n=w(function(){A?S.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=A||F(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},F=function(t){return 1!==t._h&&0===(t._a||t._c).length},C=function(t){g.call(c,function(){var n;A?S.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},N=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),T(n,!0))},W=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw k("Promise can't be resolved itself");(n=R(t))?m(function(){var r={_w:e,_d:!1};try{n.call(t,s(W,r,1),s(N,r,1))}catch(t){N.call(r,t)}}):(e._v=t,e._s=1,T(e,!1))}catch(t){N.call({_w:e,_d:!1},t)}}};M||(P=function(t){d(this,P,"Promise","_h"),p(t),r.call(this);try{t(s(W,this,1),s(N,this,1))}catch(t){N.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(46)(P.prototype,{then:function(t,n){var e=I(y(this,P));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=A?S.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&T(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=s(W,t,1),this.reject=s(N,t,1)},b.f=I=function(t){return t===P||t===a?new o(t):i(t)}),l(l.G+l.W+l.F*!M,{Promise:P}),e(41)(P,"Promise"),e(44)("Promise"),a=e(11).Promise,l(l.S+l.F*!M,"Promise",{reject:function(t){var n=I(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(u||!M),"Promise",{resolve:function(t){return x(u&&this===a?P:this,t)}}),l(l.S+l.F*!(M&&e(56)(function(t){P.all(t).catch(j)})),"Promise",{all:function(t){var n=this,e=I(n),r=e.resolve,i=e.reject,o=w(function(){var e=[],o=0,a=1;v(t,!1,function(t){var u=o++,c=!1;e.push(void 0),a++,n.resolve(t).then(function(t){c||(c=!0,e[u]=t,--a||r(e))},i)}),--a||r(e)});return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=I(n),r=e.reject,i=w(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n,e){"use strict";var r=e(27);function i(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new i(t)}},function(t,n,e){var r=e(2),i=e(5),o=e(118);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(9).f,i=e(38),o=e(46),a=e(26),u=e(45),c=e(60),s=e(82),f=e(114),l=e(44),h=e(10),p=e(32).fastKey,d=e(47),v=h?"_s":"size",y=function(t,n){var e,r=p(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var f=t(function(t,r){u(t,f,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&c(r,e,t[s],t)});return o(f.prototype,{clear:function(){for(var t=d(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=d(this,n),r=y(e,t);if(r){var i=r.n,o=r.p;delete e._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),e._f==r&&(e._f=i),e._l==r&&(e._l=o),e[v]--}return!!r},forEach:function(t){d(this,n);for(var e,r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!y(d(this,n),t)}}),h&&r(f.prototype,"size",{get:function(){return d(this,n)[v]}}),f},def:function(t,n,e){var r,i,o=y(t,n);return o?o.v=e:(t._l=o={i:i=p(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:y,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))},e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(46),i=e(32).getWeak,o=e(2),a=e(5),u=e(45),c=e(60),s=e(25),f=e(16),l=e(47),h=s(5),p=s(6),d=0,v=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,n){return h(t.a,function(t){return t[0]===n})};y.prototype={get:function(t){var n=g(this,t);if(n)return n[1]},has:function(t){return!!g(this,t)},set:function(t,n){var e=g(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=p(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,o){var s=t(function(t,r){u(t,s,n,"_i"),t._t=n,t._i=d++,t._l=void 0,null!=r&&c(r,e,t[o],t)});return r(s.prototype,{delete:function(t){if(!a(t))return!1;var e=i(t);return!0===e?v(l(this,n)).delete(t):e&&f(e,this._i)&&delete e[this._i]},has:function(t){if(!a(t))return!1;var e=i(t);return!0===e?v(l(this,n)).has(t):e&&f(e,this._i)}}),s},def:function(t,n,e){var r=i(o(n),!0);return!0===r?v(t).set(n,e):r[t._i]=e,t},ufstore:v}},function(t,n,e){var r=e(22),i=e(8);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=i(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(39),i=e(54),o=e(2),a=e(4).Reflect;t.exports=a&&a.ownKeys||function(t){var n=r.f(o(t)),e=i.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(8),i=e(78),o=e(29);t.exports=function(t,n,e,a){var u=String(o(t)),c=u.length,s=void 0===e?" ":String(e),f=r(n);if(f<=c||""==s)return u;var l=f-c,h=i.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),a?h+u:u+h}},function(t,n,e){var r=e(36),i=e(18),o=e(49).f;t.exports=function(t){return function(n){for(var e,a=i(n),u=r(a),c=u.length,s=0,f=[];c>s;)o.call(a,e=u[s++])&&f.push(t?[e,a[e]]:a[e]);return f}}},function(t,n){t.exports='<main>\n  <div class="container">\n\n  </div>\n</main>\n<footer>\n  <p>\n    <span>© 2019</span>\n    <a href="mailto:aleksei.bulgak@gmail.com">Aleksei Bulgak</a>\n    <a href="https://github.com/aleksei-bulgak-study" target="_blank" class="github">\n      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true">\n        <path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path>\n      </svg>\n    </a>\n  </p>\n</footer>'},function(t,n,e){t.exports='<div class="home">\n  <div class="home_screens top">\n    <img src="'+e(308)+'" alt="battle" />\n    <img src="'+e(309)+'" alt="monster" />\n  </div>\n  <div class="home_content">\n    <h1 class="home_title">Welcome!</h1>\n    <p class="home_message">To start the game please press button below</p>\n    <button class="home_button play">Start</button>\n    <button class="home_button score">Score Board</button>\n  </div>\n\n  <div class="home_screens bottom">\n    <img src="'+e(310)+'" alt="monster-attack" />\n    <img src="'+e(311)+'" alt="rip" />\n  </div>\n</div>'},function(t,n){t.exports='<div class="login">\n  <form class="login_form">\n    <div class="login_content">\n      <label class="login_label" for="name">Enter Nickname</label>\n      <input class="login_nickname" id="nickname" name="name" type="text" value=""/>\n      <label class="error"></label>\n    </div>\n    <button class="login_button">Play</button>\n  </form>\n</div>\n'},function(t,n){t.exports="<canvas></canvas>\n"},function(t,n){t.exports='<div class="task-container">\n  <h1 class="task-container_title">Please choose task from the list below:</h1>\n  <div id="math" class="task-container_element">\n    <span>Math</span>\n  </div>\n  <div id="translation" class="task-container_element">\n    <span>Translate</span>\n  </div>\n  <div id="audition" class="task-container_element">\n    <span>Audition</span>\n  </div>\n  <div id="word" class="task-container_element">\n    <span>Word construction</span>\n  </div>\n</div>\n'},function(t,n){t.exports='<div class="modal">\n  <div class="modal_content"></div>\n</div>\n'},function(t,n){t.exports='<div class="task">\n  <p class="task_title">Please enter only the integer part of the result number</p>\n  <p class="task_description"></p>\n  <input type="number" class="task_input" />\n  <button class="task_submit">Submit</button>\n</div>\n'},function(t,n){t.exports='<div class="task">\n  <p class="task_title">Please enter translation of work specified below</p>\n  <p class="task_description"></p>\n  <input type="text" class="task_input" />\n  <button class="task_submit">Submit</button>\n</div>\n'},function(t,n){t.exports='<div class="task">\n  <p class="task_title">Please enter word that was pronounces</p>\n  <button class="task_play"></button>\n  <input type="text" class="task_input" />\n  <button class="task_submit">Submit</button>\n</div>\n'},function(t,n){t.exports='<div class="task">\n  <p class="task_title">Please reorder letter to form a word</p>\n  <div class="task_description letter_container"></div>\n  <button class="task_submit">Submit</button>\n</div>'},function(t,n){t.exports='<div class="score-container">\n  <h1 class="score-container_title">Scores:</h1>\n  <table class="score-container_table">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Score</th>\n      </tr>\n    </thead>\n    <tbody>\n\n    </tbody>\n  </table>\n  <button class="restart">Try Again</button>\n</div>\n'},function(t,n,e){"use strict";(function(t){e(139),e(282),e(284),e(286),e(288),e(290),e(292),e(294),e(296),e(298),e(302),t._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),t._babelPolyfill=!0}).call(this,e(138))},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){e(140),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(210),e(211),e(212),e(213),e(214),e(215),e(216),e(217),e(218),e(220),e(221),e(223),e(224),e(225),e(226),e(227),e(228),e(229),e(232),e(233),e(234),e(235),e(236),e(237),e(238),e(239),e(240),e(241),e(242),e(243),e(244),e(90),e(245),e(115),e(246),e(116),e(247),e(248),e(249),e(250),e(117),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(269),e(270),e(271),e(272),e(273),e(274),e(275),e(276),e(277),e(278),e(279),e(280),e(281),t.exports=e(11)},function(t,n,e){"use strict";var r=e(4),i=e(16),o=e(10),a=e(0),u=e(13),c=e(32).KEY,s=e(1),f=e(69),l=e(41),h=e(34),p=e(7),d=e(70),v=e(97),y=e(141),g=e(73),m=e(2),b=e(5),w=e(18),_=e(31),x=e(33),k=e(38),S=e(100),O=e(23),E=e(9),P=e(36),A=O.f,j=E.f,I=S.f,M=r.Symbol,R=r.JSON,T=R&&R.stringify,L=p("_hidden"),F=p("toPrimitive"),C={}.propertyIsEnumerable,N=f("symbol-registry"),W=f("symbols"),D=f("op-symbols"),q=Object.prototype,U="function"==typeof M,B=r.QObject,H=!B||!B.prototype||!B.prototype.findChild,V=o&&s(function(){return 7!=k(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=A(q,n);r&&delete q[n],j(t,n,e),r&&t!==q&&j(q,n,r)}:j,z=function(t){var n=W[t]=k(M.prototype);return n._k=t,n},G=U&&"symbol"==typeof M.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof M},K=function(t,n,e){return t===q&&K(D,n,e),m(t),n=_(n,!0),m(e),i(W,n)?(e.enumerable?(i(t,L)&&t[L][n]&&(t[L][n]=!1),e=k(e,{enumerable:x(0,!1)})):(i(t,L)||j(t,L,x(1,{})),t[L][n]=!0),V(t,n,e)):j(t,n,e)},J=function(t,n){m(t);for(var e,r=y(n=w(n)),i=0,o=r.length;o>i;)K(t,e=r[i++],n[e]);return t},$=function(t){var n=C.call(this,t=_(t,!0));return!(this===q&&i(W,t)&&!i(D,t))&&(!(n||!i(this,t)||!i(W,t)||i(this,L)&&this[L][t])||n)},Y=function(t,n){if(t=w(t),n=_(n,!0),t!==q||!i(W,n)||i(D,n)){var e=A(t,n);return!e||!i(W,n)||i(t,L)&&t[L][n]||(e.enumerable=!0),e}},X=function(t){for(var n,e=I(w(t)),r=[],o=0;e.length>o;)i(W,n=e[o++])||n==L||n==c||r.push(n);return r},Z=function(t){for(var n,e=t===q,r=I(e?D:w(t)),o=[],a=0;r.length>a;)!i(W,n=r[a++])||e&&!i(q,n)||o.push(W[n]);return o};U||(u((M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===q&&n.call(D,e),i(this,L)&&i(this[L],t)&&(this[L][t]=!1),V(this,t,x(1,e))};return o&&H&&V(q,t,{configurable:!0,set:n}),z(t)}).prototype,"toString",function(){return this._k}),O.f=Y,E.f=K,e(39).f=S.f=X,e(49).f=$,e(54).f=Z,o&&!e(35)&&u(q,"propertyIsEnumerable",$,!0),d.f=function(t){return z(p(t))}),a(a.G+a.W+a.F*!U,{Symbol:M});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var nt=P(p.store),et=0;nt.length>et;)v(nt[et++]);a(a.S+a.F*!U,"Symbol",{for:function(t){return i(N,t+="")?N[t]:N[t]=M(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var n in N)if(N[n]===t)return n},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!U,"Object",{create:function(t,n){return void 0===n?k(t):J(k(t),n)},defineProperty:K,defineProperties:J,getOwnPropertyDescriptor:Y,getOwnPropertyNames:X,getOwnPropertySymbols:Z}),R&&a(a.S+a.F*(!U||s(function(){var t=M();return"[null]"!=T([t])||"{}"!=T({a:t})||"{}"!=T(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(b(n)||void 0!==t)&&!G(t))return g(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!G(n))return n}),r[1]=n,T.apply(R,r)}}),M.prototype[F]||e(17)(M.prototype,F,M.prototype.valueOf),l(M,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){var r=e(36),i=e(54),o=e(49);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var a,u=e(t),c=o.f,s=0;u.length>s;)c.call(t,a=u[s++])&&n.push(a);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(38)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(10),"Object",{defineProperty:e(9).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(10),"Object",{defineProperties:e(99)})},function(t,n,e){var r=e(18),i=e(23).f;e(24)("getOwnPropertyDescriptor",function(){return function(t,n){return i(r(t),n)}})},function(t,n,e){var r=e(14),i=e(40);e(24)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(14),i=e(36);e(24)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){e(24)("getOwnPropertyNames",function(){return e(100).f})},function(t,n,e){var r=e(5),i=e(32).onFreeze;e(24)("freeze",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(5),i=e(32).onFreeze;e(24)("seal",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(5),i=e(32).onFreeze;e(24)("preventExtensions",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(5);e(24)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(5);e(24)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(5);e(24)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(101)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(102)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(75).set})},function(t,n,e){"use strict";var r=e(50),i={};i[e(7)("toStringTag")]="z",i+""!="[object z]"&&e(13)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(103)})},function(t,n,e){var r=e(9).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||e(10)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(5),i=e(40),o=e(7)("hasInstance"),a=Function.prototype;o in a||e(9).f(a,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),i=e(105);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,n,e){var r=e(0),i=e(106);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,n,e){"use strict";var r=e(4),i=e(16),o=e(28),a=e(77),u=e(31),c=e(1),s=e(39).f,f=e(23).f,l=e(9).f,h=e(55).trim,p=r.Number,d=p,v=p.prototype,y="Number"==o(e(38)(v)),g="trim"in String.prototype,m=function(t){var n=u(t,!1);if("string"==typeof n&&n.length>2){var e,r,i,o=(n=g?n.trim():h(n,3)).charCodeAt(0);if(43===o||45===o){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+n}for(var a,c=n.slice(2),s=0,f=c.length;s<f;s++)if((a=c.charCodeAt(s))<48||a>i)return NaN;return parseInt(c,r)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof p&&(y?c(function(){v.valueOf.call(e)}):"Number"!=o(e))?a(new d(m(n)),e,p):m(n)};for(var b,w=e(10)?s(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),_=0;w.length>_;_++)i(d,b=w[_])&&!i(p,b)&&l(p,b,f(d,b));p.prototype=v,v.constructor=p,e(13)(r,"Number",p)}},function(t,n,e){"use strict";var r=e(0),i=e(22),o=e(107),a=e(78),u=1..toFixed,c=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=c(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=c(e/t),e=e%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+a.call("0",7-e.length)+e}return n},d=function(t,n,e){return 0===n?e:n%2==1?d(t,n-1,e*t):d(t*t,n/2,e)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(1)(function(){u.call({})})),"Number",{toFixed:function(t){var n,e,r,u,c=o(this,f),s=i(t),v="",y="0";if(s<0||s>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(c*d(2,69,1))-69)<0?c*d(2,-n,1):c/d(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(d(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),y=p()}else l(0,e),l(1<<-n,0),y=p()+a.call("0",s);return y=s>0?v+((u=y.length)<=s?"0."+a.call("0",s-u)+y:y.slice(0,u-s)+"."+y.slice(u-s)):v+y}})},function(t,n,e){"use strict";var r=e(0),i=e(1),o=e(107),a=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==a.call(1,void 0)})||!i(function(){a.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(n):a.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),i=e(4).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(108)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),i=e(108),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),i=e(106);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,n,e){var r=e(0),i=e(105);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,n,e){var r=e(0),i=e(109),o=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,n,e){var r=e(0),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),i=e(79);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,n,e){var r=e(0),i=e(80);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(184)})},function(t,n,e){var r=e(79),i=Math.pow,o=i(2,-52),a=i(2,-23),u=i(2,127)*(2-a),c=i(2,-126);t.exports=Math.fround||function(t){var n,e,i=Math.abs(t),s=r(t);return i<c?s*(i/c/a+1/o-1/o)*c*a:(e=(n=(1+a/o)*i)-(n-i))>u||e!=e?s*(1/0):s*e}},function(t,n,e){var r=e(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,o=0,a=0,u=arguments.length,c=0;a<u;)c<(e=i(arguments[a++]))?(o=o*(r=c/e)*r+1,c=e):o+=e>0?(r=e/c)*r:e;return c===1/0?1/0:c*Math.sqrt(o)}})},function(t,n,e){var r=e(0),i=Math.imul;r(r.S+r.F*e(1)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r;return 0|i*o+((65535&e>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(109)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(79)})},function(t,n,e){var r=e(0),i=e(80),o=Math.exp;r(r.S+r.F*e(1)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),i=e(80),o=Math.exp;r(r.S,"Math",{tanh:function(t){var n=i(t=+t),e=i(-t);return n==1/0?1:e==1/0?-1:(n-e)/(o(t)+o(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),i=e(37),o=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,a=0;r>a;){if(n=+arguments[a++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),i=e(18),o=e(8);r(r.S,"String",{raw:function(t){for(var n=i(t.raw),e=o(n.length),r=arguments.length,a=[],u=0;e>u;)a.push(String(n[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(t,n,e){"use strict";e(55)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(81)(!0);e(82)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),i=e(81)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(83),a="".endsWith;r(r.P+r.F*e(85)("endsWith"),"String",{endsWith:function(t){var n=o(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=i(n.length),u=void 0===e?r:Math.min(i(e),r),c=String(t);return a?a.call(n,c,u):n.slice(u-c.length,u)===c}})},function(t,n,e){"use strict";var r=e(0),i=e(83);r(r.P+r.F*e(85)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(78)})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(83),a="".startsWith;r(r.P+r.F*e(85)("startsWith"),"String",{startsWith:function(t){var n=o(this,t,"startsWith"),e=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return a?a.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(15)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(15)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(15)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(15)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(15)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(15)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(15)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){"use strict";e(15)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(15)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){"use strict";e(15)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(15)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(15)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(15)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),i=e(14),o=e(31);r(r.P+r.F*e(1)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),e=o(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),i=e(219);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,n,e){"use strict";var r=e(1),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(e>99?e:"0"+a(e))+"Z"}:o},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(13)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,e){var r=e(7)("toPrimitive"),i=Date.prototype;r in i||e(17)(i,r,e(222))},function(t,n,e){"use strict";var r=e(2),i=e(31);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(73)})},function(t,n,e){"use strict";var r=e(26),i=e(0),o=e(14),a=e(111),u=e(86),c=e(8),s=e(87),f=e(88);i(i.S+i.F*!e(56)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,l,h=o(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,y=void 0!==v,g=0,m=f(h);if(y&&(v=r(v,d>2?arguments[2]:void 0,2)),null==m||p==Array&&u(m))for(e=new p(n=c(h.length));n>g;g++)s(e,g,y?v(h[g],g):h[g]);else for(l=m.call(h),e=new p;!(i=l.next()).done;g++)s(e,g,y?a(l,v,[i.value,g],!0):i.value);return e.length=g,e}})},function(t,n,e){"use strict";var r=e(0),i=e(87);r(r.S+r.F*e(1)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)i(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),i=e(18),o=[].join;r(r.P+r.F*(e(48)!=Object||!e(19)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),i=e(74),o=e(28),a=e(37),u=e(8),c=[].slice;r(r.P+r.F*e(1)(function(){i&&c.call(i)}),"Array",{slice:function(t,n){var e=u(this.length),r=o(this);if(n=void 0===n?e:n,"Array"==r)return c.call(this,t,n);for(var i=a(t,e),s=a(n,e),f=u(s-i),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(i+h):this[i+h];return l}})},function(t,n,e){"use strict";var r=e(0),i=e(27),o=e(14),a=e(1),u=[].sort,c=[1,2,3];r(r.P+r.F*(a(function(){c.sort(void 0)})||!a(function(){c.sort(null)})||!e(19)(u)),"Array",{sort:function(t){return void 0===t?u.call(o(this)):u.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(0),i=e(25)(0),o=e(19)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(231);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(5),i=e(73),o=e(7)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),i=e(25)(1);r(r.P+r.F*!e(19)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(25)(2);r(r.P+r.F*!e(19)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(25)(3);r(r.P+r.F*!e(19)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(25)(4);r(r.P+r.F*!e(19)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(112);r(r.P+r.F*!e(19)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),i=e(112);r(r.P+r.F*!e(19)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(53)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!e(19)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(18),o=e(22),a=e(8),u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!e(19)(u)),"Array",{lastIndexOf:function(t){if(c)return u.apply(this,arguments)||0;var n=i(this),e=a(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(113)}),e(43)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(89)}),e(43)("fill")},function(t,n,e){"use strict";var r=e(0),i=e(25)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(43)("find")},function(t,n,e){"use strict";var r=e(0),i=e(25)(6),o="findIndex",a=!0;o in[]&&Array(1)[o](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(43)(o)},function(t,n,e){e(44)("Array")},function(t,n,e){var r=e(4),i=e(77),o=e(9).f,a=e(39).f,u=e(84),c=e(57),s=r.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,d=new s(h)!==h;if(e(10)&&(!d||e(1)(function(){return p[e(7)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=u(t),o=void 0===n;return!e&&r&&t.constructor===s&&o?t:i(d?new f(r&&!o?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&o?c.call(t):n),e?this:l,s)};for(var v=function(t){t in s||o(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})},y=a(f),g=0;y.length>g;)v(y[g++]);l.constructor=s,s.prototype=l,e(13)(r,"RegExp",s)}e(44)("RegExp")},function(t,n,e){"use strict";e(116);var r=e(2),i=e(57),o=e(10),a=/./.toString,u=function(t){e(13)(RegExp.prototype,"toString",t,!0)};e(1)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,n,e){"use strict";var r=e(2),i=e(8),o=e(92),a=e(58);e(59)("match",1,function(t,n,e,u){return[function(e){var r=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=u(e,t,this);if(n.done)return n.value;var c=r(t),s=String(this);if(!c.global)return a(c,s);var f=c.unicode;c.lastIndex=0;for(var l,h=[],p=0;null!==(l=a(c,s));){var d=String(l[0]);h[p]=d,""===d&&(c.lastIndex=o(s,i(c.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,n,e){"use strict";var r=e(2),i=e(14),o=e(8),a=e(22),u=e(92),c=e(58),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;e(59)("replace",2,function(t,n,e,d){return[function(r,i){var o=t(this),a=null==r?void 0:r[n];return void 0!==a?a.call(r,o,i):e.call(String(o),r,i)},function(t,n){var i=d(e,t,this,n);if(i.done)return i.value;var l=r(t),h=String(this),p="function"==typeof n;p||(n=String(n));var y=l.global;if(y){var g=l.unicode;l.lastIndex=0}for(var m=[];;){var b=c(l,h);if(null===b)break;if(m.push(b),!y)break;""===String(b[0])&&(l.lastIndex=u(h,o(l.lastIndex),g))}for(var w,_="",x=0,k=0;k<m.length;k++){b=m[k];for(var S=String(b[0]),O=s(f(a(b.index),h.length),0),E=[],P=1;P<b.length;P++)E.push(void 0===(w=b[P])?w:String(w));var A=b.groups;if(p){var j=[S].concat(E,O,h);void 0!==A&&j.push(A);var I=String(n.apply(void 0,j))}else I=v(S,h,O,E,A,n);O>=x&&(_+=h.slice(x,O)+I,x=O+S.length)}return _+h.slice(x)}];function v(t,n,r,o,a,u){var c=r+t.length,s=o.length,f=p;return void 0!==a&&(a=i(a),f=h),e.call(u,f,function(e,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":u=a[i.slice(1,-1)];break;default:var f=+i;if(0===f)return i;if(f>s){var h=l(f/10);return 0===h?i:h<=s?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):i}u=o[f-1]}return void 0===u?"":u})}})},function(t,n,e){"use strict";var r=e(2),i=e(102),o=e(58);e(59)("search",1,function(t,n,e,a){return[function(e){var r=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=a(e,t,this);if(n.done)return n.value;var u=r(t),c=String(this),s=u.lastIndex;i(s,0)||(u.lastIndex=0);var f=o(u,c);return i(u.lastIndex,s)||(u.lastIndex=s),null===f?-1:f.index}]})},function(t,n,e){"use strict";var r=e(84),i=e(2),o=e(51),a=e(92),u=e(8),c=e(58),s=e(91),f=Math.min,l=[].push,h=!!function(){try{return new RegExp("x","y")}catch(t){}}();e(59)("split",2,function(t,n,e,p){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var i=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(i,t,n);for(var o,a,u,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),h=0,p=void 0===n?4294967295:n>>>0,d=new RegExp(t.source,f+"g");(o=s.call(d,i))&&!((a=d.lastIndex)>h&&(c.push(i.slice(h,o.index)),o.length>1&&o.index<i.length&&l.apply(c,o.slice(1)),u=o[0].length,h=a,c.length>=p));)d.lastIndex===o.index&&d.lastIndex++;return h===i.length?!u&&d.test("")||c.push(""):c.push(i.slice(h)),c.length>p?c.slice(0,p):c}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var i=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,i,r):d.call(String(i),e,r)},function(t,n){var r=p(d,t,this,n,d!==e);if(r.done)return r.value;var s=i(t),l=String(this),v=o(s,RegExp),y=s.unicode,g=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(h?"y":"g"),m=new v(h?s:"^(?:"+s.source+")",g),b=void 0===n?4294967295:n>>>0;if(0===b)return[];if(0===l.length)return null===c(m,l)?[l]:[];for(var w=0,_=0,x=[];_<l.length;){m.lastIndex=h?_:0;var k,S=c(m,h?l:l.slice(_));if(null===S||(k=f(u(m.lastIndex+(h?0:_)),l.length))===w)_=a(l,_,y);else{if(x.push(l.slice(w,_)),x.length===b)return x;for(var O=1;O<=S.length-1;O++)if(x.push(S[O]),x.length===b)return x;_=w=k}}return x.push(l.slice(w)),x}]})},function(t,n,e){var r=e(4),i=e(93).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==e(28)(a);t.exports=function(){var t,n,e,s=function(){var r,i;for(c&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){a.nextTick(s)};else if(!o||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var f=u.resolve(void 0);e=function(){f.then(s)}}else e=function(){i.call(r,s)};else{var l=!0,h=document.createTextNode("");new o(s).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){"use strict";var r=e(120),i=e(47);t.exports=e(62)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(i(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(120),i=e(47);t.exports=e(62)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,i=e(25)(0),o=e(13),a=e(32),u=e(101),c=e(121),s=e(5),f=e(1),l=e(47),h=a.getWeak,p=Object.isExtensible,d=c.ufstore,v={},y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(t){if(s(t)){var n=h(t);return!0===n?d(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return c.def(l(this,"WeakMap"),t,n)}},m=t.exports=e(62)("WeakMap",y,g,c,!0,!0);f(function(){return 7!=(new m).set((Object.freeze||Object)(v),7).get(v)})&&(u((r=c.getConstructor(y,"WeakMap")).prototype,g),a.NEED=!0,i(["delete","has","get","set"],function(t){var n=m.prototype,e=n[t];o(n,t,function(n,i){if(s(n)&&!p(n)){this._f||(this._f=new r);var o=this._f[t](n,i);return"set"==t?this:o}return e.call(this,n,i)})}))},function(t,n,e){"use strict";var r=e(121),i=e(47);e(62)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),i=e(63),o=e(94),a=e(2),u=e(37),c=e(8),s=e(5),f=e(4).ArrayBuffer,l=e(51),h=o.ArrayBuffer,p=o.DataView,d=i.ABV&&f.isView,v=h.prototype.slice,y=i.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||s(t)&&y in t}}),r(r.P+r.U+r.F*e(1)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==v&&void 0===n)return v.call(a(this),t);for(var e=a(this).byteLength,r=u(t,e),i=u(void 0===n?e:n,e),o=new(l(this,h))(c(i-r)),s=new p(this),f=new p(o),d=0;r<i;)f.setUint8(d++,s.getUint8(r++));return o}}),e(44)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(63).ABV,{DataView:e(94).DataView})},function(t,n,e){e(30)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){e(30)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){var r=e(0),i=e(27),o=e(2),a=(e(4).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!e(1)(function(){a(function(){})}),"Reflect",{apply:function(t,n,e){var r=i(t),c=o(e);return a?a(r,n,c):u.call(r,n,c)}})},function(t,n,e){var r=e(0),i=e(38),o=e(27),a=e(2),u=e(5),c=e(1),s=e(103),f=(e(4).Reflect||{}).construct,l=c(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!c(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){o(t),a(n);var e=arguments.length<3?t:o(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var c=e.prototype,p=i(u(c)?c:Object.prototype),d=Function.apply.call(t,p,n);return u(d)?d:p}})},function(t,n,e){var r=e(9),i=e(0),o=e(2),a=e(31);i(i.S+i.F*e(1)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){o(t),n=a(n,!0),o(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),i=e(23).f,o=e(2);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=i(o(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),i=e(2),o=function(t){this._t=i(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(110)(o,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,n,e){var r=e(23),i=e(40),o=e(16),a=e(0),u=e(5),c=e(2);a(a.S,"Reflect",{get:function t(n,e){var a,s,f=arguments.length<3?n:arguments[2];return c(n)===f?n[e]:(a=r.f(n,e))?o(a,"value")?a.value:void 0!==a.get?a.get.call(f):void 0:u(s=i(n))?t(s,e,f):void 0}})},function(t,n,e){var r=e(23),i=e(0),o=e(2);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(o(t),n)}})},function(t,n,e){var r=e(0),i=e(40),o=e(2);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),i=e(2),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(123)})},function(t,n,e){var r=e(0),i=e(2),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(9),i=e(23),o=e(40),a=e(16),u=e(0),c=e(33),s=e(2),f=e(5);u(u.S,"Reflect",{set:function t(n,e,u){var l,h,p=arguments.length<4?n:arguments[3],d=i.f(s(n),e);if(!d){if(f(h=o(n)))return t(h,e,u,p);d=c(0)}if(a(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=i.f(p,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=u,r.f(p,e,l)}else r.f(p,e,c(0,u));return!0}return void 0!==d.set&&(d.set.call(p,u),!0)}})},function(t,n,e){var r=e(0),i=e(75);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){e(283),t.exports=e(11).Array.includes},function(t,n,e){"use strict";var r=e(0),i=e(53)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(43)("includes")},function(t,n,e){e(285),t.exports=e(11).String.padStart},function(t,n,e){"use strict";var r=e(0),i=e(124),o=e(61);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){e(287),t.exports=e(11).String.padEnd},function(t,n,e){"use strict";var r=e(0),i=e(124),o=e(61);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){e(289),t.exports=e(70).f("asyncIterator")},function(t,n,e){e(97)("asyncIterator")},function(t,n,e){e(291),t.exports=e(11).Object.getOwnPropertyDescriptors},function(t,n,e){var r=e(0),i=e(123),o=e(18),a=e(23),u=e(87);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=o(t),c=a.f,s=i(r),f={},l=0;s.length>l;)void 0!==(e=c(r,n=s[l++]))&&u(f,n,e);return f}})},function(t,n,e){e(293),t.exports=e(11).Object.values},function(t,n,e){var r=e(0),i=e(125)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,n,e){e(295),t.exports=e(11).Object.entries},function(t,n,e){var r=e(0),i=e(125)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,n,e){"use strict";e(117),e(297),t.exports=e(11).Promise.finally},function(t,n,e){"use strict";var r=e(0),i=e(11),o=e(4),a=e(51),u=e(119);r(r.P+r.R,"Promise",{finally:function(t){var n=a(this,i.Promise||o.Promise),e="function"==typeof t;return this.then(e?function(e){return u(n,t()).then(function(){return e})}:t,e?function(e){return u(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){e(299),e(300),e(301),t.exports=e(11)},function(t,n,e){var r=e(4),i=e(0),o=e(61),a=[].slice,u=/MSIE .\./.test(o),c=function(t){return function(n,e){var r=arguments.length>2,i=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,i)}:n,e)}};i(i.G+i.B+i.F*u,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,n,e){var r=e(0),i=e(93);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,n,e){for(var r=e(90),i=e(36),o=e(13),a=e(4),u=e(17),c=e(42),s=e(7),f=s("iterator"),l=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var y,g=d[v],m=p[g],b=a[g],w=b&&b.prototype;if(w&&(w[f]||u(w,f,h),w[l]||u(w,l,g),c[g]=h,m))for(y in r)w[y]||o(w,y,r[y],!0)}},function(t,n){!function(n){"use strict";var e,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag",s="object"==typeof t,f=n.regeneratorRuntime;if(f)s&&(t.exports=f);else{(f=n.regeneratorRuntime=s?t.exports:{}).wrap=w;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",v={},y={};y[a]=function(){return this};var g=Object.getPrototypeOf,m=g&&g(g(M([])));m&&m!==r&&i.call(m,a)&&(y=m);var b=S.prototype=x.prototype=Object.create(y);k.prototype=b.constructor=S,S.constructor=k,S[c]=k.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===k||"GeneratorFunction"===(n.displayName||n.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},O(E.prototype),E.prototype[u]=function(){return this},f.AsyncIterator=E,f.async=function(t,n,e,r){var i=new E(w(t,n,e,r));return f.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},O(b),b[c]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},f.values=M,I.prototype={constructor:I,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,i){return u.type="throw",u.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=i.call(a,"catchLoc"),s=i.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=n,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),j(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;j(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:M(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}}}function w(t,n,e,r){var i=n&&n.prototype instanceof x?n:x,o=Object.create(i.prototype),a=new I(r||[]);return o._invoke=function(t,n,e){var r=l;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return R()}for(e.method=i,e.arg=o;;){var a=e.delegate;if(a){var u=P(a,e);if(u){if(u===v)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=d,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=p;var c=_(t,n,e);if("normal"===c.type){if(r=e.done?d:h,c.arg===v)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=d,e.method="throw",e.arg=c.arg)}}}(t,e,a),o}function _(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function x(){}function k(){}function S(){}function O(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function E(t){var n;this._invoke=function(e,r){function o(){return new Promise(function(n,o){!function n(e,r,o,a){var u=_(t[e],t,r);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==typeof s&&i.call(s,"__await")?Promise.resolve(s.__await).then(function(t){n("next",t,o,a)},function(t){n("throw",t,o,a)}):Promise.resolve(s).then(function(t){c.value=t,o(c)},function(t){return n("throw",t,o,a)})}a(u.arg)}(e,r,n,o)})}return n=n?n.then(o,o):o()}}function P(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,P(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=_(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,v;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function A(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function j(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function I(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function M(t){if(t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function n(){for(;++r<t.length;)if(i.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}return{next:R}}function R(){return{value:e,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(t,n,e){var r=e(304);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){n=t.exports=e(20)(!1);var r=e(305)(e(306));n.push([t.i,"body {\n  padding: 0;\n  margin: 0;\n\n  font-family: 'Open Sans', sans-serif;\n  font-size: 16px;\n}\n\n.container {\n  width: 100vw;\n  height: 100vh;\n\n  background-image: url("+r+");\n  background-repeat: no-repeat;\n}\n\nfooter {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  text-align: center;\n}\n\nfooter a.github {\n  margin: 1%;\n}",""])},function(t,n,e){"use strict";t.exports=function(t,n){return"string"!=typeof t?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),/["'() \t\n]/.test(t)||n?'"'+t.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':t)}},function(t,n,e){t.exports=e.p+"1b5df9a6591acf906bb4637e96360d95.png"},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var i,o=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?e+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,n,e){t.exports=e.p+"859c792388d9709e5c426841b84775c7.png"},function(t,n,e){t.exports=e.p+"c87777473653fd12315f36127a8025f0.png"},function(t,n,e){t.exports=e.p+"263fda72f55557b04fa9cd1652ad7d8b.png"},function(t,n,e){t.exports=e.p+"b9a59a06fa818e2a7122730d191aea42.png"},function(t,n,e){var r=e(313);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,"div.home {\n  width: 100vw;\n  height: 100vh;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\ndiv.home_content {\n  text-align: center;\n}\n\nh1.home_title {\n  margin: 5px;\n  font-weight: bold;\n  font-size: 5em;\n  color: white;\n}\n\n.home_message {\n  color: white;\n  font-weight: bold;\n  font-size: 1.3em;\n}\n\n.home_button {\n  padding: 1% 3%;\n  display: block;\n  margin: 10px auto;\n  border: 0;\n  background-color: #96c790;\n  color: white;\n  font-weight: bold;\n  font-size: 1.5em;\n  cursor: pointer;\n}\n\n.home_screens img{\n  position: absolute;\n  max-width: 20%;\n      box-shadow: 0px 0px 20px 3px #b8cdf5;\n}\n\n.home_screens img:first-child{\n  left: 1%;\n}\n\n.home_screens img:last-child{\n  right: 1%;\n}\n\n.home_screens.top img {\n  top: 1%;\n}\n\n.home_screens.bottom img {\n  bottom: 1%;\n}",""])},function(t,n,e){var r=e(315);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,"div.login {\n  width: 100vw;\n  height: 100vh;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.login_form {\n  text-align: center;\n}\n\n.login_content {\n  margin: 1em;\n}\n\n.login_label {\n  display: block;\n  color: white;\n  font-weight: bold;\n  font-size: 2em;\n}\n\n.login_nickname {\n  display: block;\n  margin: 1em auto;\n  font-size: 1.6em;\n}\n\n.login_button {\n  padding: 1% 3%;\n  border: 0;\n  background-color: #96c790;\n  color: white;\n  font-weight: bold;\n  font-size: 1.5em;\n  cursor: pointer;\n}\n\nlabel.error {\n  display: block;\n  text-align: center;\n  font-size: 1.5em;\n  color: red;\n}\n",""])},function(t,n,e){var r=e(317);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,"canvas {\n  position: fixed;\n  background-color: transparent;\n}\n",""])},function(t,n,e){var r=e(319);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".task-container > h1 {\n  text-align: center;\n  color: #476144;\n}\n\n.task-container_element {\n  padding: 2% 5%;\n  margin: 5px 5px;\n  font-size: 1.5em;\n  color: white;\n  background-color: #96c790;\n  text-align: center;\n  overflow: hidden;\n}\n\n.task-container_element:hover {\n  cursor: pointer;\n}\n\n.task-container_element:active {\n  box-shadow: inset 0 0 10px #005bb1;\n}\n\n.task-container_element:first-child {\n  margin-top: 10px;\n}\n\n.task-container_element:last-child {\n  margin-bottom: 10px;\n}\n",""])},function(t,n,e){var r=e(321);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".modal {\n  position: fixed;\n  z-index: 1;\n  padding-top: 100px;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n/* Modal Content */\n.modal_content {\n  position: relative;\n  background-color: #e3f1fc;\n  margin: auto;\n  padding: 0;\n  border: 1px solid #888;\n  width: 30%;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n}\n",""])},function(t,n,e){var r=e(323);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".task {\n  padding: 5% 10%;\n  font-size: 1.5em;\n  color: gray;\n  border: 0;\n  background-color: #e3f1fc;\n  text-align: center;\n}\n\n.task_input {\n  max-width: 100%;\n  font-size: 1.2em;\n}\n\n.task_submit {\n  margin: 1em auto;\n  display: block;\n  padding: 5% 10%;\n  background-color: #96c790;\n  color: white;\n  border: 0;\n  font-weight: bold;\n  font-size: 1.2em;\n  cursor: pointer;\n}\n",""])},function(t,n,e){var r=e(325);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".task {\n  padding: 5% 10%;\n  font-size: 1.5em;\n  color: gray;\n  border: 0;\n  background-color: #e3f1fc;\n  text-align: center;\n}\n\n.task_input {\n  max-width: 100%;\n  font-size: 1.2em;\n}\n\n.task_submit {\n  margin: 1em auto;\n  display: block;\n  padding: 5% 10%;\n  background-color: #96c790;\n  color: white;\n  border: 0;\n  font-weight: bold;\n  font-size: 1.2em;\n  cursor: pointer;\n}\n",""])},function(t,n,e){var r=e(327);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".task {\n  padding: 3% 15%;\n  font-size: 1.5em;\n  color: gray;\n  border: 0;\n  background-color: #e3f1fc;\n  text-align: center;\n}\n\n.task_input {\n  max-width: 100%;\n  font-size: 1.2em;\n}\n\n.task_play{\n  display: block;\n  width: 50px;\n  height: 50px;\n  padding: 0 0;\n  background: #6495ed;\n  border: none;\n  border-radius: 100%;\n  margin: 1em auto;\n  cursor: pointer;\n  font-size: 1.2em;\n  outline: none;\n}\n\n.task_play::after {\n  content: '';\n  display: inline-block;\n  position: relative;\n  top: 1px;\n  left: 3px;\n  border-style: solid;\n  border-width: 10px 0 10px 20px;\n  border-color: transparent transparent transparent white;\n}\n\n.task_play:active {\n  box-shadow: inset 0 0 10px #005bb1;\n}\n\n.task_submit {\n  margin: 1em auto;\n  display: block;\n  padding: 5% 10%;\n  background-color: #96c790;\n  color: white;\n  border: 0;\n  font-weight: bold;\n  font-size: 1.2em;\n  cursor: pointer;\n}\n",""])},function(t,n,e){var r=e(329);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".letter {\n  display: inline-block;\n  margin: 1% 3%;\n  border: 1px solid black;\n  box-sizing: border-box;\n}\n\n.letter_value {\n  padding: 0 0.5em;\n  cursor: move;\n}\n",""])},function(t,n,e){var r=e(331);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,"div.score-container {\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.score-container_title {  \n  display: block;\n  color: white;\n  font-weight: bold;\n  font-size: 3em;\n  text-align: center;\n}\n\ntable {\n  width: 60%;\n  border-collapse: collapse;\n  text-align: center;\n  background-color: rgba(150, 199, 144, 0.5);\n  overflow: hidden;\n}\n\ntable th {\n  padding: 1% 5%;\n  font-weight: bold;\n  color: #073899;\n  background-color: #97ca92;\n}\n\ntable>tbody>tr:hover {\n  background-color: #becaf8;\n}\n\ntable td {\n  position: relative;\n  padding: 1% 5%;\n  color: #666699;\n  border-top: 1px solid #e8edff;\n}\n\ntbody>tr:nth-child(2n + 1) {\n  background-color: #e8edff;\n}\n\nbutton.restart {\n  display: block;\n  margin-top: 1em;\n  padding: 1% 3%;\n  border: 0;\n  background-color: #96c790;\n  color: white;\n  font-weight: bold;\n  font-size: 1.5em;\n  cursor: pointer;\n}\n",""])},function(t,n,e){"use strict";e.r(n);e(137),e(303);var r=e(126),i=e.n(r);function o(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"init",value:function(){document.body.innerHTML=i.a}}],(e=null)&&o(n.prototype,e),r&&o(n,r),t}(),u=e(127),c=e.n(u);e(312);function s(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var f="div.container",l=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"show",value:function(){return document.body.querySelector(f).innerHTML=c.a,document.body.querySelector("button.play").focus(),t.onPlay()}},{key:"hide",value:function(){document.body.querySelector(f).innerHTML=""}},{key:"onPlay",value:function(){return new Promise(function(n){document.body.querySelector("button.play").addEventListener("click",function(){t.hide(),n("start")}),document.body.querySelector("button.score").addEventListener("click",function(){t.hide(),n("score")})})}}],(e=null)&&s(n.prototype,e),r&&s(n,r),t}(),h=e(128),p=e.n(h);e(314);function d(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var v="div.container",y="input#nickname",g="label.error",m="Nickname can not be null or empty",b=13,w=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"show",value:function(){return document.body.querySelector(v).innerHTML=p.a,this.processLogin()}},{key:"hide",value:function(){document.body.querySelector(v).innerHTML=""}},{key:"processLogin",value:function(){var n=this;return t.onPlay().catch(function(){return document.body.querySelector(g).innerHTML=m,n.processLogin()})}},{key:"onPlay",value:function(){var t=document.body.querySelector(y);return t.focus(),new Promise(function(n,e){var r=document.body.querySelector("button");r.addEventListener("click",function(r){r.preventDefault();var i=t.value;i&&n(i),e()}),r.addEventListener("keyup",function(t){t.keyCode===b&&r.click()})})}}],(e=null)&&d(n.prototype,e),r&&d(n,r),t}(),_=e(129),x=e.n(_);e(316);function k(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var S={images:{count:11,indexOfSplash:5,start:1,updateInterval:5,scale:.25,path:"./images/fireball/fireball_",ext:".png"},audio:{path:"./audio/fireball_attack.mp3"},step:5},O=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.ctx=n,this.attack=!1,this.index=S.images.start,this.updateInterval=0,this.images=[],this.audio=new Audio(S.audio.path),this.loadImages()}var n,e,r;return n=t,(e=[{key:"performAttack",value:function(t){return this.attack=!0,this.draw(t)}},{key:"draw",value:function(t){var n=this;return new Promise(function(e){n._playSound(),n._draw(t,e)})}},{key:"_playSound",value:function(){this.audio.play()}},{key:"_stopSound",value:function(){this.audio.pause(),this.audio.currentTime=0}},{key:"_draw",value:function(t,n){var e=this;if(this.reqId&&cancelAnimationFrame(this.reqId),this.attack){this.point.width>=this.finishPoint.width&&this.index===S.images.count&&(this.index=S.images.start,this.updateInterval=0,this.start=this.startPoint,this.attack=!1,this._stopSound(),t(),n()),this.index===S.images.indexOfSplash&&this.point.width<this.finishPoint.width&&(this.index=S.images.start),this.point.width>=this.finishPoint.width&&this.index<S.images.indexOfSplash&&(this.index=S.images.indexOfSplash);var r=this.images[this.index],i=r.height*S.images.scale,o=r.width*S.images.scale;this.ctx.drawImage(r,this.point.width,this.point.height,o,i),this.updateInterval===S.images.updateInterval&&(this.index+=1,this.updateInterval=0),this.updateInterval+=1,this.index<S.images.indexOfSplash&&(this.point.width+=S.step)}this.reqId=window.requestAnimationFrame(function(){return e._draw(t,n)})}},{key:"loadImages",value:function(){for(var t=S.images.start;t<=S.images.count;t+=1){var n=new Image;n.src=S.images.path+t+S.images.ext,this.images[t]=n}}},{key:"show",set:function(t){this.attack=t}},{key:"start",set:function(t){this.startPoint=t,this.point=JSON.parse(JSON.stringify(t))}},{key:"finish",set:function(t){this.finishPoint=t}}])&&k(n.prototype,e),r&&k(n,r),t}(),E=e(3);function P(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function A(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){P(o,r,i,a,u,"next",t)}function u(t){P(o,r,i,a,u,"throw",t)}a(void 0)})}}function j(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var I={breath:{intervalStep:1,default:0},death:{period:2}},M=function(){function t(n,e,r){if(function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.name=n,this.cfg=r,this.ctx=e,this.name=n,this.hp=r.hp.value,this.breath={interval:0,current:I.breath.default},this.imagesLoadedCount=0,this.handAngle=0,!(this instanceof t?this.constructor:void 0))throw Error("It is not allowed to create direct instance of AbstractCharacter")}var n,e,r;return n=t,(e=[{key:"draw",value:function(){this.recalculateBreath(),this.drawLegs(),this.drawLeftArm(),this.drawBody(),this.drawRightArm(),this.drawHead(),this.drawHP(),this.drawName(),this._requestAnimationFrame()}},{key:"_requestAnimationFrame",value:function(){this._cancelAnimationFrame(),this.reqId=requestAnimationFrame(this.draw.bind(this))}},{key:"_cancelAnimationFrame",value:function(){this.reqId&&cancelAnimationFrame(this.reqId)}},{key:"attack",value:function(){var t=A(regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",n());case 1:case"end":return t.stop()}},t,this)}));return function(n){return t.apply(this,arguments)}}()},{key:"death",value:function(){var t=A(regeneratorRuntime.mark(function t(){var n=this;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this._cancelAnimationFrame(),this.deathTime=performance.now(),t.abrupt("return",new Promise(function(t){n._death(t)}));case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"_death",value:function(t){var n=this;if(this._getExectionTime(this.deathTime)>I.death.period)t();else{var e=document.body.offsetHeight-this.dead.height-10,r=document.body.offsetWidth*this.cfg.body.ratio.width;this.ctx.drawImage(this.dead,r,e),this._cancelAnimationFrame(),this.reqId=requestAnimationFrame(function(){return n._death(t)})}}},{key:"_getExectionTime",value:function(t){return(performance.now()-t)/1e3}},{key:"recalculateBreath",value:function(){this.breath.interval===this.cfg.breath.interval&&(this.breath.interval=I.breath.default,this.breath.current+=this.cfg.breath.step,(this.breath.current>this.cfg.breath.max||this.breath.current<this.cfg.breath.min)&&(this.cfg.breath.step=-this.cfg.breath.step)),this.breath.interval+=I.breath.intervalStep}},{key:"drawName",value:function(){var t=document.body.offsetHeight*this.cfg.name.position.height,n=document.body.offsetWidth*this.cfg.name.position.width;this.ctx.font=this.cfg.text.style,this.ctx.fillText(this.name,n,t)}},{key:"drawHP",value:function(){var t=document.body.offsetHeight*this.cfg.hp.position.height,n=document.body.offsetWidth*this.cfg.hp.position.width;this.ctx.fillStyle=this.getHpStatusColor(),this.ctx.font=this.cfg.text.style,this.ctx.fillText(this.hp,n,t),this.ctx.save()}},{key:"getHpStatusColor",value:function(){var t=this.cfg.hp.status.NORMAL.color;return this.hp<this.cfg.hp.status.AVERAGE.value&&(t=this.cfg.hp.status.AVERAGE.color),this.hp<this.cfg.hp.status.CRITICAL.value&&(t=this.cfg.hp.status.CRITICAL.color),t}},{key:"health",set:function(t){this.hp>t?this.hp-=t:this.hp=0},get:function(){return this.hp}}])&&j(n.prototype,e),r&&j(n,r),t}();function R(t){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function T(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function L(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function F(t,n){return!n||"object"!==R(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function C(t){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function N(t,n){return(N=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var W={start:{height:.85*window.innerHeight,width:.35*document.body.offsetWidth},finish:{height:.85*window.innerHeight,width:.6*document.body.offsetWidth}},D=function(t){function n(t,e){var r;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(r=F(this,C(n).call(this,e,t,E))).weapon=r.initWeaponComponent(),r.build(),r}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&N(t,n)}(n,M),e=n,r=[{key:"initWeaponComponent",value:function(){var t=new O(this.ctx);return t.start=W.start,t.finish=W.finish,t}},{key:"build",value:function(){this.legs=this.loadCharacterPart(E.legs.image),this.leftArm=this.loadCharacterPart(E.arms.image.left),this.body=this.loadCharacterPart(E.body.image),this.head=this.loadCharacterPart(E.head.image),this.rightArm=this.loadCharacterPart(E.arms.image.right)}},{key:"loadCharacterPart",value:function(t){var e=this,r=new Image;return r.src=n.getPath(t),r.onload=function(){return e.onImageLoaded()},r}},{key:"onImageLoaded",value:function(){this.imagesLoadedCount+=1,this.imagesLoadedCount===E.numberOfParts&&this.draw()}},{key:"attack",value:function(){var t,n=(t=regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.weapon.performAttack(n));case 1:case"end":return t.stop()}},t,this)}),function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){T(o,r,i,a,u,"next",t)}function u(t){T(o,r,i,a,u,"throw",t)}a(void 0)})});return function(t){return n.apply(this,arguments)}}()},{key:"drawHead",value:function(){var t=document.body.offsetHeight*E.head.ratio.height-this.breath.current,n=document.body.offsetWidth*E.head.ratio.width,e=this.head.width/E.scaleRation,r=this.head.height/E.scaleRation;this.ctx.drawImage(this.head,n,t,e,r)}},{key:"drawBody",value:function(){var t=document.body.offsetHeight*E.body.ratio.height,n=document.body.offsetWidth*E.body.ratio.width,e=this.body.width/E.scaleRation,r=this.body.height/E.scaleRation;this.ctx.drawImage(this.body,n,t,e,r)}},{key:"drawLegs",value:function(){var t=document.body.offsetHeight*E.legs.ratio.height,n=document.body.offsetWidth*E.legs.ratio.width,e=this.legs.width/E.scaleRation,r=this.legs.height/E.scaleRation;this.ctx.drawImage(this.legs,n,t,e,r)}},{key:"drawLeftArm",value:function(){var t=document.body.offsetHeight*E.arms.ratio.left.height-this.breath.current,n=document.body.offsetWidth*E.arms.ratio.left.width,e=this.leftArm.width/E.scaleRation,r=this.leftArm.height/E.scaleRation;this.ctx.save(),this.ctx.translate(n,t),this._rotateHand(),this.ctx.drawImage(this.leftArm,0,0,e,r),this.ctx.restore()}},{key:"_rotateHand",value:function(){this.ctx.rotate(this.handAngle*Math.PI/180),this.weapon.attack&&this.handAngle>-this.cfg.arms.attack.angle?this.handAngle-=this.cfg.arms.attack.step:!this.weapon.attack&&this.handAngle<0&&(this.handAngle+=this.cfg.arms.attack.step),0!==this.handAngle&&this.ctx.scale(-1,1)}},{key:"drawRightArm",value:function(){var t=document.body.offsetHeight*E.arms.ratio.right.height-this.breath.current,n=document.body.offsetWidth*E.arms.ratio.right.width,e=this.rightArm.width/E.scaleRation,r=this.rightArm.height/E.scaleRation;this.ctx.drawImage(this.rightArm,n,t,e,r)}}],i=[{key:"getPath",value:function(t){return E.image.path+t+E.image.ext}}],r&&L(e.prototype,r),i&&L(e,i),n}(),q=e(12),U=e(6);function B(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var H={images:{count:5,start:1,scale:1,updateInterval:5,path:"./images/magic/magic_",ext:".png"},audio:{path:"./audio/magic_attack.mp3"},step:5,time:2,numberOfMillisInSecond:1e3},V=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.ctx=n,this.attack=!1,this.index=H.images.start,this.updateInterval=0,this.images=[],this.loadImages(),this.audio=new Audio(H.audio.path)}var n,e,r;return n=t,(e=[{key:"performAttack",value:function(t){return this.attack=!0,this.start=performance.now(),this.draw(t)}},{key:"draw",value:function(t){var n=this;return new Promise(function(e){n._playSound(),n._draw(t,e)})}},{key:"_playSound",value:function(){this.audio.play()}},{key:"_stopSound",value:function(){this.audio.pause(),this.audio.currentTime=0}},{key:"_draw",value:function(t,n){var e=this;if(this.reqId&&cancelAnimationFrame(this.reqId),this.attack){this._getExectionTime()>=H.time&&(this.index=H.images.start,this.updateInterval=0,this.attack=!1,this._stopSound(),t(),n()),this.index>H.images.count&&(this.index=H.images.start);var r=this.images[this.index],i=r.height*H.images.scale,o=r.width*H.images.scale;this.ctx.drawImage(r,this.point.width,this.point.height,o,i),this.updateInterval===H.images.updateInterval&&(this.index+=1,this.updateInterval=0),this.updateInterval+=1}this.reqId=window.requestAnimationFrame(function(){return e._draw(t,n)})}},{key:"_getExectionTime",value:function(){return(performance.now()-this.start)/H.numberOfMillisInSecond}},{key:"loadImages",value:function(){for(var t=H.images.start;t<=H.images.count;t+=1){var n=new Image;n.src=H.images.path+t+H.images.ext,this.images[t]=n}}},{key:"show",set:function(t){this.attack=t}},{key:"position",set:function(t){this.point=JSON.parse(JSON.stringify(t))}}])&&B(n.prototype,e),r&&B(n,r),t}();function z(t){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function G(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function K(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function J(t,n){return!n||"object"!==z(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function $(t){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Y(t,n){return(Y=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var X={position:{height:window.innerHeight*U.arms.attack.position.height,width:document.body.offsetWidth*U.arms.attack.position.width}},Z=function(t){function n(t,e){var r;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(r=J(this,$(n).call(this,e,t,U))).weapon=r.initWeaponComponent(),r.build(),r}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&Y(t,n)}(n,M),e=n,r=[{key:"initWeaponComponent",value:function(){var t=new V(this.ctx);return t.position=X.position,t}},{key:"attack",value:function(){var t,n=(t=regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.weapon.performAttack(n));case 1:case"end":return t.stop()}},t,this)}),function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){G(o,r,i,a,u,"next",t)}function u(t){G(o,r,i,a,u,"throw",t)}a(void 0)})});return function(t){return n.apply(this,arguments)}}()},{key:"build",value:function(){this.legs=this.loadRandom(U.legs.image),this.leftArm=this.loadRandom(U.arms.image),this.body=this.loadRandom(U.body.image),this.head=this.loadRandom(U.head.image),this.rightArm=this.loadRandom(U.arms.image),this.dead=this.load(n.getPath(U.death.image,""))}},{key:"loadRandom",value:function(t){return this.load(n.getRandomPath(t))}},{key:"load",value:function(t){var n=this,e=new Image;return e.src=t,e.onload=function(){return n.onImageLoaded()},e}},{key:"onImageLoaded",value:function(){this.imagesLoadedCount+=1,this.imagesLoadedCount===U.numberOfParts&&this.draw()}},{key:"drawHead",value:function(){var t=document.body.offsetHeight*U.head.ratio.height-this.breath.current,n=document.body.offsetWidth*U.head.ratio.width;this.ctx.drawImage(this.head,n,t)}},{key:"drawBody",value:function(){var t=document.body.offsetHeight*U.body.ratio.height,n=document.body.offsetWidth*U.body.ratio.width;this.ctx.drawImage(this.body,n,t)}},{key:"drawLegs",value:function(){var t=document.body.offsetHeight*U.legs.ratio.height,n=document.body.offsetWidth*U.legs.ratio.width;this.ctx.drawImage(this.legs,n,t)}},{key:"drawLeftArm",value:function(){var t=this.leftArm.width-U.arms.position.left.width,n=document.body.offsetHeight*U.arms.ratio.left.height-this.breath.current,e=document.body.offsetWidth*U.arms.ratio.left.width;this.ctx.translate(e+t,n),this._rotateHand(),this.ctx.drawImage(this.leftArm,U.arms.position.left.width,0,t,this.leftArm.height,-t,0,t,this.leftArm.height),this.ctx.restore()}},{key:"_rotateHand",value:function(){this.ctx.rotate(this.handAngle*Math.PI/180),this.weapon.attack&&this.handAngle<this.cfg.arms.attack.angle?this.handAngle+=this.cfg.arms.attack.step:!this.weapon.attack&&this.handAngle>0&&(this.handAngle-=this.cfg.arms.attack.step)}},{key:"drawRightArm",value:function(){var t=document.body.offsetHeight*U.arms.ratio.right.height-this.breath.current,n=document.body.offsetWidth*U.arms.ratio.right.width;this.ctx.drawImage(this.rightArm,0,0,U.arms.position.right.width,this.rightArm.height,n,t,U.arms.position.right.width,this.rightArm.height)}}],i=[{key:"getPath",value:function(t,n){return U.image.path+t+n+U.image.ext}},{key:"getRandomPath",value:function(t){return n.getPath(t,q.a.random(U.numberOfMonsters))}}],r&&K(e.prototype,r),i&&K(e,i),n}(),Q=e(130),tt=e.n(Q),nt=(e(318),e(320),e(131)),et=e.n(nt);function rt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var it="div",ot=".modal_content",at=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,(e=[{key:"show",value:function(){this.container=document.createElement(it),this.container.innerHTML=et.a,document.body.appendChild(this.container),this.modal=this.container.querySelector(ot)}},{key:"clean",value:function(){this.container.remove()}}])&&rt(n.prototype,e),r&&rt(n,r),t}(),ut=e(132),ct=e.n(ut);e(322);function st(t){return(st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ft(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function lt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ht(t,n){return!n||"object"!==st(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function pt(t){return(pt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function dt(t,n){return(dt=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var vt=function(t){function n(){var t;if(function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),t=ht(this,pt(n).call(this)),!(this instanceof n?this.constructor:void 0))throw Error("It is not allowed to create direct instance of  AbstractTaskComponent");return t}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&dt(t,n)}(n,at),e=n,(r=[{key:"execute",value:function(){var t,n=(t=regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.show(),t.next=3,this.process();case 3:return n=t.sent,this.clean(),t.abrupt("return",n);case 6:case"end":return t.stop()}},t,this)}),function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){ft(o,r,i,a,u,"next",t)}function u(t){ft(o,r,i,a,u,"throw",t)}a(void 0)})});return function(){return n.apply(this,arguments)}}()}])&&lt(e.prototype,r),i&&lt(e,i),n}(),yt=e(95);function gt(t){return(gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function mt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function bt(t,n){return!n||"object"!==gt(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function wt(t,n,e){return(wt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=_t(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function _t(t){return(_t=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function xt(t,n){return(xt=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var kt={description:".task_description",input:".task_input",submit:".task_submit"},St=function(t){function n(){return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),bt(this,_t(n).apply(this,arguments))}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&xt(t,n)}(n,vt),e=n,(r=[{key:"show",value:function(){wt(_t(n.prototype),"show",this).call(this),this.modal.innerHTML=ct.a}},{key:"process",value:function(){var t=this;return new Promise(function(n){var e=yt.a.getRandomTask(),r=t.modal.querySelector(kt.input);t.modal.querySelector(kt.description).innerHTML=e,t.modal.querySelector(kt.submit).addEventListener("click",function(){var t=parseInt(r.value,10);yt.a.isAnswerValid(e,t)&&n(!0),n(!1)})})}}])&&mt(e.prototype,r),i&&mt(e,i),n}(),Ot=e(133),Et=e.n(Ot),Pt=(e(324),e(64));function At(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var jt=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"getRandomTask",value:function(){var t=q.a.random(Pt.dictionary.length);return Pt.dictionary[t].word}},{key:"isAnswerValid",value:function(t,n){var e=q.a.normalizeText(n);return Pt.dictionary.filter(function(n){return n.word===t}).flatMap(function(t){return t.translations}).some(function(t){return t===e})}}],(e=null)&&At(n.prototype,e),r&&At(n,r),t}();function It(t){return(It="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Mt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Rt(t,n){return!n||"object"!==It(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function Tt(t,n,e){return(Tt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=Lt(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function Lt(t){return(Lt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ft(t,n){return(Ft=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var Ct={description:".task_description",input:".task_input",submit:".task_submit"},Nt=function(t){function n(){return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Rt(this,Lt(n).apply(this,arguments))}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&Ft(t,n)}(n,vt),e=n,(r=[{key:"show",value:function(){Tt(Lt(n.prototype),"show",this).call(this),this.modal.innerHTML=Et.a}},{key:"process",value:function(){var t=this;return new Promise(function(n){var e=jt.getRandomTask(),r=t.modal.querySelector(Ct.input);t.modal.querySelector(Ct.description).innerHTML=e,t.modal.querySelector(Ct.submit).addEventListener("click",function(){jt.isAnswerValid(e,r.value)&&n(!0),n(!1)})})}}])&&Mt(e.prototype,r),i&&Mt(e,i),n}(),Wt=e(134),Dt=e.n(Wt),qt=(e(326),e(65));function Ut(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Bt=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"getRandomTask",value:function(){var t=q.a.random(qt.words.length);return qt.words[t]}},{key:"isAnswerValid",value:function(t,n){var e=q.a.normalizeText(n);return t===e&&qt.words.some(function(n){return n===t})}},{key:"pronounce",value:function(t){return new Promise(function(n){var e=new SpeechSynthesisUtterance(q.a.normalizeText(t));e.onend=function(){return n()},window.speechSynthesis.cancel(),window.speechSynthesis.speak(e)})}}],(e=null)&&Ut(n.prototype,e),r&&Ut(n,r),t}();function Ht(t){return(Ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Vt(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function zt(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){Vt(o,r,i,a,u,"next",t)}function u(t){Vt(o,r,i,a,u,"throw",t)}a(void 0)})}}function Gt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Kt(t,n){return!n||"object"!==Ht(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function Jt(t,n,e){return(Jt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=$t(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function $t(t){return($t=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Yt(t,n){return(Yt=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var Xt={input:".task_input",submit:".task_submit",play:".task_play"},Zt=function(t){function n(){return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Kt(this,$t(n).apply(this,arguments))}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&Yt(t,n)}(n,vt),e=n,(r=[{key:"show",value:function(){Jt($t(n.prototype),"show",this).call(this),this.modal.innerHTML=Dt.a}},{key:"process",value:function(){var t=this;return new Promise(function(n){var e=Bt.getRandomTask(),r=t.modal.querySelector(Xt.input);t.modal.querySelector(Xt.submit).addEventListener("click",function(){Bt.isAnswerValid(e,r.value)&&n(!0),n(!1)}),t.modal.querySelector(Xt.play).addEventListener("click",zt(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",Bt.pronounce(e));case 1:case"end":return t.stop()}},t,this)})))})}}])&&Gt(e.prototype,r),i&&Gt(e,i),n}(),Qt=(e(328),e(135)),tn=e.n(Qt),nn=e(66);function en(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var rn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"getRandomTask",value:function(){var t=nn.words[q.a.random(nn.words.length-1)].trim().split("");return q.a.shuffle(t)}},{key:"isAnswerValid",value:function(t){return-1!==nn.words.indexOf(q.a.normalizeText(t))}}],(e=null)&&en(n.prototype,e),r&&en(n,r),t}();function on(t){return(on="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function an(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function un(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function cn(t,n){return!n||"object"!==on(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function sn(t,n,e){return(sn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=fn(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function fn(t){return(fn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ln(t,n){return(ln=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var hn={container:".letter_container",attribute:{name:"draggable",value:!0},selector:".letter",valueClass:"letter_value",valueSelector:".letter_value"},pn={description:".task_description",submit:".task_submit"},dn=function(t){function n(){var t;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=cn(this,fn(n).call(this))).letters=[],t}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&ln(t,n)}(n,vt),e=n,(r=[{key:"show",value:function(){sn(fn(n.prototype),"show",this).call(this),this.modal.innerHTML=tn.a}},{key:"process",value:function(){var t=this;return new Promise(function(n){t._displayTask(),t._applyListeners(),t.modal.querySelector(pn.submit).addEventListener("click",function(){rn.isAnswerValid(t._buildAnswer())&&n(!0),n(!1)})})}},{key:"clean",value:function(){sn(fn(n.prototype),"clean",this).call(this)}},{key:"_applyListeners",value:function(){var t=this,n=this.modal.querySelector(hn.container);n.addEventListener("dragstart",this._dragStart.bind(this)),n.addEventListener("dragover",this._dragOver.bind(this)),n.addEventListener("dragenter",this._dragEnter.bind(this)),n.querySelectorAll(hn.valueSelector).forEach(function(n){n.addEventListener("drop",t._dragDrop.bind(t))})}},{key:"_dragStart",value:function(t){t.dataTransfer.setData("text/plain",t.target.id);var n=t.target.closest(hn.valueSelector);n&&(this.index=this._getIndexOfLetter(n),this.tmpArray=an(this.letters))}},{key:"_dragOver",value:function(t){t.target.closest(hn.valueSelector)&&t.preventDefault()}},{key:"_dragEnter",value:function(t){var n=t.target.closest(hn.valueSelector);if(n){t.preventDefault();var e=this._getIndexOfLetter(n);if(e!==this.index){var r=this.tmpArray.slice(0,this.index);r=r.concat(this.tmpArray.slice(this.index+1)),this.tmpArray=[].concat(an(r.slice(0,e)),[this.tmpArray[this.index]],an(r.slice(e))),this.index=e,this._updateValues(this.tmpArray)}}}},{key:"_updateValues",value:function(t){this.modal.querySelectorAll(hn.valueSelector).forEach(function(n,e){n.innerHTML=t[e]})}},{key:"_dragDrop",value:function(t){t.target.closest(hn.valueSelector)&&(this.letters=this.tmpArray)}},{key:"_getIndexOfLetter",value:function(t){var n=-1;return this.modal.querySelectorAll(hn.valueSelector).forEach(function(e,r){e===t&&(n=r)}),n}},{key:"_displayTask",value:function(){var t=this,n=document.createDocumentFragment();this.letters=rn.getRandomTask(),this.letters.forEach(function(e){var r=t._buildLetterElement(e);n.append(r)}),this.modal.querySelector(hn.container).append(n)}},{key:"_buildLetterElement",value:function(t){var n=this._buildElementWithClasses("span",hn.valueClass);n.innerHTML=t,n.setAttribute(hn.attribute.name,hn.attribute.value);var e=this._buildElementWithClasses("div","letter");return e.append(n),e}},{key:"_buildElementWithClasses",value:function(t){for(var n=document.createElement(t),e=arguments.length,r=new Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];return r&&0!==r.length&&n.classList.add(r),n}},{key:"_buildAnswer",value:function(){for(var t=this.modal.querySelector(hn.container).querySelectorAll(hn.selector),n="",e=0;e<t.length;e+=1)n+=t[e].textContent;return n}}])&&un(e.prototype,r),i&&un(e,i),n}();function vn(t){return(vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function yn(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function gn(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function mn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function bn(t,n){return!n||"object"!==vn(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function wn(t,n,e){return(wn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=_n(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function _n(t){return(_n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function xn(t,n){return(xn=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var kn=".task-container_element",Sn="id",On=function(t){function n(){var t;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=bn(this,_n(n).call(this))).tasks=t.initTasks(),t}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&xn(t,n)}(n,at),e=n,(r=[{key:"initTasks",value:function(){return{math:St,translation:Nt,audition:Zt,word:dn}}},{key:"choseComponent",value:function(){var t,e=(t=regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return wn(_n(n.prototype),"show",this).call(this),this.modal.innerHTML=tt.a,t.abrupt("return",this.initActions());case 3:case"end":return t.stop()}},t,this)}),function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){gn(o,r,i,a,u,"next",t)}function u(t){gn(o,r,i,a,u,"throw",t)}a(void 0)})});return function(){return e.apply(this,arguments)}}()},{key:"initActions",value:function(){var t=this;return new Promise(function(n){t.modal.addEventListener("click",function(e){var r=e.target.closest(kn).getAttribute(Sn),i=t.getInstanceOfTask(r);i&&(t.clean(),n(i))})})}},{key:"getInstanceOfTask",value:function(t){var n=this.tasks[t];n||(n=yn(this.tasks,1)[0]);return Object.create(n.prototype)}}])&&mn(e.prototype,r),i&&mn(e,i),n}();function En(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Pn={width:.1,height:.1},An={prefix:"Level: ",style:"48px serif"},jn=function(){function t(n,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.ctx=n,this.session=e}var n,e,r;return n=t,(e=[{key:"draw",value:function(){this._drawLevel(),this._requestAnimationFrame()}},{key:"_drawLevel",value:function(){var t=document.body.offsetHeight*Pn.height,n=document.body.offsetWidth*Pn.width;this.ctx.save(),this.ctx.font=An.style,this.ctx.fillText(An.prefix+this.session.level,n,t),this.ctx.restore()}},{key:"_requestAnimationFrame",value:function(){this._cancelAnimationFrame(),this.reqId=requestAnimationFrame(this.draw.bind(this))}},{key:"_cancelAnimationFrame",value:function(){this.reqId&&cancelAnimationFrame(this.reqId)}}])&&En(n.prototype,e),r&&En(n,r),t}(),In=e(67);function Mn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Rn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"build",value:function(){var n=t.getRandomValue(In.firstName),e=t.getRandomValue(In.lastName),r=t.getRandomValue(In.middleName);return"".concat(n," ").concat(e," ").concat(r)}},{key:"getRandomValue",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(e=null)&&Mn(n.prototype,e),r&&Mn(n,r),t}();function Tn(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function Ln(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){Tn(o,r,i,a,u,"next",t)}function u(t){Tn(o,r,i,a,u,"throw",t)}a(void 0)})}}function Fn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Cn="div.container",Nn="canvas",Wn=50,Dn=0,qn=0,Un=1,Bn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,e=[{key:"init",value:function(){t.initTemplate(),this.canvas=document.querySelector("canvas"),this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.taskChooser=new On,this.refreshScreen()}},{key:"start",value:function(){var t=Ln(regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.session=n,this.session.level=qn,this.init(),this.initPerson(),this.initMonster(),this.initLevelInfo(),t.abrupt("return",this.getFightResult());case 7:case"end":return t.stop()}},t,this)}));return function(n){return t.apply(this,arguments)}}()},{key:"nextLevel",value:function(){var t=Ln(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.monster.death();case 2:this.session.level+=Un,this.initMonster(this.session);case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"initPerson",value:function(){this.person=new D(this.ctx,this.session.nickName)}},{key:"initMonster",value:function(){this.monster=new Z(this.ctx,Rn.build())}},{key:"initLevelInfo",value:function(){this.levelInfo=new jn(this.ctx,this.session).draw()}},{key:"refreshScreen",value:function(){var t=this;this.canvas.width=this.canvas.width,window.requestAnimationFrame(function(){return t.refreshScreen()})}},{key:"getFightResult",value:function(){var t=Ln(regeneratorRuntime.mark(function t(){var n=this;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.taskChooser.choseComponent().then(function(t){return t.execute()}).then(function(t){return t?n.person.attack(function(){n.monster.health=Wn}):n.monster.attack(function(){n.person.health=Wn})}).then(Ln(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n.monster.health!==Dn){t.next=3;break}return t.next=3,n.nextLevel();case 3:if(n.person.health!==Dn){t.next=5;break}return t.abrupt("return",n._buildResult());case 5:return t.abrupt("return",n.getFightResult());case 6:case"end":return t.stop()}},t,this)}))));case 1:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"_buildResult",value:function(){return this.session}}],r=[{key:"initTemplate",value:function(){document.body.querySelector(Cn).innerHTML=x.a;var t=document.body.querySelector(Nn);t.setAttribute("width",document.body.offsetWidth),t.setAttribute("height",document.body.offsetHeight)}}],e&&Fn(n.prototype,e),r&&Fn(n,r),t}(),Hn=e(136),Vn=e.n(Hn);e(330);function zn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Gn="rss-game-score-storage",Kn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,(e=[{key:"store",value:function(t){if(t){var n=this.load();n.push({name:t.nickName,level:t.level}),this._save(n)}}},{key:"load",value:function(){var t=localStorage.getItem(Gn);return t?JSON.parse(t):this._save([])}},{key:"_save",value:function(t){return localStorage.setItem(Gn,JSON.stringify(t)),t}}])&&zn(n.prototype,e),r&&zn(n,r),t}();function Jn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var $n="div.container",Yn="div.score-container table>tbody",Xn="start",Zn=13,Qn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.storage=new Kn}var n,e,r;return n=t,(e=[{key:"storeResult",value:function(t){this.storage.store(t)}},{key:"show",value:function(){return document.body.querySelector($n).innerHTML=Vn.a,this._drawScores(),this._initEventListeners()}},{key:"hide",value:function(){document.body.querySelector($n).innerHTML=null}},{key:"_initEventListeners",value:function(){return new Promise(function(t){var n=document.body.querySelector("button");n.focus(),n.addEventListener("click",function(){return t(Xn)}),n.addEventListener("keyup",function(n){n.keyCode===Zn&&t(Xn)})})}},{key:"_drawScores",value:function(){var t=this,n=document.createDocumentFragment();this.storage.load().sort(function(t,n){return n.level-t.level}).slice(0,10).forEach(function(e){var r=t._createElementWithClass("tr"),i=t._createElementWithClass("td");i.innerHTML=e.name;var o=t._createElementWithClass("td");o.innerHTML=e.level,r.append(i,o),n.append(r)}),document.body.querySelector(Yn).append(n)}},{key:"_createElementWithClass",value:function(t){for(var n=document.createElement(t),e=arguments.length,r=new Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];return r.forEach(function(t){return n.classList.append(t)}),n}}])&&Jn(n.prototype,e),r&&Jn(n,r),t}();function te(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function ne(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){te(o,r,i,a,u,"next",t)}function u(t){te(o,r,i,a,u,"throw",t)}a(void 0)})}}var ee={start:w,score:Qn};function re(t){return ie.apply(this,arguments)}function ie(){return(ie=ne(regeneratorRuntime.mark(function t(n){var e,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(ee[n]!==w){t.next=8;break}return t.next=3,w.show();case 3:return e=t.sent,t.next=6,(new Bn).start({nickName:e});case 6:r=t.sent,(new Qn).storeResult(r);case 8:return t.t0=re,t.next=11,(new Qn).show();case 11:t.t1=t.sent,(0,t.t0)(t.t1);case 13:case"end":return t.stop()}},t,this)}))).apply(this,arguments)}(function(){var t=ne(regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return a.init(),t.next=3,l.show();case 3:return n=t.sent,t.abrupt("return",re(n));case 5:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}})()()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,