!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=332)}([function(t,n,e){var r=e(4),i=e(11),o=e(17),a=e(13),u=e(26),c=function(t,n,e){var s,f,l,h,p=t&c.F,d=t&c.G,v=t&c.S,y=t&c.P,g=t&c.B,m=d?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,b=d?i:i[n]||(i[n]={}),w=b.prototype||(b.prototype={});for(s in d&&(e=n),e)l=((f=!p&&m&&void 0!==m[s])?m:e)[s],h=g&&f?u(l,r):y&&"function"==typeof l?u(Function.call,l):l,m&&a(m,s,l,t&c.U),b[s]!=l&&o(b,s,h),y&&w[s]!=l&&(w[s]=l)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(5);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t){t.exports={breath:{min:-1,max:3,interval:5,current:0,step:.1},scaleRation:6,numberOfParts:5,image:{path:"./images/person/",ext:".png"},head:{image:"head",ratio:{height:.77,width:.29}},body:{image:"body",ratio:{height:.84,width:.295}},legs:{image:"legs",ratio:{height:.92,width:.3}},arms:{image:{left:"arm_left",right:"arm_right"},ratio:{left:{height:.85,width:.32},right:{height:.85,width:.29}},position:{left:{height:0,width:90},right:{height:0,width:85}},attack:{angle:90,step:10}},hp:{value:100,status:{NORMAL:{color:"green",value:80},AVERAGE:{color:"#f49842",value:70},CRITICAL:{color:"red",value:40}},position:{height:.75,width:.3}},text:{style:"48px serif"},name:{position:{height:.7,width:.3}}}},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t){t.exports={breath:{min:-1,max:5,interval:2,current:0,step:.1},numberOfMonsters:5,numberOfParts:5,image:{path:"./images/monster/",ext:".png"},head:{image:"head_",ratio:{height:.72,width:.7}},body:{image:"body_",ratio:{height:.74,width:.7}},legs:{image:"legs_",ratio:{height:.9,width:.715}},arms:{image:"arms_",ratio:{left:{height:.77,width:.62},right:{height:.77,width:.75}},position:{left:{height:0,width:90},right:{height:0,width:85}},attack:{angle:90,step:10,position:{height:.45,width:.6}}},hp:{value:100,status:{NORMAL:{color:"green",value:70},AVERAGE:{color:"#f49842",value:60},CRITICAL:{color:"red",value:30}},position:{height:.7,width:.72}},death:{image:"dead"},name:{position:{height:.6,width:.65}},text:{style:"48px serif"}}},function(t,n,e){var r=e(69)("wks"),i=e(34),o=e(4).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,n,e){var r=e(22),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(2),i=e(96),o=e(31),a=Object.defineProperty;n.f=e(10)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){t.exports=!e(1)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n){var e=t.exports={version:"2.6.1"};"number"==typeof __e&&(__e=e)},function(t,n,e){"use strict";function r(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}e.d(n,"a",function(){return i});var i=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,i;return n=t,i=[{key:"random",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Math.floor(Math.random()*t)+n}},{key:"normalizeText",value:function(t){return t?t.toLowerCase().trim():""}},{key:"shuffle",value:function(t){for(var n=t,e=n.length-1;e>0;e-=1){var r=Math.floor(Math.random()*(e+1)),i=[n[r],n[e]];n[e]=i[0],n[r]=i[1]}return n}}],(e=null)&&r(n.prototype,e),i&&r(n,i),t}()},function(t,n,e){var r=e(4),i=e(17),o=e(16),a=e(34)("src"),u=Function.toString,c=(""+u).split("toString");e(11).inspectSource=function(t){return u.call(t)},(t.exports=function(t,n,e,u){var s="function"==typeof e;s&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(s&&(o(e,a)||i(e,a,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:u?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,n,e){var r=e(29);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(0),i=e(1),o=e(29),a=/"/g,u=function(t,n,e,r){var i=String(o(t)),u="<"+n;return""!==e&&(u+=" "+e+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+i+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(u),r(r.P+r.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(9),i=e(33);t.exports=e(10)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(48),i=e(29);t.exports=function(t){return r(i(t))}},function(t,n,e){"use strict";var r=e(1);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(o).concat([i]).join("\n")}var a;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];null!=a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),n.push(a))}},n}},function(t,n,e){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),u=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),c=null,s=0,f=[],l=e(307);function h(t,n){for(var e=0;e<t.length;e++){var r=t[e],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(m(r.parts[a],n))}else{var u=[];for(a=0;a<r.parts.length;a++)u.push(m(r.parts[a],n));o[r.id]={id:r.id,refs:1,parts:u}}}}function p(t,n){for(var e=[],r={},i=0;i<t.length;i++){var o=t[i],a=n.base?o[0]+n.base:o[0],u={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(u):e.push(r[a]={id:a,parts:[u]})}return e}function d(t,n){var e=u(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),f.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=u(t.insertAt.before,e);e.insertBefore(n,i)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=f.indexOf(t);n>=0&&f.splice(n,1)}function y(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return g(n,t.attrs),d(t,n),n}function g(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function m(t,n){var e,r,i,o;if(n.transform&&t.css){if(!(o="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=o}if(n.singleton){var a=s++;e=c||(c=y(n)),r=x.bind(null,e,a,!1),i=x.bind(null,e,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",g(n,t.attrs),d(t,n),n}(n),r=function(t,n,e){var r=e.css,i=e.sourceMap,o=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||o)&&(r=l(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),u=t.href;t.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,e,n),i=function(){v(e),e.href&&URL.revokeObjectURL(e.href)}):(e=y(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),i=function(){v(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=p(t,n);return h(e,n),function(t){for(var r=[],i=0;i<e.length;i++){var a=e[i];(u=o[a.id]).refs--,r.push(u)}t&&h(p(t,n),n);for(i=0;i<r.length;i++){var u;if(0===(u=r[i]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete o[u.id]}}}};var b,w=(b=[],function(t,n){return b[t]=n,b.filter(Boolean).join("\n")});function x(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(n,i);else{var o=document.createTextNode(i),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(o,a[n]):t.appendChild(o)}}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(49),i=e(33),o=e(18),a=e(31),u=e(16),c=e(96),s=Object.getOwnPropertyDescriptor;n.f=e(10)?s:function(t,n){if(t=o(t),n=a(n,!0),c)try{return s(t,n)}catch(t){}if(u(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(0),i=e(11),o=e(1);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],a={};a[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",a)}},function(t,n,e){var r=e(26),i=e(48),o=e(14),a=e(8),u=e(230);t.exports=function(t,n){var e=1==t,c=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=n||u;return function(n,u,d){for(var v,y,g=o(n),m=i(g),b=r(u,d,3),w=a(m.length),x=0,_=e?p(n,w):c?p(n,0):void 0;w>x;x++)if((h||x in m)&&(y=b(v=m[x],x,g),t))if(e)_[x]=y;else if(y)switch(t){case 3:return!0;case 5:return v;case 6:return x;case 2:_.push(v)}else if(f)return!1;return l?-1:s||f?f:_}}},function(t,n,e){var r=e(27);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){"use strict";if(e(10)){var r=e(35),i=e(4),o=e(1),a=e(0),u=e(63),c=e(94),s=e(26),f=e(45),l=e(33),h=e(17),p=e(46),d=e(22),v=e(8),y=e(122),g=e(37),m=e(31),b=e(16),w=e(50),x=e(5),_=e(14),k=e(86),S=e(38),O=e(40),E=e(39).f,P=e(88),A=e(34),j=e(7),I=e(25),M=e(53),R=e(51),T=e(90),L=e(42),F=e(56),C=e(44),N=e(89),W=e(113),D=e(9),q=e(23),U=D.f,B=q.f,H=i.RangeError,V=i.TypeError,z=i.Uint8Array,G=Array.prototype,K=c.ArrayBuffer,J=c.DataView,$=I(0),Y=I(2),X=I(3),Z=I(4),Q=I(5),tt=I(6),nt=M(!0),et=M(!1),rt=T.values,it=T.keys,ot=T.entries,at=G.lastIndexOf,ut=G.reduce,ct=G.reduceRight,st=G.join,ft=G.sort,lt=G.slice,ht=G.toString,pt=G.toLocaleString,dt=j("iterator"),vt=j("toStringTag"),yt=A("typed_constructor"),gt=A("def_constructor"),mt=u.CONSTR,bt=u.TYPED,wt=u.VIEW,xt=I(1,function(t,n){return Et(R(t,t[gt]),n)}),_t=o(function(){return 1===new z(new Uint16Array([1]).buffer)[0]}),kt=!!z&&!!z.prototype.set&&o(function(){new z(1).set({})}),St=function(t,n){var e=d(t);if(e<0||e%n)throw H("Wrong offset!");return e},Ot=function(t){if(x(t)&&bt in t)return t;throw V(t+" is not a typed array!")},Et=function(t,n){if(!(x(t)&&yt in t))throw V("It is not a typed array constructor!");return new t(n)},Pt=function(t,n){return At(R(t,t[gt]),n)},At=function(t,n){for(var e=0,r=n.length,i=Et(t,r);r>e;)i[e]=n[e++];return i},jt=function(t,n,e){U(t,n,{get:function(){return this._d[e]}})},It=function(t){var n,e,r,i,o,a,u=_(t),c=arguments.length,f=c>1?arguments[1]:void 0,l=void 0!==f,h=P(u);if(null!=h&&!k(h)){for(a=h.call(u),r=[],n=0;!(o=a.next()).done;n++)r.push(o.value);u=r}for(l&&c>2&&(f=s(f,arguments[2],2)),n=0,e=v(u.length),i=Et(this,e);e>n;n++)i[n]=l?f(u[n],n):u[n];return i},Mt=function(){for(var t=0,n=arguments.length,e=Et(this,n);n>t;)e[t]=arguments[t++];return e},Rt=!!z&&o(function(){pt.call(new z(1))}),Tt=function(){return pt.apply(Rt?lt.call(Ot(this)):Ot(this),arguments)},Lt={copyWithin:function(t,n){return W.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return N.apply(Ot(this),arguments)},filter:function(t){return Pt(this,Y(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){$(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Ot(this),arguments)},lastIndexOf:function(t){return at.apply(Ot(this),arguments)},map:function(t){return xt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ut.apply(Ot(this),arguments)},reduceRight:function(t){return ct.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return X(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,n){var e=Ot(this),r=e.length,i=g(t,r);return new(R(e,e[gt]))(e.buffer,e.byteOffset+i*e.BYTES_PER_ELEMENT,v((void 0===n?r:g(n,r))-i))}},Ft=function(t,n){return Pt(this,lt.call(Ot(this),t,n))},Ct=function(t){Ot(this);var n=St(arguments[1],1),e=this.length,r=_(t),i=v(r.length),o=0;if(i+n>e)throw H("Wrong length!");for(;o<i;)this[n+o]=r[o++]},Nt={entries:function(){return ot.call(Ot(this))},keys:function(){return it.call(Ot(this))},values:function(){return rt.call(Ot(this))}},Wt=function(t,n){return x(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Dt=function(t,n){return Wt(t,n=m(n,!0))?l(2,t[n]):B(t,n)},qt=function(t,n,e){return!(Wt(t,n=m(n,!0))&&x(e)&&b(e,"value"))||b(e,"get")||b(e,"set")||e.configurable||b(e,"writable")&&!e.writable||b(e,"enumerable")&&!e.enumerable?U(t,n,e):(t[n]=e.value,t)};mt||(q.f=Dt,D.f=qt),a(a.S+a.F*!mt,"Object",{getOwnPropertyDescriptor:Dt,defineProperty:qt}),o(function(){ht.call({})})&&(ht=pt=function(){return st.call(this)});var Ut=p({},Lt);p(Ut,Nt),h(Ut,dt,Nt.values),p(Ut,{slice:Ft,set:Ct,constructor:function(){},toString:ht,toLocaleString:Tt}),jt(Ut,"buffer","b"),jt(Ut,"byteOffset","o"),jt(Ut,"byteLength","l"),jt(Ut,"length","e"),U(Ut,vt,{get:function(){return this[bt]}}),t.exports=function(t,n,e,c){var s=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=i[s],g=d||{},m=d&&O(d),b=!d||!u.ABV,_={},k=d&&d.prototype,P=function(t,e){U(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,_t)}(this,e)},set:function(t){return function(t,e,r){var i=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[p](e*n+i.o,r,_t)}(this,e,t)},enumerable:!0})};b?(d=e(function(t,e,r,i){f(t,d,s,"_d");var o,a,u,c,l=0,p=0;if(x(e)){if(!(e instanceof K||"ArrayBuffer"==(c=w(e))||"SharedArrayBuffer"==c))return bt in e?At(d,e):It.call(d,e);o=e,p=St(r,n);var g=e.byteLength;if(void 0===i){if(g%n)throw H("Wrong length!");if((a=g-p)<0)throw H("Wrong length!")}else if((a=v(i)*n)+p>g)throw H("Wrong length!");u=a/n}else u=y(e),o=new K(a=u*n);for(h(t,"_d",{b:o,o:p,l:a,e:u,v:new J(o)});l<u;)P(t,l++)}),k=d.prototype=S(Ut),h(k,"constructor",d)):o(function(){d(1)})&&o(function(){new d(-1)})&&F(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=e(function(t,e,r,i){var o;return f(t,d,s),x(e)?e instanceof K||"ArrayBuffer"==(o=w(e))||"SharedArrayBuffer"==o?void 0!==i?new g(e,St(r,n),i):void 0!==r?new g(e,St(r,n)):new g(e):bt in e?At(d,e):It.call(d,e):new g(y(e))}),$(m!==Function.prototype?E(g).concat(E(m)):E(g),function(t){t in d||h(d,t,g[t])}),d.prototype=k,r||(k.constructor=d));var A=k[dt],j=!!A&&("values"==A.name||null==A.name),I=Nt.values;h(d,yt,!0),h(k,bt,s),h(k,wt,!0),h(k,gt,d),(c?new d(1)[vt]==s:vt in k)||U(k,vt,{get:function(){return s}}),_[s]=d,a(a.G+a.W+a.F*(d!=g),_),a(a.S,s,{BYTES_PER_ELEMENT:n}),a(a.S+a.F*o(function(){g.of.call(d,1)}),s,{from:It,of:Mt}),"BYTES_PER_ELEMENT"in k||h(k,"BYTES_PER_ELEMENT",n),a(a.P,s,Lt),C(s),a(a.P+a.F*kt,s,{set:Ct}),a(a.P+a.F*!j,s,Nt),r||k.toString==ht||(k.toString=ht),a(a.P+a.F*o(function(){new d(1).slice()}),s,{slice:Ft}),a(a.P+a.F*(o(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!o(function(){k.toLocaleString.call([1,2])})),s,{toLocaleString:Tt}),L[s]=j?A:I,r||j||h(k,dt,I)}}else t.exports=function(){}},function(t,n,e){var r=e(5);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){var r=e(34)("meta"),i=e(5),o=e(16),a=e(9).f,u=0,c=Object.isExtensible||function(){return!0},s=!e(1)(function(){return c(Object.preventExtensions({}))}),f=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!c(t))return"F";if(!n)return"E";f(t)}return t[r].i},getWeak:function(t,n){if(!o(t,r)){if(!c(t))return!0;if(!n)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&c(t)&&!o(t,r)&&f(t),t}}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=!1},function(t,n,e){var r=e(98),i=e(72);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(22),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(2),i=e(99),o=e(72),a=e(71)("IE_PROTO"),u=function(){},c=function(){var t,n=e(68)("iframe"),r=o.length;for(n.style.display="none",e(74).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[o[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(u.prototype=r(t),e=new u,u.prototype=null,e[a]=t):e=c(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(98),i=e(72).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){var r=e(16),i=e(14),o=e(71)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,n,e){var r=e(9).f,i=e(16),o=e(7)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n){t.exports={}},function(t,n,e){var r=e(7)("unscopables"),i=Array.prototype;null==i[r]&&e(17)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n,e){"use strict";var r=e(4),i=e(9),o=e(10),a=e(7)("species");t.exports=function(t){var n=r[t];o&&n&&!n[a]&&i.f(n,a,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(13);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){var r=e(5);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(28);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(28),i=e(7)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(a=r(n))&&"function"==typeof n.callee?"Arguments":a}},function(t,n,e){var r=e(2),i=e(27),o=e(7)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[o])?n:i(e)}},function(t){t.exports={operators:["+","-","/","*"],values:{min:0,max:20}}},function(t,n,e){var r=e(18),i=e(8),o=e(37);t.exports=function(t){return function(n,e,a){var u,c=r(n),s=i(c.length),f=o(a,s);if(t&&e!=e){for(;s>f;)if((u=c[f++])!=u)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===e)return t||f||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(0),i=e(29),o=e(1),a=e(76),u="["+a+"]",c=RegExp("^"+u+u+"*"),s=RegExp(u+u+"*$"),f=function(t,n,e){var i={},u=o(function(){return!!a[t]()||"​"!="​"[t]()}),c=i[t]=u?n(l):a[t];e&&(i[e]=c),r(r.P+r.F*u,"String",i)},l=f.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n,e){var r=e(7)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:e=!0}},o[r]=function(){return a},t(o)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(2);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){"use strict";var r=e(50),i=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var o=e.call(t,n);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,n)}},function(t,n,e){"use strict";e(115);var r=e(13),i=e(17),o=e(1),a=e(29),u=e(7),c=e(91),s=u("species"),f=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=u(t),p=!o(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),d=p?!o(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],y=e(a,h,""[t],function(t,n,e,r,i){return n.exec===c?p&&!i?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),g=y[0],m=y[1];r(String.prototype,t,g),i(RegExp.prototype,h,2==n?function(t,n){return m.call(t,this,n)}:function(t){return m.call(t,this)})}}},function(t,n,e){var r=e(26),i=e(111),o=e(86),a=e(2),u=e(8),c=e(88),s={},f={};(n=t.exports=function(t,n,e,l,h){var p,d,v,y,g=h?function(){return t}:c(t),m=r(e,l,n?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(p=u(t.length);p>b;b++)if((y=n?m(a(d=t[b])[0],d[1]):m(t[b]))===s||y===f)return y}else for(v=g.call(t);!(d=v.next()).done;)if((y=i(v,m,d.value,n))===s||y===f)return y}).BREAK=s,n.RETURN=f},function(t,n,e){var r=e(4).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(4),i=e(0),o=e(13),a=e(46),u=e(32),c=e(60),s=e(45),f=e(5),l=e(1),h=e(56),p=e(41),d=e(77);t.exports=function(t,n,e,v,y,g){var m=r[t],b=m,w=y?"set":"add",x=b&&b.prototype,_={},k=function(t){var n=x[t];o(x,t,"delete"==t?function(t){return!(g&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof b&&(g||x.forEach&&!l(function(){(new b).entries().next()}))){var S=new b,O=S[w](g?{}:-0,1)!=S,E=l(function(){S.has(1)}),P=h(function(t){new b(t)}),A=!g&&l(function(){for(var t=new b,n=5;n--;)t[w](n,n);return!t.has(-0)});P||((b=n(function(n,e){s(n,b,t);var r=d(new m,n,b);return null!=e&&c(e,y,r[w],r),r})).prototype=x,x.constructor=b),(E||A)&&(k("delete"),k("has"),y&&k("get")),(A||O)&&k(w),g&&x.clear&&delete x.clear}else b=v.getConstructor(n,t,y,w),a(b.prototype,e),u.NEED=!0;return p(b,t),_[t]=b,i(i.G+i.W+i.F*(b!=m),_),g||v.setStrong(b,t,y),b}},function(t,n,e){for(var r,i=e(4),o=e(17),a=e(34),u=a("typed_array"),c=a("view"),s=!(!i.ArrayBuffer||!i.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=i[h[l++]])?(o(r.prototype,u,!0),o(r.prototype,c,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:u,VIEW:c}},function(t){t.exports={dictionary:[{word:"test",translations:["тест","тэст"]},{word:"table",translations:["стол","столик"]},{word:"window",translations:["окно","окошечко","оконце"]},{word:"laptop",translations:["ноутбук","компьютер"]}]}},function(t){t.exports={words:["test","table","window","approximately"]}},function(t){t.exports={words:["table","test","fest","work"]}},function(t){t.exports={firstName:["Ужасный","Злобный","Сопливый"],lastName:["Огр","Гном","Гоблин"],middleName:["Том","Макс","Дима"]}},function(t,n,e){var r=e(5),i=e(4).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(11),i=e(4),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(35)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){n.f=e(7)},function(t,n,e){var r=e(69)("keys"),i=e(34);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(28);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(4).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(5),i=e(2),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(26)(Function.call,e(23).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(5),i=e(75).set;t.exports=function(t,n,e){var o,a=n.constructor;return a!==e&&"function"==typeof a&&(o=a.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){"use strict";var r=e(22),i=e(29);t.exports=function(t){var n=String(i(this)),e="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){var r=e(22),i=e(29);t.exports=function(t){return function(n,e){var o,a,u=String(i(n)),c=r(e),s=u.length;return c<0||c>=s?t?"":void 0:(o=u.charCodeAt(c))<55296||o>56319||c+1===s||(a=u.charCodeAt(c+1))<56320||a>57343?t?u.charAt(c):o:t?u.slice(c,c+2):a-56320+(o-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(35),i=e(0),o=e(13),a=e(17),u=e(42),c=e(110),s=e(41),f=e(40),l=e(7)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,e,d,v,y,g){c(e,n,d);var m,b,w,x=function(t){if(!h&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},_=n+" Iterator",k="values"==v,S=!1,O=t.prototype,E=O[l]||O["@@iterator"]||v&&O[v],P=E||x(v),A=v?k?x("entries"):P:void 0,j="Array"==n&&O.entries||E;if(j&&(w=f(j.call(new t)))!==Object.prototype&&w.next&&(s(w,_,!0),r||"function"==typeof w[l]||a(w,l,p)),k&&E&&"values"!==E.name&&(S=!0,P=function(){return E.call(this)}),r&&!g||!h&&!S&&O[l]||a(O,l,P),u[n]=P,u[_]=p,v)if(m={values:k?P:x("values"),keys:y?P:x("keys"),entries:A},g)for(b in m)b in O||o(O,b,m[b]);else i(i.P+i.F*(h||S),n,m);return m}},function(t,n,e){var r=e(84),i=e(29);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){var r=e(5),i=e(28),o=e(7)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(7)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(42),i=e(7)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){"use strict";var r=e(9),i=e(33);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(50),i=e(7)("iterator"),o=e(42);t.exports=e(11).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){"use strict";var r=e(14),i=e(37),o=e(8);t.exports=function(t){for(var n=r(this),e=o(n.length),a=arguments.length,u=i(a>1?arguments[1]:void 0,e),c=a>2?arguments[2]:void 0,s=void 0===c?e:i(c,e);s>u;)n[u++]=t;return n}},function(t,n,e){"use strict";var r=e(43),i=e(114),o=e(42),a=e(18);t.exports=e(82)(Array,"Array",function(t,n){this._t=a(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var r,i,o=e(57),a=RegExp.prototype.exec,u=String.prototype.replace,c=a,s=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(c=function(t){var n,e,r,i,c=this;return f&&(e=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),s&&(n=c.lastIndex),r=a.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),f&&r&&r.length>1&&u.call(r[0],e,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=c},function(t,n,e){"use strict";var r=e(81)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r,i,o,a=e(26),u=e(104),c=e(74),s=e(68),f=e(4),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,y=0,g={},m=function(){var t=+this;if(g.hasOwnProperty(t)){var n=g[t];delete g[t],n()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return g[++y]=function(){u("function"==typeof t?t:Function(t),n)},r(y),y},p=function(t){delete g[t]},"process"==e(28)(l)?r=function(t){l.nextTick(a(m,t,1))}:v&&v.now?r=function(t){v.now(a(m,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=b,r=a(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),m.call(t)}}:function(t){setTimeout(a(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){"use strict";var r=e(4),i=e(10),o=e(35),a=e(63),u=e(17),c=e(46),s=e(1),f=e(45),l=e(22),h=e(8),p=e(122),d=e(39).f,v=e(9).f,y=e(89),g=e(41),m="prototype",b="Wrong index!",w=r.ArrayBuffer,x=r.DataView,_=r.Math,k=r.RangeError,S=r.Infinity,O=w,E=_.abs,P=_.pow,A=_.floor,j=_.log,I=_.LN2,M=i?"_b":"buffer",R=i?"_l":"byteLength",T=i?"_o":"byteOffset";function L(t,n,e){var r,i,o,a=new Array(e),u=8*e-n-1,c=(1<<u)-1,s=c>>1,f=23===n?P(2,-24)-P(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===S?(i=t!=t?1:0,r=c):(r=A(j(t)/I),t*(o=P(2,-r))<1&&(r--,o*=2),(t+=r+s>=1?f/o:f*P(2,1-s))*o>=2&&(r++,o/=2),r+s>=c?(i=0,r=c):r+s>=1?(i=(t*o-1)*P(2,n),r+=s):(i=t*P(2,s-1)*P(2,n),r=0));n>=8;a[l++]=255&i,i/=256,n-=8);for(r=r<<n|i,u+=n;u>0;a[l++]=255&r,r/=256,u-=8);return a[--l]|=128*h,a}function F(t,n,e){var r,i=8*e-n-1,o=(1<<i)-1,a=o>>1,u=i-7,c=e-1,s=t[c--],f=127&s;for(s>>=7;u>0;f=256*f+t[c],c--,u-=8);for(r=f&(1<<-u)-1,f>>=-u,u+=n;u>0;r=256*r+t[c],c--,u-=8);if(0===f)f=1-a;else{if(f===o)return r?NaN:s?-S:S;r+=P(2,n),f-=a}return(s?-1:1)*r*P(2,f-n)}function C(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function N(t){return[255&t]}function W(t){return[255&t,t>>8&255]}function D(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function q(t){return L(t,52,8)}function U(t){return L(t,23,4)}function B(t,n,e){v(t[m],n,{get:function(){return this[e]}})}function H(t,n,e,r){var i=p(+e);if(i+n>t[R])throw k(b);var o=t[M]._b,a=i+t[T],u=o.slice(a,a+n);return r?u:u.reverse()}function V(t,n,e,r,i,o){var a=p(+e);if(a+n>t[R])throw k(b);for(var u=t[M]._b,c=a+t[T],s=r(+i),f=0;f<n;f++)u[c+f]=s[o?f:n-f-1]}if(a.ABV){if(!s(function(){w(1)})||!s(function(){new w(-1)})||s(function(){return new w,new w(1.5),new w(NaN),"ArrayBuffer"!=w.name})){for(var z,G=(w=function(t){return f(this,w),new O(p(t))})[m]=O[m],K=d(O),J=0;K.length>J;)(z=K[J++])in w||u(w,z,O[z]);o||(G.constructor=w)}var $=new x(new w(2)),Y=x[m].setInt8;$.setInt8(0,2147483648),$.setInt8(1,2147483649),!$.getInt8(0)&&$.getInt8(1)||c(x[m],{setInt8:function(t,n){Y.call(this,t,n<<24>>24)},setUint8:function(t,n){Y.call(this,t,n<<24>>24)}},!0)}else w=function(t){f(this,w,"ArrayBuffer");var n=p(t);this._b=y.call(new Array(n),0),this[R]=n},x=function(t,n,e){f(this,x,"DataView"),f(t,w,"DataView");var r=t[R],i=l(n);if(i<0||i>r)throw k("Wrong offset!");if(i+(e=void 0===e?r-i:h(e))>r)throw k("Wrong length!");this[M]=t,this[T]=i,this[R]=e},i&&(B(w,"byteLength","_l"),B(x,"buffer","_b"),B(x,"byteLength","_l"),B(x,"byteOffset","_o")),c(x[m],{getInt8:function(t){return H(this,1,t)[0]<<24>>24},getUint8:function(t){return H(this,1,t)[0]},getInt16:function(t){var n=H(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=H(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return C(H(this,4,t,arguments[1]))},getUint32:function(t){return C(H(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return F(H(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return F(H(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){V(this,1,t,N,n)},setUint8:function(t,n){V(this,1,t,N,n)},setInt16:function(t,n){V(this,2,t,W,n,arguments[2])},setUint16:function(t,n){V(this,2,t,W,n,arguments[2])},setInt32:function(t,n){V(this,4,t,D,n,arguments[2])},setUint32:function(t,n){V(this,4,t,D,n,arguments[2])},setFloat32:function(t,n){V(this,4,t,U,n,arguments[2])},setFloat64:function(t,n){V(this,8,t,q,n,arguments[2])}});g(w,"ArrayBuffer"),g(x,"DataView"),u(x[m],a.VIEW,!0),n.ArrayBuffer=w,n.DataView=x},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return MathService});var _files_config_json__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(52),_files_config_json__WEBPACK_IMPORTED_MODULE_0___namespace=__webpack_require__.t(52,1),_util__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(12);function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass(t,n,e){return n&&_defineProperties(t.prototype,n),e&&_defineProperties(t,e),t}var MathService=function(){function MathService(){_classCallCheck(this,MathService)}return _createClass(MathService,null,[{key:"getRandomTask",value:function(){var t=MathService.getOperand(),n=MathService.getOperand(),e=_files_config_json__WEBPACK_IMPORTED_MODULE_0__.operators[_util__WEBPACK_IMPORTED_MODULE_1__.a.random(_files_config_json__WEBPACK_IMPORTED_MODULE_0__.operators.length-1)];return"".concat(t," ").concat(e," ").concat(n)}},{key:"isAnswerValid",value:function isAnswerValid(task,answer){return Math.floor(eval(task))===answer}},{key:"getOperand",value:function(){return _util__WEBPACK_IMPORTED_MODULE_1__.a.random(_files_config_json__WEBPACK_IMPORTED_MODULE_0__.values.max,_files_config_json__WEBPACK_IMPORTED_MODULE_0__.values.min)}}]),MathService}()},function(t,n,e){t.exports=!e(10)&&!e(1)(function(){return 7!=Object.defineProperty(e(68)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(4),i=e(11),o=e(35),a=e(70),u=e(9).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||u(n,t,{value:a.f(t)})}},function(t,n,e){var r=e(16),i=e(18),o=e(53)(!1),a=e(71)("IE_PROTO");t.exports=function(t,n){var e,u=i(t),c=0,s=[];for(e in u)e!=a&&r(u,e)&&s.push(e);for(;n.length>c;)r(u,e=n[c++])&&(~o(s,e)||s.push(e));return s}},function(t,n,e){var r=e(9),i=e(2),o=e(36);t.exports=e(10)?Object.defineProperties:function(t,n){i(t);for(var e,a=o(n),u=a.length,c=0;u>c;)r.f(t,e=a[c++],n[e]);return t}},function(t,n,e){var r=e(18),i=e(39).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,n,e){"use strict";var r=e(36),i=e(54),o=e(49),a=e(14),u=e(48),c=Object.assign;t.exports=!c||e(1)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=c({},t)[e]||Object.keys(c({},n)).join("")!=r})?function(t,n){for(var e=a(t),c=arguments.length,s=1,f=i.f,l=o.f;c>s;)for(var h,p=u(arguments[s++]),d=f?r(p).concat(f(p)):r(p),v=d.length,y=0;v>y;)l.call(p,h=d[y++])&&(e[h]=p[h]);return e}:c},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var r=e(27),i=e(5),o=e(104),a=[].slice,u={};t.exports=Function.bind||function(t){var n=r(this),e=a.call(arguments,1),c=function(){var r=e.concat(a.call(arguments));return this instanceof c?function(t,n,e){if(!(n in u)){for(var r=[],i=0;i<n;i++)r[i]="a["+i+"]";u[n]=Function("F,a","return new F("+r.join(",")+")")}return u[n](t,e)}(n,r.length,r):o(n,r,t)};return i(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(4).parseInt,i=e(55).trim,o=e(76),a=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,n){var e=i(String(t),3);return r(e,n>>>0||(a.test(e)?16:10))}:r},function(t,n,e){var r=e(4).parseFloat,i=e(55).trim;t.exports=1/r(e(76)+"-0")!=-1/0?function(t){var n=i(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(28);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(5),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){"use strict";var r=e(38),i=e(33),o=e(41),a={};e(17)(a,e(7)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(a,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(2);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(27),i=e(14),o=e(48),a=e(8);t.exports=function(t,n,e,u,c){r(n);var s=i(t),f=o(s),l=a(s.length),h=c?l-1:0,p=c?-1:1;if(e<2)for(;;){if(h in f){u=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(u=n(u,f[h],h,s));return u}},function(t,n,e){"use strict";var r=e(14),i=e(37),o=e(8);t.exports=[].copyWithin||function(t,n){var e=r(this),a=o(e.length),u=i(t,a),c=i(n,a),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?a:i(s,a))-c,a-u),l=1;for(c<u&&u<c+f&&(l=-1,c+=f-1,u+=f-1);f-- >0;)c in e?e[u]=e[c]:delete e[u],u+=l,c+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(91);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(10)&&"g"!=/./g.flags&&e(9).f(RegExp.prototype,"flags",{configurable:!0,get:e(57)})},function(t,n,e){"use strict";var r,i,o,a,u=e(35),c=e(4),s=e(26),f=e(50),l=e(0),h=e(5),p=e(27),d=e(45),v=e(60),y=e(51),g=e(93).set,m=e(251)(),b=e(118),w=e(252),x=e(61),_=e(119),k=c.TypeError,S=c.process,O=S&&S.versions,E=O&&O.v8||"",P=c.Promise,A="process"==f(S),j=function(){},I=i=b.f,M=!!function(){try{var t=P.resolve(1),n=(t.constructor={})[e(7)("species")]=function(t){t(j,j)};return(A||"function"==typeof PromiseRejectionEvent)&&t.then(j)instanceof n&&0!==E.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),R=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},T=function(t,n){if(!t._n){t._n=!0;var e=t._c;m(function(){for(var r=t._v,i=1==t._s,o=0,a=function(n){var e,o,a,u=i?n.ok:n.fail,c=n.resolve,s=n.reject,f=n.domain;try{u?(i||(2==t._h&&C(t),t._h=1),!0===u?e=r:(f&&f.enter(),e=u(r),f&&(f.exit(),a=!0)),e===n.promise?s(k("Promise-chain cycle")):(o=R(e))?o.call(e,c,s):c(e)):s(r)}catch(t){f&&!a&&f.exit(),s(t)}};e.length>o;)a(e[o++]);t._c=[],t._n=!1,n&&!t._h&&L(t)})}},L=function(t){g.call(c,function(){var n,e,r,i=t._v,o=F(t);if(o&&(n=w(function(){A?S.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=A||F(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},F=function(t){return 1!==t._h&&0===(t._a||t._c).length},C=function(t){g.call(c,function(){var n;A?S.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},N=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),T(n,!0))},W=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw k("Promise can't be resolved itself");(n=R(t))?m(function(){var r={_w:e,_d:!1};try{n.call(t,s(W,r,1),s(N,r,1))}catch(t){N.call(r,t)}}):(e._v=t,e._s=1,T(e,!1))}catch(t){N.call({_w:e,_d:!1},t)}}};M||(P=function(t){d(this,P,"Promise","_h"),p(t),r.call(this);try{t(s(W,this,1),s(N,this,1))}catch(t){N.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(46)(P.prototype,{then:function(t,n){var e=I(y(this,P));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=A?S.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&T(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=s(W,t,1),this.reject=s(N,t,1)},b.f=I=function(t){return t===P||t===a?new o(t):i(t)}),l(l.G+l.W+l.F*!M,{Promise:P}),e(41)(P,"Promise"),e(44)("Promise"),a=e(11).Promise,l(l.S+l.F*!M,"Promise",{reject:function(t){var n=I(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(u||!M),"Promise",{resolve:function(t){return _(u&&this===a?P:this,t)}}),l(l.S+l.F*!(M&&e(56)(function(t){P.all(t).catch(j)})),"Promise",{all:function(t){var n=this,e=I(n),r=e.resolve,i=e.reject,o=w(function(){var e=[],o=0,a=1;v(t,!1,function(t){var u=o++,c=!1;e.push(void 0),a++,n.resolve(t).then(function(t){c||(c=!0,e[u]=t,--a||r(e))},i)}),--a||r(e)});return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=I(n),r=e.reject,i=w(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n,e){"use strict";var r=e(27);function i(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new i(t)}},function(t,n,e){var r=e(2),i=e(5),o=e(118);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(9).f,i=e(38),o=e(46),a=e(26),u=e(45),c=e(60),s=e(82),f=e(114),l=e(44),h=e(10),p=e(32).fastKey,d=e(47),v=h?"_s":"size",y=function(t,n){var e,r=p(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var f=t(function(t,r){u(t,f,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&c(r,e,t[s],t)});return o(f.prototype,{clear:function(){for(var t=d(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=d(this,n),r=y(e,t);if(r){var i=r.n,o=r.p;delete e._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),e._f==r&&(e._f=i),e._l==r&&(e._l=o),e[v]--}return!!r},forEach:function(t){d(this,n);for(var e,r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!y(d(this,n),t)}}),h&&r(f.prototype,"size",{get:function(){return d(this,n)[v]}}),f},def:function(t,n,e){var r,i,o=y(t,n);return o?o.v=e:(t._l=o={i:i=p(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:y,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))},e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(46),i=e(32).getWeak,o=e(2),a=e(5),u=e(45),c=e(60),s=e(25),f=e(16),l=e(47),h=s(5),p=s(6),d=0,v=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,n){return h(t.a,function(t){return t[0]===n})};y.prototype={get:function(t){var n=g(this,t);if(n)return n[1]},has:function(t){return!!g(this,t)},set:function(t,n){var e=g(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=p(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,o){var s=t(function(t,r){u(t,s,n,"_i"),t._t=n,t._i=d++,t._l=void 0,null!=r&&c(r,e,t[o],t)});return r(s.prototype,{delete:function(t){if(!a(t))return!1;var e=i(t);return!0===e?v(l(this,n)).delete(t):e&&f(e,this._i)&&delete e[this._i]},has:function(t){if(!a(t))return!1;var e=i(t);return!0===e?v(l(this,n)).has(t):e&&f(e,this._i)}}),s},def:function(t,n,e){var r=i(o(n),!0);return!0===r?v(t).set(n,e):r[t._i]=e,t},ufstore:v}},function(t,n,e){var r=e(22),i=e(8);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=i(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(39),i=e(54),o=e(2),a=e(4).Reflect;t.exports=a&&a.ownKeys||function(t){var n=r.f(o(t)),e=i.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(8),i=e(78),o=e(29);t.exports=function(t,n,e,a){var u=String(o(t)),c=u.length,s=void 0===e?" ":String(e),f=r(n);if(f<=c||""==s)return u;var l=f-c,h=i.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),a?h+u:u+h}},function(t,n,e){var r=e(36),i=e(18),o=e(49).f;t.exports=function(t){return function(n){for(var e,a=i(n),u=r(a),c=u.length,s=0,f=[];c>s;)o.call(a,e=u[s++])&&f.push(t?[e,a[e]]:a[e]);return f}}},function(t,n){t.exports='<main>\n  <div class="container">\n\n  </div>\n</main>\n<footer>\n  <p>\n    <span>© 2019</span>\n    <a href="mailto:aleksei.bulgak@gmail.com">Aleksei Bulgak</a>\n    <a href="https://github.com/aleksei-bulgak-study" target="_blank" class="github">\n      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true">\n        <path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path>\n      </svg>\n    </a>\n  </p>\n</footer>'},function(t,n,e){t.exports='<div class="home">\n  <div class="home_screens top">\n    <img src="'+e(308)+'" alt="battle" />\n    <img src="'+e(309)+'" alt="monster" />\n  </div>\n  <div class="home_content">\n    <h1 class="home_title">Welcome!</h1>\n    <p class="home_message">To start the game please press button below</p>\n    <button class="home_button play">Start</button>\n    <button class="home_button score">Score Board</button>\n  </div>\n\n  <div class="home_screens bottom">\n    <img src="'+e(310)+'" alt="monster-attack" />\n    <img src="'+e(311)+'" alt="rip" />\n  </div>\n</div>'},function(t,n){t.exports='<div class="login">\n  <form class="login_form">\n    <div class="login_content">\n      <label class="login_label" for="name">Enter Nickname</label>\n      <input class="login_nickname" id="nickname" name="name" type="text" value=""/>\n      <label class="error"></label>\n    </div>\n    <button class="login_button">Play</button>\n  </form>\n</div>\n'},function(t,n){t.exports="<canvas></canvas>\n"},function(t,n){t.exports='<div class="task-container">\n  <h1 class="task-container_title">Please choose task from the list below:</h1>\n  <div id="math" class="task-container_element">\n    <span>Math</span>\n  </div>\n  <div id="translation" class="task-container_element">\n    <span>Translate</span>\n  </div>\n  <div id="audition" class="task-container_element">\n    <span>Audition</span>\n  </div>\n  <div id="word" class="task-container_element">\n    <span>Word construction</span>\n  </div>\n</div>\n'},function(t,n){t.exports='<div class="modal">\n  <div class="modal_content"></div>\n</div>\n'},function(t,n){t.exports='<div class="task">\n  <p class="task_title">Please enter only the integer part of the result number</p>\n  <p class="task_description"></p>\n  <input type="number" class="task_input" />\n  <button class="task_submit">Submit</button>\n</div>\n'},function(t,n){t.exports='<div class="task">\n  <p class="task_title">Please enter translation of work specified below</p>\n  <p class="task_description"></p>\n  <input type="text" class="task_input" />\n  <button class="task_submit">Submit</button>\n</div>\n'},function(t,n){t.exports='<div class="task">\n  <p class="task_title">Please enter word that was pronounces</p>\n  <button class="task_play"></button>\n  <input type="text" class="task_input" />\n  <button class="task_submit">Submit</button>\n</div>\n'},function(t,n){t.exports='<div class="task">\n  <p class="task_title">Please reorder letter to form a word</p>\n  <div class="task_description letter_container"></div>\n  <button class="task_submit">Submit</button>\n</div>'},function(t,n){t.exports='<div class="score-container">\n  <h1 class="score-container_title">Scores:</h1>\n  <table class="score-container_table">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Score</th>\n      </tr>\n    </thead>\n    <tbody>\n\n    </tbody>\n  </table>\n  <button class="restart">Try Again</button>\n</div>\n'},function(t,n,e){"use strict";(function(t){e(139),e(282),e(284),e(286),e(288),e(290),e(292),e(294),e(296),e(298),e(302),t._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),t._babelPolyfill=!0}).call(this,e(138))},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){e(140),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(210),e(211),e(212),e(213),e(214),e(215),e(216),e(217),e(218),e(220),e(221),e(223),e(224),e(225),e(226),e(227),e(228),e(229),e(232),e(233),e(234),e(235),e(236),e(237),e(238),e(239),e(240),e(241),e(242),e(243),e(244),e(90),e(245),e(115),e(246),e(116),e(247),e(248),e(249),e(250),e(117),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(269),e(270),e(271),e(272),e(273),e(274),e(275),e(276),e(277),e(278),e(279),e(280),e(281),t.exports=e(11)},function(t,n,e){"use strict";var r=e(4),i=e(16),o=e(10),a=e(0),u=e(13),c=e(32).KEY,s=e(1),f=e(69),l=e(41),h=e(34),p=e(7),d=e(70),v=e(97),y=e(141),g=e(73),m=e(2),b=e(5),w=e(18),x=e(31),_=e(33),k=e(38),S=e(100),O=e(23),E=e(9),P=e(36),A=O.f,j=E.f,I=S.f,M=r.Symbol,R=r.JSON,T=R&&R.stringify,L=p("_hidden"),F=p("toPrimitive"),C={}.propertyIsEnumerable,N=f("symbol-registry"),W=f("symbols"),D=f("op-symbols"),q=Object.prototype,U="function"==typeof M,B=r.QObject,H=!B||!B.prototype||!B.prototype.findChild,V=o&&s(function(){return 7!=k(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=A(q,n);r&&delete q[n],j(t,n,e),r&&t!==q&&j(q,n,r)}:j,z=function(t){var n=W[t]=k(M.prototype);return n._k=t,n},G=U&&"symbol"==typeof M.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof M},K=function(t,n,e){return t===q&&K(D,n,e),m(t),n=x(n,!0),m(e),i(W,n)?(e.enumerable?(i(t,L)&&t[L][n]&&(t[L][n]=!1),e=k(e,{enumerable:_(0,!1)})):(i(t,L)||j(t,L,_(1,{})),t[L][n]=!0),V(t,n,e)):j(t,n,e)},J=function(t,n){m(t);for(var e,r=y(n=w(n)),i=0,o=r.length;o>i;)K(t,e=r[i++],n[e]);return t},$=function(t){var n=C.call(this,t=x(t,!0));return!(this===q&&i(W,t)&&!i(D,t))&&(!(n||!i(this,t)||!i(W,t)||i(this,L)&&this[L][t])||n)},Y=function(t,n){if(t=w(t),n=x(n,!0),t!==q||!i(W,n)||i(D,n)){var e=A(t,n);return!e||!i(W,n)||i(t,L)&&t[L][n]||(e.enumerable=!0),e}},X=function(t){for(var n,e=I(w(t)),r=[],o=0;e.length>o;)i(W,n=e[o++])||n==L||n==c||r.push(n);return r},Z=function(t){for(var n,e=t===q,r=I(e?D:w(t)),o=[],a=0;r.length>a;)!i(W,n=r[a++])||e&&!i(q,n)||o.push(W[n]);return o};U||(u((M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===q&&n.call(D,e),i(this,L)&&i(this[L],t)&&(this[L][t]=!1),V(this,t,_(1,e))};return o&&H&&V(q,t,{configurable:!0,set:n}),z(t)}).prototype,"toString",function(){return this._k}),O.f=Y,E.f=K,e(39).f=S.f=X,e(49).f=$,e(54).f=Z,o&&!e(35)&&u(q,"propertyIsEnumerable",$,!0),d.f=function(t){return z(p(t))}),a(a.G+a.W+a.F*!U,{Symbol:M});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var nt=P(p.store),et=0;nt.length>et;)v(nt[et++]);a(a.S+a.F*!U,"Symbol",{for:function(t){return i(N,t+="")?N[t]:N[t]=M(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var n in N)if(N[n]===t)return n},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!U,"Object",{create:function(t,n){return void 0===n?k(t):J(k(t),n)},defineProperty:K,defineProperties:J,getOwnPropertyDescriptor:Y,getOwnPropertyNames:X,getOwnPropertySymbols:Z}),R&&a(a.S+a.F*(!U||s(function(){var t=M();return"[null]"!=T([t])||"{}"!=T({a:t})||"{}"!=T(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(b(n)||void 0!==t)&&!G(t))return g(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!G(n))return n}),r[1]=n,T.apply(R,r)}}),M.prototype[F]||e(17)(M.prototype,F,M.prototype.valueOf),l(M,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){var r=e(36),i=e(54),o=e(49);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var a,u=e(t),c=o.f,s=0;u.length>s;)c.call(t,a=u[s++])&&n.push(a);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(38)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(10),"Object",{defineProperty:e(9).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(10),"Object",{defineProperties:e(99)})},function(t,n,e){var r=e(18),i=e(23).f;e(24)("getOwnPropertyDescriptor",function(){return function(t,n){return i(r(t),n)}})},function(t,n,e){var r=e(14),i=e(40);e(24)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(14),i=e(36);e(24)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){e(24)("getOwnPropertyNames",function(){return e(100).f})},function(t,n,e){var r=e(5),i=e(32).onFreeze;e(24)("freeze",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(5),i=e(32).onFreeze;e(24)("seal",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(5),i=e(32).onFreeze;e(24)("preventExtensions",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(5);e(24)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(5);e(24)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(5);e(24)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(101)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(102)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(75).set})},function(t,n,e){"use strict";var r=e(50),i={};i[e(7)("toStringTag")]="z",i+""!="[object z]"&&e(13)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(103)})},function(t,n,e){var r=e(9).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||e(10)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(5),i=e(40),o=e(7)("hasInstance"),a=Function.prototype;o in a||e(9).f(a,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),i=e(105);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,n,e){var r=e(0),i=e(106);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,n,e){"use strict";var r=e(4),i=e(16),o=e(28),a=e(77),u=e(31),c=e(1),s=e(39).f,f=e(23).f,l=e(9).f,h=e(55).trim,p=r.Number,d=p,v=p.prototype,y="Number"==o(e(38)(v)),g="trim"in String.prototype,m=function(t){var n=u(t,!1);if("string"==typeof n&&n.length>2){var e,r,i,o=(n=g?n.trim():h(n,3)).charCodeAt(0);if(43===o||45===o){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+n}for(var a,c=n.slice(2),s=0,f=c.length;s<f;s++)if((a=c.charCodeAt(s))<48||a>i)return NaN;return parseInt(c,r)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof p&&(y?c(function(){v.valueOf.call(e)}):"Number"!=o(e))?a(new d(m(n)),e,p):m(n)};for(var b,w=e(10)?s(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)i(d,b=w[x])&&!i(p,b)&&l(p,b,f(d,b));p.prototype=v,v.constructor=p,e(13)(r,"Number",p)}},function(t,n,e){"use strict";var r=e(0),i=e(22),o=e(107),a=e(78),u=1..toFixed,c=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=c(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=c(e/t),e=e%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+a.call("0",7-e.length)+e}return n},d=function(t,n,e){return 0===n?e:n%2==1?d(t,n-1,e*t):d(t*t,n/2,e)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(1)(function(){u.call({})})),"Number",{toFixed:function(t){var n,e,r,u,c=o(this,f),s=i(t),v="",y="0";if(s<0||s>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(c*d(2,69,1))-69)<0?c*d(2,-n,1):c/d(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(d(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),y=p()}else l(0,e),l(1<<-n,0),y=p()+a.call("0",s);return y=s>0?v+((u=y.length)<=s?"0."+a.call("0",s-u)+y:y.slice(0,u-s)+"."+y.slice(u-s)):v+y}})},function(t,n,e){"use strict";var r=e(0),i=e(1),o=e(107),a=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==a.call(1,void 0)})||!i(function(){a.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(n):a.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),i=e(4).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(108)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),i=e(108),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),i=e(106);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,n,e){var r=e(0),i=e(105);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,n,e){var r=e(0),i=e(109),o=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,n,e){var r=e(0),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),i=e(79);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,n,e){var r=e(0),i=e(80);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(184)})},function(t,n,e){var r=e(79),i=Math.pow,o=i(2,-52),a=i(2,-23),u=i(2,127)*(2-a),c=i(2,-126);t.exports=Math.fround||function(t){var n,e,i=Math.abs(t),s=r(t);return i<c?s*(i/c/a+1/o-1/o)*c*a:(e=(n=(1+a/o)*i)-(n-i))>u||e!=e?s*(1/0):s*e}},function(t,n,e){var r=e(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,o=0,a=0,u=arguments.length,c=0;a<u;)c<(e=i(arguments[a++]))?(o=o*(r=c/e)*r+1,c=e):o+=e>0?(r=e/c)*r:e;return c===1/0?1/0:c*Math.sqrt(o)}})},function(t,n,e){var r=e(0),i=Math.imul;r(r.S+r.F*e(1)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r;return 0|i*o+((65535&e>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(109)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(79)})},function(t,n,e){var r=e(0),i=e(80),o=Math.exp;r(r.S+r.F*e(1)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),i=e(80),o=Math.exp;r(r.S,"Math",{tanh:function(t){var n=i(t=+t),e=i(-t);return n==1/0?1:e==1/0?-1:(n-e)/(o(t)+o(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),i=e(37),o=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,a=0;r>a;){if(n=+arguments[a++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),i=e(18),o=e(8);r(r.S,"String",{raw:function(t){for(var n=i(t.raw),e=o(n.length),r=arguments.length,a=[],u=0;e>u;)a.push(String(n[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(t,n,e){"use strict";e(55)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(81)(!0);e(82)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),i=e(81)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(83),a="".endsWith;r(r.P+r.F*e(85)("endsWith"),"String",{endsWith:function(t){var n=o(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=i(n.length),u=void 0===e?r:Math.min(i(e),r),c=String(t);return a?a.call(n,c,u):n.slice(u-c.length,u)===c}})},function(t,n,e){"use strict";var r=e(0),i=e(83);r(r.P+r.F*e(85)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(78)})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(83),a="".startsWith;r(r.P+r.F*e(85)("startsWith"),"String",{startsWith:function(t){var n=o(this,t,"startsWith"),e=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return a?a.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(15)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(15)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(15)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(15)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(15)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(15)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(15)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){"use strict";e(15)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(15)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){"use strict";e(15)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(15)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(15)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(15)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),i=e(14),o=e(31);r(r.P+r.F*e(1)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),e=o(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),i=e(219);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,n,e){"use strict";var r=e(1),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(e>99?e:"0"+a(e))+"Z"}:o},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(13)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,e){var r=e(7)("toPrimitive"),i=Date.prototype;r in i||e(17)(i,r,e(222))},function(t,n,e){"use strict";var r=e(2),i=e(31);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(73)})},function(t,n,e){"use strict";var r=e(26),i=e(0),o=e(14),a=e(111),u=e(86),c=e(8),s=e(87),f=e(88);i(i.S+i.F*!e(56)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,l,h=o(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,y=void 0!==v,g=0,m=f(h);if(y&&(v=r(v,d>2?arguments[2]:void 0,2)),null==m||p==Array&&u(m))for(e=new p(n=c(h.length));n>g;g++)s(e,g,y?v(h[g],g):h[g]);else for(l=m.call(h),e=new p;!(i=l.next()).done;g++)s(e,g,y?a(l,v,[i.value,g],!0):i.value);return e.length=g,e}})},function(t,n,e){"use strict";var r=e(0),i=e(87);r(r.S+r.F*e(1)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)i(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),i=e(18),o=[].join;r(r.P+r.F*(e(48)!=Object||!e(19)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),i=e(74),o=e(28),a=e(37),u=e(8),c=[].slice;r(r.P+r.F*e(1)(function(){i&&c.call(i)}),"Array",{slice:function(t,n){var e=u(this.length),r=o(this);if(n=void 0===n?e:n,"Array"==r)return c.call(this,t,n);for(var i=a(t,e),s=a(n,e),f=u(s-i),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(i+h):this[i+h];return l}})},function(t,n,e){"use strict";var r=e(0),i=e(27),o=e(14),a=e(1),u=[].sort,c=[1,2,3];r(r.P+r.F*(a(function(){c.sort(void 0)})||!a(function(){c.sort(null)})||!e(19)(u)),"Array",{sort:function(t){return void 0===t?u.call(o(this)):u.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(0),i=e(25)(0),o=e(19)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(231);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(5),i=e(73),o=e(7)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),i=e(25)(1);r(r.P+r.F*!e(19)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(25)(2);r(r.P+r.F*!e(19)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(25)(3);r(r.P+r.F*!e(19)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(25)(4);r(r.P+r.F*!e(19)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(112);r(r.P+r.F*!e(19)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),i=e(112);r(r.P+r.F*!e(19)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(53)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!e(19)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(18),o=e(22),a=e(8),u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!e(19)(u)),"Array",{lastIndexOf:function(t){if(c)return u.apply(this,arguments)||0;var n=i(this),e=a(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(113)}),e(43)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(89)}),e(43)("fill")},function(t,n,e){"use strict";var r=e(0),i=e(25)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(43)("find")},function(t,n,e){"use strict";var r=e(0),i=e(25)(6),o="findIndex",a=!0;o in[]&&Array(1)[o](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(43)(o)},function(t,n,e){e(44)("Array")},function(t,n,e){var r=e(4),i=e(77),o=e(9).f,a=e(39).f,u=e(84),c=e(57),s=r.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,d=new s(h)!==h;if(e(10)&&(!d||e(1)(function(){return p[e(7)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=u(t),o=void 0===n;return!e&&r&&t.constructor===s&&o?t:i(d?new f(r&&!o?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&o?c.call(t):n),e?this:l,s)};for(var v=function(t){t in s||o(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})},y=a(f),g=0;y.length>g;)v(y[g++]);l.constructor=s,s.prototype=l,e(13)(r,"RegExp",s)}e(44)("RegExp")},function(t,n,e){"use strict";e(116);var r=e(2),i=e(57),o=e(10),a=/./.toString,u=function(t){e(13)(RegExp.prototype,"toString",t,!0)};e(1)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,n,e){"use strict";var r=e(2),i=e(8),o=e(92),a=e(58);e(59)("match",1,function(t,n,e,u){return[function(e){var r=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=u(e,t,this);if(n.done)return n.value;var c=r(t),s=String(this);if(!c.global)return a(c,s);var f=c.unicode;c.lastIndex=0;for(var l,h=[],p=0;null!==(l=a(c,s));){var d=String(l[0]);h[p]=d,""===d&&(c.lastIndex=o(s,i(c.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,n,e){"use strict";var r=e(2),i=e(14),o=e(8),a=e(22),u=e(92),c=e(58),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;e(59)("replace",2,function(t,n,e,d){return[function(r,i){var o=t(this),a=null==r?void 0:r[n];return void 0!==a?a.call(r,o,i):e.call(String(o),r,i)},function(t,n){var i=d(e,t,this,n);if(i.done)return i.value;var l=r(t),h=String(this),p="function"==typeof n;p||(n=String(n));var y=l.global;if(y){var g=l.unicode;l.lastIndex=0}for(var m=[];;){var b=c(l,h);if(null===b)break;if(m.push(b),!y)break;""===String(b[0])&&(l.lastIndex=u(h,o(l.lastIndex),g))}for(var w,x="",_=0,k=0;k<m.length;k++){b=m[k];for(var S=String(b[0]),O=s(f(a(b.index),h.length),0),E=[],P=1;P<b.length;P++)E.push(void 0===(w=b[P])?w:String(w));var A=b.groups;if(p){var j=[S].concat(E,O,h);void 0!==A&&j.push(A);var I=String(n.apply(void 0,j))}else I=v(S,h,O,E,A,n);O>=_&&(x+=h.slice(_,O)+I,_=O+S.length)}return x+h.slice(_)}];function v(t,n,r,o,a,u){var c=r+t.length,s=o.length,f=p;return void 0!==a&&(a=i(a),f=h),e.call(u,f,function(e,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":u=a[i.slice(1,-1)];break;default:var f=+i;if(0===f)return i;if(f>s){var h=l(f/10);return 0===h?i:h<=s?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):i}u=o[f-1]}return void 0===u?"":u})}})},function(t,n,e){"use strict";var r=e(2),i=e(102),o=e(58);e(59)("search",1,function(t,n,e,a){return[function(e){var r=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=a(e,t,this);if(n.done)return n.value;var u=r(t),c=String(this),s=u.lastIndex;i(s,0)||(u.lastIndex=0);var f=o(u,c);return i(u.lastIndex,s)||(u.lastIndex=s),null===f?-1:f.index}]})},function(t,n,e){"use strict";var r=e(84),i=e(2),o=e(51),a=e(92),u=e(8),c=e(58),s=e(91),f=Math.min,l=[].push,h=!!function(){try{return new RegExp("x","y")}catch(t){}}();e(59)("split",2,function(t,n,e,p){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var i=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(i,t,n);for(var o,a,u,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),h=0,p=void 0===n?4294967295:n>>>0,d=new RegExp(t.source,f+"g");(o=s.call(d,i))&&!((a=d.lastIndex)>h&&(c.push(i.slice(h,o.index)),o.length>1&&o.index<i.length&&l.apply(c,o.slice(1)),u=o[0].length,h=a,c.length>=p));)d.lastIndex===o.index&&d.lastIndex++;return h===i.length?!u&&d.test("")||c.push(""):c.push(i.slice(h)),c.length>p?c.slice(0,p):c}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var i=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,i,r):d.call(String(i),e,r)},function(t,n){var r=p(d,t,this,n,d!==e);if(r.done)return r.value;var s=i(t),l=String(this),v=o(s,RegExp),y=s.unicode,g=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(h?"y":"g"),m=new v(h?s:"^(?:"+s.source+")",g),b=void 0===n?4294967295:n>>>0;if(0===b)return[];if(0===l.length)return null===c(m,l)?[l]:[];for(var w=0,x=0,_=[];x<l.length;){m.lastIndex=h?x:0;var k,S=c(m,h?l:l.slice(x));if(null===S||(k=f(u(m.lastIndex+(h?0:x)),l.length))===w)x=a(l,x,y);else{if(_.push(l.slice(w,x)),_.length===b)return _;for(var O=1;O<=S.length-1;O++)if(_.push(S[O]),_.length===b)return _;x=w=k}}return _.push(l.slice(w)),_}]})},function(t,n,e){var r=e(4),i=e(93).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==e(28)(a);t.exports=function(){var t,n,e,s=function(){var r,i;for(c&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){a.nextTick(s)};else if(!o||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var f=u.resolve(void 0);e=function(){f.then(s)}}else e=function(){i.call(r,s)};else{var l=!0,h=document.createTextNode("");new o(s).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){"use strict";var r=e(120),i=e(47);t.exports=e(62)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(i(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(120),i=e(47);t.exports=e(62)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,i=e(25)(0),o=e(13),a=e(32),u=e(101),c=e(121),s=e(5),f=e(1),l=e(47),h=a.getWeak,p=Object.isExtensible,d=c.ufstore,v={},y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(t){if(s(t)){var n=h(t);return!0===n?d(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return c.def(l(this,"WeakMap"),t,n)}},m=t.exports=e(62)("WeakMap",y,g,c,!0,!0);f(function(){return 7!=(new m).set((Object.freeze||Object)(v),7).get(v)})&&(u((r=c.getConstructor(y,"WeakMap")).prototype,g),a.NEED=!0,i(["delete","has","get","set"],function(t){var n=m.prototype,e=n[t];o(n,t,function(n,i){if(s(n)&&!p(n)){this._f||(this._f=new r);var o=this._f[t](n,i);return"set"==t?this:o}return e.call(this,n,i)})}))},function(t,n,e){"use strict";var r=e(121),i=e(47);e(62)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),i=e(63),o=e(94),a=e(2),u=e(37),c=e(8),s=e(5),f=e(4).ArrayBuffer,l=e(51),h=o.ArrayBuffer,p=o.DataView,d=i.ABV&&f.isView,v=h.prototype.slice,y=i.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||s(t)&&y in t}}),r(r.P+r.U+r.F*e(1)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==v&&void 0===n)return v.call(a(this),t);for(var e=a(this).byteLength,r=u(t,e),i=u(void 0===n?e:n,e),o=new(l(this,h))(c(i-r)),s=new p(this),f=new p(o),d=0;r<i;)f.setUint8(d++,s.getUint8(r++));return o}}),e(44)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(63).ABV,{DataView:e(94).DataView})},function(t,n,e){e(30)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){e(30)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(30)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){var r=e(0),i=e(27),o=e(2),a=(e(4).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!e(1)(function(){a(function(){})}),"Reflect",{apply:function(t,n,e){var r=i(t),c=o(e);return a?a(r,n,c):u.call(r,n,c)}})},function(t,n,e){var r=e(0),i=e(38),o=e(27),a=e(2),u=e(5),c=e(1),s=e(103),f=(e(4).Reflect||{}).construct,l=c(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!c(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){o(t),a(n);var e=arguments.length<3?t:o(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var c=e.prototype,p=i(u(c)?c:Object.prototype),d=Function.apply.call(t,p,n);return u(d)?d:p}})},function(t,n,e){var r=e(9),i=e(0),o=e(2),a=e(31);i(i.S+i.F*e(1)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){o(t),n=a(n,!0),o(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),i=e(23).f,o=e(2);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=i(o(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),i=e(2),o=function(t){this._t=i(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(110)(o,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,n,e){var r=e(23),i=e(40),o=e(16),a=e(0),u=e(5),c=e(2);a(a.S,"Reflect",{get:function t(n,e){var a,s,f=arguments.length<3?n:arguments[2];return c(n)===f?n[e]:(a=r.f(n,e))?o(a,"value")?a.value:void 0!==a.get?a.get.call(f):void 0:u(s=i(n))?t(s,e,f):void 0}})},function(t,n,e){var r=e(23),i=e(0),o=e(2);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(o(t),n)}})},function(t,n,e){var r=e(0),i=e(40),o=e(2);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),i=e(2),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(123)})},function(t,n,e){var r=e(0),i=e(2),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(9),i=e(23),o=e(40),a=e(16),u=e(0),c=e(33),s=e(2),f=e(5);u(u.S,"Reflect",{set:function t(n,e,u){var l,h,p=arguments.length<4?n:arguments[3],d=i.f(s(n),e);if(!d){if(f(h=o(n)))return t(h,e,u,p);d=c(0)}if(a(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=i.f(p,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=u,r.f(p,e,l)}else r.f(p,e,c(0,u));return!0}return void 0!==d.set&&(d.set.call(p,u),!0)}})},function(t,n,e){var r=e(0),i=e(75);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){e(283),t.exports=e(11).Array.includes},function(t,n,e){"use strict";var r=e(0),i=e(53)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(43)("includes")},function(t,n,e){e(285),t.exports=e(11).String.padStart},function(t,n,e){"use strict";var r=e(0),i=e(124),o=e(61);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){e(287),t.exports=e(11).String.padEnd},function(t,n,e){"use strict";var r=e(0),i=e(124),o=e(61);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){e(289),t.exports=e(70).f("asyncIterator")},function(t,n,e){e(97)("asyncIterator")},function(t,n,e){e(291),t.exports=e(11).Object.getOwnPropertyDescriptors},function(t,n,e){var r=e(0),i=e(123),o=e(18),a=e(23),u=e(87);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=o(t),c=a.f,s=i(r),f={},l=0;s.length>l;)void 0!==(e=c(r,n=s[l++]))&&u(f,n,e);return f}})},function(t,n,e){e(293),t.exports=e(11).Object.values},function(t,n,e){var r=e(0),i=e(125)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,n,e){e(295),t.exports=e(11).Object.entries},function(t,n,e){var r=e(0),i=e(125)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,n,e){"use strict";e(117),e(297),t.exports=e(11).Promise.finally},function(t,n,e){"use strict";var r=e(0),i=e(11),o=e(4),a=e(51),u=e(119);r(r.P+r.R,"Promise",{finally:function(t){var n=a(this,i.Promise||o.Promise),e="function"==typeof t;return this.then(e?function(e){return u(n,t()).then(function(){return e})}:t,e?function(e){return u(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){e(299),e(300),e(301),t.exports=e(11)},function(t,n,e){var r=e(4),i=e(0),o=e(61),a=[].slice,u=/MSIE .\./.test(o),c=function(t){return function(n,e){var r=arguments.length>2,i=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,i)}:n,e)}};i(i.G+i.B+i.F*u,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,n,e){var r=e(0),i=e(93);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,n,e){for(var r=e(90),i=e(36),o=e(13),a=e(4),u=e(17),c=e(42),s=e(7),f=s("iterator"),l=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var y,g=d[v],m=p[g],b=a[g],w=b&&b.prototype;if(w&&(w[f]||u(w,f,h),w[l]||u(w,l,g),c[g]=h,m))for(y in r)w[y]||o(w,y,r[y],!0)}},function(t,n){!function(n){"use strict";var e,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag",s="object"==typeof t,f=n.regeneratorRuntime;if(f)s&&(t.exports=f);else{(f=n.regeneratorRuntime=s?t.exports:{}).wrap=w;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",v={},y={};y[a]=function(){return this};var g=Object.getPrototypeOf,m=g&&g(g(M([])));m&&m!==r&&i.call(m,a)&&(y=m);var b=S.prototype=_.prototype=Object.create(y);k.prototype=b.constructor=S,S.constructor=k,S[c]=k.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===k||"GeneratorFunction"===(n.displayName||n.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},O(E.prototype),E.prototype[u]=function(){return this},f.AsyncIterator=E,f.async=function(t,n,e,r){var i=new E(w(t,n,e,r));return f.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},O(b),b[c]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},f.values=M,I.prototype={constructor:I,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,i){return u.type="throw",u.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=i.call(a,"catchLoc"),s=i.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=n,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),j(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;j(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:M(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}}}function w(t,n,e,r){var i=n&&n.prototype instanceof _?n:_,o=Object.create(i.prototype),a=new I(r||[]);return o._invoke=function(t,n,e){var r=l;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return R()}for(e.method=i,e.arg=o;;){var a=e.delegate;if(a){var u=P(a,e);if(u){if(u===v)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=d,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=p;var c=x(t,n,e);if("normal"===c.type){if(r=e.done?d:h,c.arg===v)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=d,e.method="throw",e.arg=c.arg)}}}(t,e,a),o}function x(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function _(){}function k(){}function S(){}function O(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function E(t){var n;this._invoke=function(e,r){function o(){return new Promise(function(n,o){!function n(e,r,o,a){var u=x(t[e],t,r);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==typeof s&&i.call(s,"__await")?Promise.resolve(s.__await).then(function(t){n("next",t,o,a)},function(t){n("throw",t,o,a)}):Promise.resolve(s).then(function(t){c.value=t,o(c)},function(t){return n("throw",t,o,a)})}a(u.arg)}(e,r,n,o)})}return n=n?n.then(o,o):o()}}function P(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,P(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=x(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,v;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function A(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function j(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function I(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function M(t){if(t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function n(){for(;++r<t.length;)if(i.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}return{next:R}}function R(){return{value:e,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(t,n,e){var r=e(304);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){n=t.exports=e(20)(!1);var r=e(305)(e(306));n.push([t.i,"body {\n  padding: 0;\n  margin: 0;\n\n  font-family: 'Open Sans', sans-serif;\n  font-size: 16px;\n}\n\n.container {\n  width: 100vw;\n  height: 100vh;\n\n  background-image: url("+r+");\n  background-repeat: no-repeat;\n}\n\nfooter {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  text-align: center;\n}\n\nfooter a.github {\n  margin: 1%;\n}",""])},function(t,n,e){"use strict";t.exports=function(t,n){return"string"!=typeof t?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),/["'() \t\n]/.test(t)||n?'"'+t.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':t)}},function(t,n,e){t.exports=e.p+"1b5df9a6591acf906bb4637e96360d95.png"},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var i,o=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?e+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,n,e){t.exports=e.p+"859c792388d9709e5c426841b84775c7.png"},function(t,n,e){t.exports=e.p+"c87777473653fd12315f36127a8025f0.png"},function(t,n,e){t.exports=e.p+"263fda72f55557b04fa9cd1652ad7d8b.png"},function(t,n,e){t.exports=e.p+"b9a59a06fa818e2a7122730d191aea42.png"},function(t,n,e){var r=e(313);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,"div.home {\n  width: 100vw;\n  height: 100vh;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\ndiv.home_content {\n  text-align: center;\n}\n\nh1.home_title {\n  margin: 5px;\n  font-weight: bold;\n  font-size: 5em;\n  color: white;\n}\n\n.home_message {\n  color: white;\n  font-weight: bold;\n  font-size: 1.3em;\n}\n\n.home_button {\n  padding: 1% 3%;\n  display: block;\n  margin: 10px auto;\n  border: 0;\n  background-color: #96c790;\n  color: white;\n  font-weight: bold;\n  font-size: 1.5em;\n  cursor: pointer;\n}\n\n.home_screens img{\n  position: absolute;\n  max-width: 20%;\n      box-shadow: 0px 0px 20px 3px #b8cdf5;\n}\n\n.home_screens img:first-child{\n  left: 1%;\n}\n\n.home_screens img:last-child{\n  right: 1%;\n}\n\n.home_screens.top img {\n  top: 1%;\n}\n\n.home_screens.bottom img {\n  bottom: 1%;\n}",""])},function(t,n,e){var r=e(315);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,"div.login {\n  width: 100vw;\n  height: 100vh;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.login_form {\n  text-align: center;\n}\n\n.login_content {\n  margin: 1em;\n}\n\n.login_label {\n  display: block;\n  color: white;\n  font-weight: bold;\n  font-size: 2em;\n}\n\n.login_nickname {\n  display: block;\n  margin: 1em auto;\n  font-size: 1.6em;\n}\n\n.login_button {\n  padding: 1% 3%;\n  border: 0;\n  background-color: #96c790;\n  color: white;\n  font-weight: bold;\n  font-size: 1.5em;\n  cursor: pointer;\n}\n\nlabel.error {\n  display: block;\n  text-align: center;\n  font-size: 1.5em;\n  color: red;\n}\n",""])},function(t,n,e){var r=e(317);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,"canvas {\n  position: fixed;\n  background-color: transparent;\n}\n",""])},function(t,n,e){var r=e(319);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".task-container > h1 {\n  text-align: center;\n  color: #476144;\n}\n\n.task-container_element {\n  padding: 2% 5%;\n  margin: 5px 5px;\n  font-size: 1.5em;\n  color: white;\n  background-color: #96c790;\n  text-align: center;\n  overflow: hidden;\n}\n\n.task-container_element:hover {\n  cursor: pointer;\n}\n\n.task-container_element:active {\n  box-shadow: inset 0 0 10px #005bb1;\n}\n\n.task-container_element:first-child {\n  margin-top: 10px;\n}\n\n.task-container_element:last-child {\n  margin-bottom: 10px;\n}\n",""])},function(t,n,e){var r=e(321);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".modal {\n  position: fixed;\n  z-index: 1;\n  padding-top: 100px;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n/* Modal Content */\n.modal_content {\n  position: relative;\n  background-color: #e3f1fc;\n  margin: auto;\n  padding: 0;\n  border: 1px solid #888;\n  width: 30%;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n}\n",""])},function(t,n,e){var r=e(323);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".task {\n  padding: 5% 10%;\n  font-size: 1.5em;\n  color: gray;\n  border: 0;\n  background-color: #e3f1fc;\n  text-align: center;\n}\n\n.task_input {\n  max-width: 100%;\n  font-size: 1.2em;\n}\n\n.task_submit {\n  margin: 1em auto;\n  display: block;\n  padding: 5% 10%;\n  background-color: #96c790;\n  color: white;\n  border: 0;\n  font-weight: bold;\n  font-size: 1.2em;\n  cursor: pointer;\n}\n",""])},function(t,n,e){var r=e(325);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".task {\n  padding: 5% 10%;\n  font-size: 1.5em;\n  color: gray;\n  border: 0;\n  background-color: #e3f1fc;\n  text-align: center;\n}\n\n.task_input {\n  max-width: 100%;\n  font-size: 1.2em;\n}\n\n.task_submit {\n  margin: 1em auto;\n  display: block;\n  padding: 5% 10%;\n  background-color: #96c790;\n  color: white;\n  border: 0;\n  font-weight: bold;\n  font-size: 1.2em;\n  cursor: pointer;\n}\n",""])},function(t,n,e){var r=e(327);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".task {\n  padding: 3% 15%;\n  font-size: 1.5em;\n  color: gray;\n  border: 0;\n  background-color: #e3f1fc;\n  text-align: center;\n}\n\n.task_input {\n  max-width: 100%;\n  font-size: 1.2em;\n}\n\n.task_play{\n  width: 50px;\n  height: 50px;\n  padding: 0 0;\n  background: #6495ed;\n  border: none;\n  border-radius: 100%;\n  margin: 1em auto;\n  cursor: pointer;\n  font-size: 1.2em;\n  outline: none;\n}\n\n.task_play::after {\n  content: '';\n  display: inline-block;\n  position: relative;\n  top: 1px;\n  left: 3px;\n  border-style: solid;\n  border-width: 10px 0 10px 20px;\n  border-color: transparent transparent transparent white;\n}\n\n.task_play:active {\n  box-shadow: inset 0 0 10px #005bb1;\n}\n\n.task_submit {\n  margin: 1em auto;\n  display: block;\n  padding: 5% 10%;\n  background-color: #96c790;\n  color: white;\n  border: 0;\n  font-weight: bold;\n  font-size: 1.2em;\n  cursor: pointer;\n}\n",""])},function(t,n,e){var r=e(329);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,".letter {\n  display: inline-block;\n  margin: 1% 3%;\n  border: 1px solid black;\n  box-sizing: border-box;\n}\n\n.letter_value {\n  padding: 0 0.5em;\n  cursor: move;\n}\n",""])},function(t,n,e){var r=e(331);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(21)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(20)(!1)).push([t.i,"div.score-container {\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.score-container_title {  \n  display: block;\n  color: white;\n  font-weight: bold;\n  font-size: 3em;\n  text-align: center;\n}\n\ntable {\n  width: 60%;\n  border-collapse: collapse;\n  text-align: center;\n  background-color: rgba(150, 199, 144, 0.5);\n  overflow: hidden;\n}\n\ntable th {\n  padding: 1% 5%;\n  font-weight: bold;\n  color: #073899;\n  background-color: #97ca92;\n}\n\ntable>tbody>tr:hover {\n  background-color: #becaf8;\n}\n\ntable td {\n  position: relative;\n  padding: 1% 5%;\n  color: #666699;\n  border-top: 1px solid #e8edff;\n}\n\ntbody>tr:nth-child(2n + 1) {\n  background-color: #e8edff;\n}\n\nbutton.restart {\n  display: block;\n  margin-top: 1em;\n  padding: 1% 3%;\n  border: 0;\n  background-color: #96c790;\n  color: white;\n  font-weight: bold;\n  font-size: 1.5em;\n  cursor: pointer;\n}\n",""])},function(t,n,e){"use strict";e.r(n);e(137),e(303);var r=e(126),i=e.n(r);function o(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"init",value:function(){document.body.innerHTML=i.a}}],(e=null)&&o(n.prototype,e),r&&o(n,r),t}(),u=e(127),c=e.n(u);e(312);function s(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var f="div.container",l=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"show",value:function(){return document.body.querySelector(f).innerHTML=c.a,document.body.querySelector("button.play").focus(),t.onPlay()}},{key:"hide",value:function(){document.body.querySelector(f).innerHTML=""}},{key:"onPlay",value:function(){return new Promise(function(n){document.body.querySelector("button.play").addEventListener("click",function(){t.hide(),n("start")}),document.body.querySelector("button.score").addEventListener("click",function(){t.hide(),n("score")})})}}],(e=null)&&s(n.prototype,e),r&&s(n,r),t}(),h=e(128),p=e.n(h);e(314);function d(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var v="div.container",y="input#nickname",g="label.error",m="Nickname can not be null or empty",b=13,w=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"show",value:function(){return document.body.querySelector(v).innerHTML=p.a,this.processLogin()}},{key:"hide",value:function(){document.body.querySelector(v).innerHTML=""}},{key:"processLogin",value:function(){var n=this;return t.onPlay().catch(function(){return document.body.querySelector(g).innerHTML=m,n.processLogin()})}},{key:"onPlay",value:function(){var t=document.body.querySelector(y);return t.focus(),new Promise(function(n,e){var r=document.body.querySelector("button");r.addEventListener("click",function(r){r.preventDefault();var i=t.value;i&&n(i),e()}),r.addEventListener("keyup",function(t){t.keyCode===b&&r.click()})})}}],(e=null)&&d(n.prototype,e),r&&d(n,r),t}(),x=e(129),_=e.n(x);e(316);function k(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var S={images:{count:11,indexOfSplash:5,start:1,updateInterval:5,scale:.25,path:"./images/fireball/fireball_",ext:".png"},audio:{path:"./audio/fireball_attack.mp3"},step:5},O=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.ctx=n,this.attack=!1,this.index=S.images.start,this.updateInterval=0,this.images=[],this.audio=new Audio(S.audio.path),this.loadImages()}var n,e,r;return n=t,(e=[{key:"performAttack",value:function(t){return this.attack=!0,this.draw(t)}},{key:"draw",value:function(t){var n=this;return new Promise(function(e){n._play(),n._draw(t,e)})}},{key:"_play",value:function(){this.audio.play()}},{key:"_draw",value:function(t,n){var e=this;if(this.reqId&&cancelAnimationFrame(this.reqId),this.attack){this.point.width>=this.finishPoint.width&&this.index===S.images.count&&(this.index=S.images.start,this.updateInterval=0,this.start=this.startPoint,this.attack=!1,this.audio.pause(),t(),n()),this.index===S.images.indexOfSplash&&this.point.width<this.finishPoint.width&&(this.index=S.images.start),this.point.width>=this.finishPoint.width&&this.index<S.images.indexOfSplash&&(this.index=S.images.indexOfSplash);var r=this.images[this.index],i=r.height*S.images.scale,o=r.width*S.images.scale;this.ctx.drawImage(r,this.point.width,this.point.height,o,i),this.updateInterval===S.images.updateInterval&&(this.index+=1,this.updateInterval=0),this.updateInterval+=1,this.index<S.images.indexOfSplash&&(this.point.width+=S.step)}this.reqId=window.requestAnimationFrame(function(){return e._draw(t,n)})}},{key:"loadImages",value:function(){for(var t=S.images.start;t<=S.images.count;t+=1){var n=new Image;n.src=S.images.path+t+S.images.ext,this.images[t]=n}}},{key:"show",set:function(t){this.attack=t}},{key:"start",set:function(t){this.startPoint=t,this.point=JSON.parse(JSON.stringify(t))}},{key:"finish",set:function(t){this.finishPoint=t}}])&&k(n.prototype,e),r&&k(n,r),t}(),E=e(3);function P(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function A(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){P(o,r,i,a,u,"next",t)}function u(t){P(o,r,i,a,u,"throw",t)}a(void 0)})}}function j(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var I={breath:{intervalStep:1,default:0},death:{period:2}},M=function(){function t(n,e,r){if(function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.name=n,this.cfg=r,this.ctx=e,this.name=n,this.hp=r.hp.value,this.breath={interval:0,current:I.breath.default},this.imagesLoadedCount=0,this.handAngle=0,!(this instanceof t?this.constructor:void 0))throw Error("It is not allowed to create direct instance of AbstractCharacter")}var n,e,r;return n=t,(e=[{key:"draw",value:function(){this.recalculateBreath(),this.drawLegs(),this.drawLeftArm(),this.drawBody(),this.drawRightArm(),this.drawHead(),this.drawHP(),this.drawName(),this._requestAnimationFrame()}},{key:"_requestAnimationFrame",value:function(){this._cancelAnimationFrame(),this.reqId=requestAnimationFrame(this.draw.bind(this))}},{key:"_cancelAnimationFrame",value:function(){this.reqId&&cancelAnimationFrame(this.reqId)}},{key:"attack",value:function(){var t=A(regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",n());case 1:case"end":return t.stop()}},t,this)}));return function(n){return t.apply(this,arguments)}}()},{key:"death",value:function(){var t=A(regeneratorRuntime.mark(function t(){var n=this;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this._cancelAnimationFrame(),this.deathTime=performance.now(),t.abrupt("return",new Promise(function(t){n._death(t)}));case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"_death",value:function(t){var n=this;if(this._getExectionTime(this.deathTime)>I.death.period)t();else{var e=document.body.offsetHeight-this.dead.height-10,r=document.body.offsetWidth*this.cfg.body.ratio.width;this.ctx.drawImage(this.dead,r,e),this._cancelAnimationFrame(),this.reqId=requestAnimationFrame(function(){return n._death(t)})}}},{key:"_getExectionTime",value:function(t){return(performance.now()-t)/1e3}},{key:"recalculateBreath",value:function(){this.breath.interval===this.cfg.breath.interval&&(this.breath.interval=I.breath.default,this.breath.current+=this.cfg.breath.step,(this.breath.current>this.cfg.breath.max||this.breath.current<this.cfg.breath.min)&&(this.cfg.breath.step=-this.cfg.breath.step)),this.breath.interval+=I.breath.intervalStep}},{key:"drawName",value:function(){var t=document.body.offsetHeight*this.cfg.name.position.height,n=document.body.offsetWidth*this.cfg.name.position.width;this.ctx.font=this.cfg.text.style,this.ctx.fillText(this.name,n,t)}},{key:"drawHP",value:function(){var t=document.body.offsetHeight*this.cfg.hp.position.height,n=document.body.offsetWidth*this.cfg.hp.position.width;this.ctx.fillStyle=this.getHpStatusColor(),this.ctx.font=this.cfg.text.style,this.ctx.fillText(this.hp,n,t),this.ctx.save()}},{key:"getHpStatusColor",value:function(){var t=this.cfg.hp.status.NORMAL.color;return this.hp<this.cfg.hp.status.AVERAGE.value&&(t=this.cfg.hp.status.AVERAGE.color),this.hp<this.cfg.hp.status.CRITICAL.value&&(t=this.cfg.hp.status.CRITICAL.color),t}},{key:"health",set:function(t){this.hp>t?this.hp-=t:this.hp=0},get:function(){return this.hp}}])&&j(n.prototype,e),r&&j(n,r),t}();function R(t){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function T(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function L(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function F(t,n){return!n||"object"!==R(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function C(t){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function N(t,n){return(N=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var W={start:{height:.85*window.innerHeight,width:.35*document.body.offsetWidth},finish:{height:.85*window.innerHeight,width:.6*document.body.offsetWidth}},D=function(t){function n(t,e){var r;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(r=F(this,C(n).call(this,e,t,E))).weapon=r.initWeaponComponent(),r.build(),r}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&N(t,n)}(n,M),e=n,r=[{key:"initWeaponComponent",value:function(){var t=new O(this.ctx);return t.start=W.start,t.finish=W.finish,t}},{key:"build",value:function(){this.legs=this.loadCharacterPart(E.legs.image),this.leftArm=this.loadCharacterPart(E.arms.image.left),this.body=this.loadCharacterPart(E.body.image),this.head=this.loadCharacterPart(E.head.image),this.rightArm=this.loadCharacterPart(E.arms.image.right)}},{key:"loadCharacterPart",value:function(t){var e=this,r=new Image;return r.src=n.getPath(t),r.onload=function(){return e.onImageLoaded()},r}},{key:"onImageLoaded",value:function(){this.imagesLoadedCount+=1,this.imagesLoadedCount===E.numberOfParts&&this.draw()}},{key:"attack",value:function(){var t,n=(t=regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.weapon.performAttack(n));case 1:case"end":return t.stop()}},t,this)}),function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){T(o,r,i,a,u,"next",t)}function u(t){T(o,r,i,a,u,"throw",t)}a(void 0)})});return function(t){return n.apply(this,arguments)}}()},{key:"drawHead",value:function(){var t=document.body.offsetHeight*E.head.ratio.height-this.breath.current,n=document.body.offsetWidth*E.head.ratio.width,e=this.head.width/E.scaleRation,r=this.head.height/E.scaleRation;this.ctx.drawImage(this.head,n,t,e,r)}},{key:"drawBody",value:function(){var t=document.body.offsetHeight*E.body.ratio.height,n=document.body.offsetWidth*E.body.ratio.width,e=this.body.width/E.scaleRation,r=this.body.height/E.scaleRation;this.ctx.drawImage(this.body,n,t,e,r)}},{key:"drawLegs",value:function(){var t=document.body.offsetHeight*E.legs.ratio.height,n=document.body.offsetWidth*E.legs.ratio.width,e=this.legs.width/E.scaleRation,r=this.legs.height/E.scaleRation;this.ctx.drawImage(this.legs,n,t,e,r)}},{key:"drawLeftArm",value:function(){var t=document.body.offsetHeight*E.arms.ratio.left.height-this.breath.current,n=document.body.offsetWidth*E.arms.ratio.left.width,e=this.leftArm.width/E.scaleRation,r=this.leftArm.height/E.scaleRation;this.ctx.save(),this.ctx.translate(n,t),this._rotateHand(),this.ctx.drawImage(this.leftArm,0,0,e,r),this.ctx.restore()}},{key:"_rotateHand",value:function(){this.ctx.rotate(this.handAngle*Math.PI/180),this.weapon.attack&&this.handAngle>-this.cfg.arms.attack.angle?this.handAngle-=this.cfg.arms.attack.step:!this.weapon.attack&&this.handAngle<0&&(this.handAngle+=this.cfg.arms.attack.step),0!==this.handAngle&&this.ctx.scale(-1,1)}},{key:"drawRightArm",value:function(){var t=document.body.offsetHeight*E.arms.ratio.right.height-this.breath.current,n=document.body.offsetWidth*E.arms.ratio.right.width,e=this.rightArm.width/E.scaleRation,r=this.rightArm.height/E.scaleRation;this.ctx.drawImage(this.rightArm,n,t,e,r)}}],i=[{key:"getPath",value:function(t){return E.image.path+t+E.image.ext}}],r&&L(e.prototype,r),i&&L(e,i),n}(),q=e(12),U=e(6);function B(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var H={images:{count:5,start:1,scale:1,updateInterval:5,path:"./images/magic/magic_",ext:".png"},audio:{path:"./audio/magic_attack.mp3"},step:5,time:2,numberOfMillisInSecond:1e3},V=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.ctx=n,this.attack=!1,this.index=H.images.start,this.updateInterval=0,this.images=[],this.loadImages(),this.audio=new Audio(H.audio.path)}var n,e,r;return n=t,(e=[{key:"performAttack",value:function(t){return this.attack=!0,this.start=performance.now(),this.draw(t)}},{key:"draw",value:function(t){var n=this;return new Promise(function(e){n._play(),n._draw(t,e)})}},{key:"_play",value:function(){this.audio.play()}},{key:"_draw",value:function(t,n){var e=this;if(this.reqId&&cancelAnimationFrame(this.reqId),this.attack){this._getExectionTime()>=H.time&&(this.index=H.images.start,this.updateInterval=0,this.attack=!1,this.audio.pause(),t(),n()),this.index>H.images.count&&(this.index=H.images.start);var r=this.images[this.index],i=r.height*H.images.scale,o=r.width*H.images.scale;this.ctx.drawImage(r,this.point.width,this.point.height,o,i),this.updateInterval===H.images.updateInterval&&(this.index+=1,this.updateInterval=0),this.updateInterval+=1}this.reqId=window.requestAnimationFrame(function(){return e._draw(t,n)})}},{key:"_getExectionTime",value:function(){return(performance.now()-this.start)/H.numberOfMillisInSecond}},{key:"loadImages",value:function(){for(var t=H.images.start;t<=H.images.count;t+=1){var n=new Image;n.src=H.images.path+t+H.images.ext,this.images[t]=n}}},{key:"show",set:function(t){this.attack=t}},{key:"position",set:function(t){this.point=JSON.parse(JSON.stringify(t))}}])&&B(n.prototype,e),r&&B(n,r),t}();function z(t){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function G(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function K(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function J(t,n){return!n||"object"!==z(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function $(t){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Y(t,n){return(Y=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var X={position:{height:window.innerHeight*U.arms.attack.position.height,width:document.body.offsetWidth*U.arms.attack.position.width}},Z=function(t){function n(t,e){var r;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(r=J(this,$(n).call(this,e,t,U))).weapon=r.initWeaponComponent(),r.build(),r}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&Y(t,n)}(n,M),e=n,r=[{key:"initWeaponComponent",value:function(){var t=new V(this.ctx);return t.position=X.position,t}},{key:"attack",value:function(){var t,n=(t=regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.weapon.performAttack(n));case 1:case"end":return t.stop()}},t,this)}),function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){G(o,r,i,a,u,"next",t)}function u(t){G(o,r,i,a,u,"throw",t)}a(void 0)})});return function(t){return n.apply(this,arguments)}}()},{key:"build",value:function(){this.legs=this.loadRandom(U.legs.image),this.leftArm=this.loadRandom(U.arms.image),this.body=this.loadRandom(U.body.image),this.head=this.loadRandom(U.head.image),this.rightArm=this.loadRandom(U.arms.image),this.dead=this.load(n.getPath(U.death.image,""))}},{key:"loadRandom",value:function(t){return this.load(n.getRandomPath(t))}},{key:"load",value:function(t){var n=this,e=new Image;return e.src=t,e.onload=function(){return n.onImageLoaded()},e}},{key:"onImageLoaded",value:function(){this.imagesLoadedCount+=1,this.imagesLoadedCount===U.numberOfParts&&this.draw()}},{key:"drawHead",value:function(){var t=document.body.offsetHeight*U.head.ratio.height-this.breath.current,n=document.body.offsetWidth*U.head.ratio.width;this.ctx.drawImage(this.head,n,t)}},{key:"drawBody",value:function(){var t=document.body.offsetHeight*U.body.ratio.height,n=document.body.offsetWidth*U.body.ratio.width;this.ctx.drawImage(this.body,n,t)}},{key:"drawLegs",value:function(){var t=document.body.offsetHeight*U.legs.ratio.height,n=document.body.offsetWidth*U.legs.ratio.width;this.ctx.drawImage(this.legs,n,t)}},{key:"drawLeftArm",value:function(){var t=this.leftArm.width-U.arms.position.left.width,n=document.body.offsetHeight*U.arms.ratio.left.height-this.breath.current,e=document.body.offsetWidth*U.arms.ratio.left.width;this.ctx.translate(e+t,n),this._rotateHand(),this.ctx.drawImage(this.leftArm,U.arms.position.left.width,0,t,this.leftArm.height,-t,0,t,this.leftArm.height),this.ctx.restore()}},{key:"_rotateHand",value:function(){this.ctx.rotate(this.handAngle*Math.PI/180),this.weapon.attack&&this.handAngle<this.cfg.arms.attack.angle?this.handAngle+=this.cfg.arms.attack.step:!this.weapon.attack&&this.handAngle>0&&(this.handAngle-=this.cfg.arms.attack.step)}},{key:"drawRightArm",value:function(){var t=document.body.offsetHeight*U.arms.ratio.right.height-this.breath.current,n=document.body.offsetWidth*U.arms.ratio.right.width;this.ctx.drawImage(this.rightArm,0,0,U.arms.position.right.width,this.rightArm.height,n,t,U.arms.position.right.width,this.rightArm.height)}}],i=[{key:"getPath",value:function(t,n){return U.image.path+t+n+U.image.ext}},{key:"getRandomPath",value:function(t){return n.getPath(t,q.a.random(U.numberOfMonsters))}}],r&&K(e.prototype,r),i&&K(e,i),n}(),Q=e(130),tt=e.n(Q),nt=(e(318),e(320),e(131)),et=e.n(nt);function rt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var it="div",ot=".modal_content",at=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,(e=[{key:"show",value:function(){this.container=document.createElement(it),this.container.innerHTML=et.a,document.body.appendChild(this.container),this.modal=this.container.querySelector(ot)}},{key:"clean",value:function(){this.container.remove()}}])&&rt(n.prototype,e),r&&rt(n,r),t}(),ut=e(132),ct=e.n(ut);e(322);function st(t){return(st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ft(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function lt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ht(t,n){return!n||"object"!==st(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function pt(t){return(pt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function dt(t,n){return(dt=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var vt=function(t){function n(){var t;if(function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),t=ht(this,pt(n).call(this)),!(this instanceof n?this.constructor:void 0))throw Error("It is not allowed to create direct instance of  AbstractTaskComponent");return t}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&dt(t,n)}(n,at),e=n,(r=[{key:"execute",value:function(){var t,n=(t=regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.show(),t.next=3,this.process();case 3:return n=t.sent,this.clean(),t.abrupt("return",n);case 6:case"end":return t.stop()}},t,this)}),function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){ft(o,r,i,a,u,"next",t)}function u(t){ft(o,r,i,a,u,"throw",t)}a(void 0)})});return function(){return n.apply(this,arguments)}}()}])&&lt(e.prototype,r),i&&lt(e,i),n}(),yt=e(95);function gt(t){return(gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function mt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function bt(t,n){return!n||"object"!==gt(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function wt(t,n,e){return(wt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=xt(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function xt(t){return(xt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _t(t,n){return(_t=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var kt={description:".task_description",input:".task_input",submit:".task_submit"},St=function(t){function n(){return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),bt(this,xt(n).apply(this,arguments))}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&_t(t,n)}(n,vt),e=n,(r=[{key:"show",value:function(){wt(xt(n.prototype),"show",this).call(this),this.modal.innerHTML=ct.a}},{key:"process",value:function(){var t=this;return new Promise(function(n){var e=yt.a.getRandomTask(),r=t.modal.querySelector(kt.input);t.modal.querySelector(kt.description).innerHTML=e,t.modal.querySelector(kt.submit).addEventListener("click",function(){var t=parseInt(r.value,10);yt.a.isAnswerValid(e,t)&&n(!0),n(!1)})})}}])&&mt(e.prototype,r),i&&mt(e,i),n}(),Ot=e(133),Et=e.n(Ot),Pt=(e(324),e(64));function At(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var jt=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"getRandomTask",value:function(){var t=q.a.random(Pt.dictionary.length);return Pt.dictionary[t].word}},{key:"isAnswerValid",value:function(t,n){var e=q.a.normalizeText(n);return Pt.dictionary.filter(function(n){return n.word===t}).flatMap(function(t){return t.translations}).some(function(t){return t===e})}}],(e=null)&&At(n.prototype,e),r&&At(n,r),t}();function It(t){return(It="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Mt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Rt(t,n){return!n||"object"!==It(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function Tt(t,n,e){return(Tt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=Lt(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function Lt(t){return(Lt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ft(t,n){return(Ft=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var Ct={description:".task_description",input:".task_input",submit:".task_submit"},Nt=function(t){function n(){return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Rt(this,Lt(n).apply(this,arguments))}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&Ft(t,n)}(n,vt),e=n,(r=[{key:"show",value:function(){Tt(Lt(n.prototype),"show",this).call(this),this.modal.innerHTML=Et.a}},{key:"process",value:function(){var t=this;return new Promise(function(n){var e=jt.getRandomTask(),r=t.modal.querySelector(Ct.input);t.modal.querySelector(Ct.description).innerHTML=e,t.modal.querySelector(Ct.submit).addEventListener("click",function(){jt.isAnswerValid(e,r.value)&&n(!0),n(!1)})})}}])&&Mt(e.prototype,r),i&&Mt(e,i),n}(),Wt=e(134),Dt=e.n(Wt),qt=(e(326),e(65));function Ut(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Bt=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"getRandomTask",value:function(){var t=q.a.random(qt.words.length);return qt.words[t]}},{key:"isAnswerValid",value:function(t,n){var e=q.a.normalizeText(n);return t===e&&qt.words.some(function(n){return n===t})}},{key:"pronounce",value:function(t){return new Promise(function(n){var e=new SpeechSynthesisUtterance(q.a.normalizeText(t));e.onend=function(){return n()},window.speechSynthesis.cancel(),window.speechSynthesis.speak(e)})}}],(e=null)&&Ut(n.prototype,e),r&&Ut(n,r),t}();function Ht(t){return(Ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Vt(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function zt(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){Vt(o,r,i,a,u,"next",t)}function u(t){Vt(o,r,i,a,u,"throw",t)}a(void 0)})}}function Gt(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Kt(t,n){return!n||"object"!==Ht(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function Jt(t,n,e){return(Jt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=$t(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function $t(t){return($t=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Yt(t,n){return(Yt=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var Xt={input:".task_input",submit:".task_submit",play:".task_play"},Zt=function(t){function n(){return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Kt(this,$t(n).apply(this,arguments))}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&Yt(t,n)}(n,vt),e=n,(r=[{key:"show",value:function(){Jt($t(n.prototype),"show",this).call(this),this.modal.innerHTML=Dt.a}},{key:"process",value:function(){var t=this;return new Promise(function(n){var e=Bt.getRandomTask(),r=t.modal.querySelector(Xt.input);t.modal.querySelector(Xt.submit).addEventListener("click",function(){Bt.isAnswerValid(e,r.value)&&n(!0),n(!1)}),t.modal.querySelector(Xt.play).addEventListener("click",zt(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",Bt.pronounce(e));case 1:case"end":return t.stop()}},t,this)})))})}}])&&Gt(e.prototype,r),i&&Gt(e,i),n}(),Qt=(e(328),e(135)),tn=e.n(Qt),nn=e(66);function en(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var rn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"getRandomTask",value:function(){var t=nn.words[q.a.random(nn.words.length-1)].trim().split("");return q.a.shuffle(t)}},{key:"isAnswerValid",value:function(t){return-1!==nn.words.indexOf(q.a.normalizeText(t))}}],(e=null)&&en(n.prototype,e),r&&en(n,r),t}();function on(t){return(on="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function an(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function un(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function cn(t,n){return!n||"object"!==on(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function sn(t,n,e){return(sn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=fn(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function fn(t){return(fn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ln(t,n){return(ln=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var hn={container:".letter_container",attribute:{name:"draggable",value:!0},selector:".letter",valueClass:"letter_value",valueSelector:".letter_value"},pn={description:".task_description",submit:".task_submit"},dn=function(t){function n(){var t;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=cn(this,fn(n).call(this))).letters=[],t}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&ln(t,n)}(n,vt),e=n,(r=[{key:"show",value:function(){sn(fn(n.prototype),"show",this).call(this),this.modal.innerHTML=tn.a}},{key:"process",value:function(){var t=this;return new Promise(function(n){t._displayTask(),t._applyListeners(),t.modal.querySelector(pn.submit).addEventListener("click",function(){rn.isAnswerValid(t._buildAnswer())&&n(!0),n(!1)})})}},{key:"clean",value:function(){sn(fn(n.prototype),"clean",this).call(this)}},{key:"_applyListeners",value:function(){var t=this,n=this.modal.querySelector(hn.container);n.addEventListener("dragstart",this._dragStart.bind(this)),n.addEventListener("dragover",this._dragOver.bind(this)),n.addEventListener("dragenter",this._dragEnter.bind(this)),n.querySelectorAll(hn.valueSelector).forEach(function(n){n.addEventListener("drop",t._dragDrop.bind(t))})}},{key:"_dragStart",value:function(t){var n=t.target.closest(hn.valueSelector);n&&(this.index=this._getIndexOfLetter(n),this.tmpArray=an(this.letters))}},{key:"_dragOver",value:function(t){t.target.closest(hn.valueSelector)&&t.preventDefault()}},{key:"_dragEnter",value:function(t){var n=t.target.closest(hn.valueSelector);if(n){t.preventDefault();var e=this._getIndexOfLetter(n);if(e!==this.index){var r=this.tmpArray.slice(0,this.index);r=r.concat(this.tmpArray.slice(this.index+1)),this.tmpArray=[].concat(an(r.slice(0,e)),[this.tmpArray[this.index]],an(r.slice(e))),this.index=e,this._updateValues(this.tmpArray)}}}},{key:"_updateValues",value:function(t){this.modal.querySelectorAll(hn.valueSelector).forEach(function(n,e){n.innerHTML=t[e]})}},{key:"_dragDrop",value:function(t){t.target.closest(hn.valueSelector)&&(this.letters=this.tmpArray)}},{key:"_getIndexOfLetter",value:function(t){var n=-1;return this.modal.querySelectorAll(hn.valueSelector).forEach(function(e,r){e===t&&(n=r)}),n}},{key:"_displayTask",value:function(){var t=this,n=document.createDocumentFragment();this.letters=rn.getRandomTask(),this.letters.forEach(function(e){var r=t._buildLetterElement(e);n.append(r)}),this.modal.querySelector(hn.container).append(n)}},{key:"_buildLetterElement",value:function(t){var n=this._buildElementWithClasses("span",hn.valueClass);n.innerHTML=t,n.setAttribute(hn.attribute.name,hn.attribute.value);var e=this._buildElementWithClasses("div","letter");return e.append(n),e}},{key:"_buildElementWithClasses",value:function(t){for(var n=document.createElement(t),e=arguments.length,r=new Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];return r&&0!==r.length&&n.classList.add(r),n}},{key:"_buildAnswer",value:function(){for(var t=this.modal.querySelector(hn.container).querySelectorAll(hn.selector),n="",e=0;e<t.length;e+=1)n+=t[e].textContent;return n}}])&&un(e.prototype,r),i&&un(e,i),n}();function vn(t){return(vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function yn(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function gn(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function mn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function bn(t,n){return!n||"object"!==vn(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function wn(t,n,e){return(wn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var r=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=xn(t)););return t}(t,n);if(r){var i=Object.getOwnPropertyDescriptor(r,n);return i.get?i.get.call(e):i.value}})(t,n,e||t)}function xn(t){return(xn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _n(t,n){return(_n=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}var kn=".task-container_element",Sn="id",On=function(t){function n(){var t;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=bn(this,xn(n).call(this))).tasks=t.initTasks(),t}var e,r,i;return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&_n(t,n)}(n,at),e=n,(r=[{key:"initTasks",value:function(){return{math:St,translation:Nt,audition:Zt,word:dn}}},{key:"choseComponent",value:function(){var t,e=(t=regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return wn(xn(n.prototype),"show",this).call(this),this.modal.innerHTML=tt.a,t.abrupt("return",this.initActions());case 3:case"end":return t.stop()}},t,this)}),function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){gn(o,r,i,a,u,"next",t)}function u(t){gn(o,r,i,a,u,"throw",t)}a(void 0)})});return function(){return e.apply(this,arguments)}}()},{key:"initActions",value:function(){var t=this;return new Promise(function(n){t.modal.addEventListener("click",function(e){var r=e.target.closest(kn).getAttribute(Sn),i=t.getInstanceOfTask(r);i&&(t.clean(),n(i))})})}},{key:"getInstanceOfTask",value:function(t){var n=this.tasks[t];n||(n=yn(this.tasks,1)[0]);return Object.create(n.prototype)}}])&&mn(e.prototype,r),i&&mn(e,i),n}();function En(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Pn={width:.1,height:.1},An={prefix:"Level: ",style:"48px serif"},jn=function(){function t(n,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.ctx=n,this.session=e}var n,e,r;return n=t,(e=[{key:"draw",value:function(){this._drawLevel(),this._requestAnimationFrame()}},{key:"_drawLevel",value:function(){var t=document.body.offsetHeight*Pn.height,n=document.body.offsetWidth*Pn.width;this.ctx.save(),this.ctx.font=An.style,this.ctx.fillText(An.prefix+this.session.level,n,t),this.ctx.restore()}},{key:"_requestAnimationFrame",value:function(){this._cancelAnimationFrame(),this.reqId=requestAnimationFrame(this.draw.bind(this))}},{key:"_cancelAnimationFrame",value:function(){this.reqId&&cancelAnimationFrame(this.reqId)}}])&&En(n.prototype,e),r&&En(n,r),t}(),In=e(67);function Mn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Rn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"build",value:function(){var n=t.getRandomValue(In.firstName),e=t.getRandomValue(In.lastName),r=t.getRandomValue(In.middleName);return"".concat(n," ").concat(e," ").concat(r)}},{key:"getRandomValue",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(e=null)&&Mn(n.prototype,e),r&&Mn(n,r),t}();function Tn(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function Ln(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){Tn(o,r,i,a,u,"next",t)}function u(t){Tn(o,r,i,a,u,"throw",t)}a(void 0)})}}function Fn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Cn="div.container",Nn="canvas",Wn=50,Dn=0,qn=0,Un=1,Bn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,e=[{key:"init",value:function(){t.initTemplate(),this.canvas=document.querySelector("canvas"),this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.taskChooser=new On,this.refreshScreen()}},{key:"start",value:function(){var t=Ln(regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.session=n,this.session.level=qn,this.init(),this.initPerson(),this.initMonster(),this.initLevelInfo(),t.abrupt("return",this.getFightResult());case 7:case"end":return t.stop()}},t,this)}));return function(n){return t.apply(this,arguments)}}()},{key:"nextLevel",value:function(){var t=Ln(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.monster.death();case 2:this.session.level+=Un,this.initMonster(this.session);case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"initPerson",value:function(){this.person=new D(this.ctx,this.session.nickName)}},{key:"initMonster",value:function(){this.monster=new Z(this.ctx,Rn.build())}},{key:"initLevelInfo",value:function(){this.levelInfo=new jn(this.ctx,this.session).draw()}},{key:"refreshScreen",value:function(){var t=this;this.canvas.width=this.canvas.width,window.requestAnimationFrame(function(){return t.refreshScreen()})}},{key:"getFightResult",value:function(){var t=Ln(regeneratorRuntime.mark(function t(){var n=this;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.taskChooser.choseComponent().then(function(t){return t.execute()}).then(function(t){return t?n.person.attack(function(){n.monster.health=Wn}):n.monster.attack(function(){n.person.health=Wn})}).then(Ln(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n.monster.health!==Dn){t.next=3;break}return t.next=3,n.nextLevel();case 3:if(n.person.health!==Dn){t.next=5;break}return t.abrupt("return",n._buildResult());case 5:return t.abrupt("return",n.getFightResult());case 6:case"end":return t.stop()}},t,this)}))));case 1:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"_buildResult",value:function(){return this.session}}],r=[{key:"initTemplate",value:function(){document.body.querySelector(Cn).innerHTML=_.a;var t=document.body.querySelector(Nn);t.setAttribute("width",document.body.offsetWidth),t.setAttribute("height",document.body.offsetHeight)}}],e&&Fn(n.prototype,e),r&&Fn(n,r),t}(),Hn=e(136),Vn=e.n(Hn);e(330);function zn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Gn="rss-game-score-storage",Kn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,(e=[{key:"store",value:function(t){if(t){var n=this.load();n.push({name:t.nickName,level:t.level}),this._save(n)}}},{key:"load",value:function(){var t=localStorage.getItem(Gn);return t?JSON.parse(t):this._save([])}},{key:"_save",value:function(t){return localStorage.setItem(Gn,JSON.stringify(t)),t}}])&&zn(n.prototype,e),r&&zn(n,r),t}();function Jn(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var $n="div.container",Yn="div.score-container table>tbody",Xn="start",Zn=13,Qn=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.storage=new Kn}var n,e,r;return n=t,(e=[{key:"storeResult",value:function(t){this.storage.store(t)}},{key:"show",value:function(){return document.body.querySelector($n).innerHTML=Vn.a,this._drawScores(),this._initEventListeners()}},{key:"hide",value:function(){document.body.querySelector($n).innerHTML=null}},{key:"_initEventListeners",value:function(){return new Promise(function(t){var n=document.body.querySelector("button");n.focus(),n.addEventListener("click",function(){return t(Xn)}),n.addEventListener("keyup",function(n){n.keyCode===Zn&&t(Xn)})})}},{key:"_drawScores",value:function(){var t=this,n=document.createDocumentFragment();this.storage.load().sort(function(t,n){return n.level-t.level}).slice(0,10).forEach(function(e){var r=t._createElementWithClass("tr"),i=t._createElementWithClass("td");i.innerHTML=e.name;var o=t._createElementWithClass("td");o.innerHTML=e.level,r.append(i,o),n.append(r)}),document.body.querySelector(Yn).append(n)}},{key:"_createElementWithClass",value:function(t){for(var n=document.createElement(t),e=arguments.length,r=new Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];return r.forEach(function(t){return n.classList.append(t)}),n}}])&&Jn(n.prototype,e),r&&Jn(n,r),t}();function te(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function ne(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){te(o,r,i,a,u,"next",t)}function u(t){te(o,r,i,a,u,"throw",t)}a(void 0)})}}var ee={start:w,score:Qn};function re(t){return ie.apply(this,arguments)}function ie(){return(ie=ne(regeneratorRuntime.mark(function t(n){var e,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(ee[n]!==w){t.next=8;break}return t.next=3,w.show();case 3:return e=t.sent,t.next=6,(new Bn).start({nickName:e});case 6:r=t.sent,(new Qn).storeResult(r);case 8:return t.t0=re,t.next=11,(new Qn).show();case 11:t.t1=t.sent,(0,t.t0)(t.t1);case 13:case"end":return t.stop()}},t,this)}))).apply(this,arguments)}(function(){var t=ne(regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return a.init(),t.next=3,l.show();case 3:return n=t.sent,t.abrupt("return",re(n));case 5:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}})()()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL3V0aWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvbWF0aC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbml0L2luZGV4LnRlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmVlbnMvaG9tZS9pbmRleC50ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9zY3JlZW5zL2xvZ2luL2luZGV4LnRlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmVlbnMvYmF0dGxlL2luZGV4LnRlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdGFza0Nob29zZXIvaW5kZXgudGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbC9pbmRleC50ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Rhc2tzL21hdGgvaW5kZXgudGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90YXNrcy90cmFuc2xhdGUvaW5kZXgudGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90YXNrcy9hdWRpdGlvbi9pbmRleC50ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Rhc2tzL3dvcmRzL2luZGV4LnRlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmVlbnMvc2NvcmUvaW5kZXgudGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2VzNi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy9wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvd2ViL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbml0L2luZGV4LmNzcz85ZTEzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2luaXQvaW5kZXguY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS91cmwtZXNjYXBlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2luaXQvaW1hZ2VzL2JhY2tncm91bmQucG5nIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmVlbnMvaG9tZS9pbWFnZXMvYXR0YWNrLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9ob21lL2ltYWdlcy9tb25zdGVyLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9ob21lL2ltYWdlcy9tb25zdGVyLWF0dGFjay5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmVlbnMvaG9tZS9pbWFnZXMvcmlwLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9ob21lL2luZGV4LmNzcz8yZGQzIiwid2VicGFjazovLy8uL3NyYy9zY3JlZW5zL2hvbWUvaW5kZXguY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3JlZW5zL2xvZ2luL2luZGV4LmNzcz9kNjVjIiwid2VicGFjazovLy8uL3NyYy9zY3JlZW5zL2xvZ2luL2luZGV4LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9iYXR0bGUvaW5kZXguY3NzP2RiNjEiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmVlbnMvYmF0dGxlL2luZGV4LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90YXNrQ2hvb3Nlci9pbmRleC5jc3M/Mzc3YyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90YXNrQ2hvb3Nlci9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbW9kYWwvaW5kZXguY3NzP2U2ODgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbW9kYWwvaW5kZXguY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Rhc2tzL21hdGgvaW5kZXguY3NzPzZhNDciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdGFza3MvbWF0aC9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdGFza3MvdHJhbnNsYXRlL2luZGV4LmNzcz81NTYyIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Rhc2tzL3RyYW5zbGF0ZS9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdGFza3MvYXVkaXRpb24vaW5kZXguY3NzPzgxZGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdGFza3MvYXVkaXRpb24vaW5kZXguY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Rhc2tzL3dvcmRzL2luZGV4LmNzcz84YWVkIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Rhc2tzL3dvcmRzL2luZGV4LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9zY29yZS9pbmRleC5jc3M/ZTc0MCIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9zY29yZS9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW5pdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9ob21lL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JlZW5zL2xvZ2luL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ZpcmViYWxsL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NoYXJhY3Rlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wZXJzb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWFnaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbW9uc3Rlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90YXNrcy9iYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Rhc2tzL21hdGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL3RyYW5zbGF0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Rhc2tzL3RyYW5zbGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvc3BlZWNoL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Rhc2tzL2F1ZGl0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy93b3Jkcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90YXNrcy93b3Jkcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90YXNrQ2hvb3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sZXZlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9iYXR0bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL3Njb3JlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JlZW5zL3Njb3JlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJleGVjIiwiZSIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiYSIsInZlcnNpb24iLCJfX2UiLCJVdGlscyIsIm1heCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZsb29yIiwicmFuZG9tIiwid29yZCIsInRvTG93ZXJDYXNlIiwidHJpbSIsImFycmF5IiwidG1wQXJyYXkiLCJqIiwiX3JlZiIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsInRoaXMiLCJkZWZpbmVkIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIk5BTUUiLCJ0ZXN0IiwiY3JlYXRlRGVzYyIsIklPYmplY3QiLCJtZXRob2QiLCJhcmciLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNvbmNhdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImlkIiwicHVzaCIsImZuIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImFwcGx5IiwiZ2V0RWxlbWVudCIsInBhcmVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwib3B0aW9ucyIsImRvbVN0eWxlIiwicmVmcyIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJpbnNlcnRJbnRvIiwiRXJyb3IiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwibm9uY2UiLCJuYyIsImdldE5vbmNlIiwiYWRkQXR0cnMiLCJlbCIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicmVzdWx0IiwidHJhbnNmb3JtIiwiZGVmYXVsdCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiY2VpbCIsImlzTmFOIiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIktFWSIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsInRoYXQiLCJyZXMiLCJhRnVuY3Rpb24iLCJiIiwic2xpY2UiLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnZXRQcm90b3R5cGVPZiIsImdPUE4iLCJnZXRJdGVyRm4iLCJ3a3MiLCJjcmVhdGVBcnJheU1ldGhvZCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsIkl0ZXJhdG9ycyIsIiRpdGVyRGV0ZWN0Iiwic2V0U3BlY2llcyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJBcnJheVByb3RvIiwiQXJyYXkiLCIkQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIkRhdGFWaWV3IiwiYXJyYXlGb3JFYWNoIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVNvbWUiLCJhcnJheUV2ZXJ5IiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlJbmRleE9mIiwiYXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJlbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiYnVmZmVyIiwiRk9SQ0VEX1NFVCIsInNldCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJ2YWxpZGF0ZSIsIkMiLCJzcGVjaWVzRnJvbUxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJyZXZlcnNlIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCJlbmQiLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiQllURVNfUEVSX0VMRU1FTlQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwic3JjIiwibGVuIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJjb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImRhdGEiLCJ2Iiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJ2YWx1ZU9mIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiYml0bWFwIiwicHgiLCIka2V5cyIsImVudW1CdWdLZXlzIiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImRpc3BsYXkiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk9iamVjdFByb3RvIiwiZGVmIiwic3RhdCIsIlVOU0NPUEFCTEVTIiwiREVTQ1JJUFRPUlMiLCJTUEVDSUVTIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsIl90IiwiY29mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwiRCIsIklTX0lOQ0xVREVTIiwiZnJvbUluZGV4IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImFyciIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiYnVpbHRpbkV4ZWMiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJyZSIsImdyb3VwcyIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJzdHIiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJmbiIsInJ4Zm4iLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZm9yT2YiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsImlzIiwiY29weXJpZ2h0Iiwic2hhcmVkIiwiaXNBcnJheSIsImRvY3VtZW50RWxlbWVudCIsImNoZWNrIiwic2V0UHJvdG90eXBlT2YiLCJidWdneSIsIl9fcHJvdG9fXyIsImNvdW50IiwiSW5maW5pdHkiLCJzaWduIiwieCIsIiRleHBtMSIsImV4cG0xIiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiaXNSZWdFeHAiLCJzZWFyY2hTdHJpbmciLCJNQVRDSCIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwiZW5kUG9zIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsIk5QQ0dfSU5DTFVERUQiLCJsYXN0SW5kZXgiLCJyZUNvcHkiLCJtYXRjaCIsImF0IiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImludm9rZSIsImh0bWwiLCJjZWwiLCJwcm9jZXNzIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJhcmdzIiwibmV4dFRpY2siLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInNldFRpbWVvdXQiLCJQUk9UT1RZUEUiLCJXUk9OR19JTkRFWCIsIkJhc2VCdWZmZXIiLCJhYnMiLCJwb3ciLCJsb2ciLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJNYXRoU2VydmljZSIsImZpcnN0T3BlcmFuZCIsImdldE9wZXJhbmQiLCJzZWNvbmRPcGVyYW5kIiwib3BlcmF0aW9uIiwiY29uZmlnIiwib3BlcmF0b3JzIiwidGFzayIsImFuc3dlciIsImV2YWwiLCJ3a3NFeHQiLCIkU3ltYm9sIiwibmFtZXMiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJLIiwiayIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJ5IiwiZmFjdG9yaWVzIiwicGFydEFyZ3MiLCJib3VuZCIsImNvbnN0cnVjdCIsInVuIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCIkdHJpbSIsIndzIiwiaGV4IiwicmFkaXgiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJtc2ciLCJpc0Zpbml0ZSIsImxvZzFwIiwiZGVzY3JpcHRvciIsInJldCIsImlzUmlnaHQiLCJ0byIsImluYyIsImZvcmNlZCIsImZsYWdzIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImlzTm9kZSIsImVtcHR5IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJVU0VfTkFUSVZFIiwicHJvbWlzZSIsInJlc29sdmUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsInRoZW4iLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwicmVqZWN0IiwiZG9tYWluIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwiY29uc29sZSIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiZXJyb3IiLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJlcnIiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXRjaCIsIlByb21pc2UiLCJjYXBhYmlsaXR5IiwiJCRyZWplY3QiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwicHJvbWlzZUNhcGFiaWxpdHkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2YiLCJfbCIsImRlbGV0ZSIsInByZXYiLCIkaGFzIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJ1ZnN0b3JlIiwibnVtYmVyIiwiUmVmbGVjdCIsIm93bktleXMiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwiX2JhYmVsUG9seWZpbGwiLCJ3YXJuIiwiZyIsIiRmYWlscyIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJzeW1ib2xzIiwiJGdldFByb3RvdHlwZU9mIiwiJGZyZWV6ZSIsIiRzZWFsIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRnJvemVuIiwiJGlzU2VhbGVkIiwiJGlzRXh0ZW5zaWJsZSIsIkZQcm90byIsIm5hbWVSRSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZmlyc3QiLCJjb2RlIiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiRVBTSUxPTiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIk51bWJlciIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJmcm91bmQiLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiJGFicyIsIiRzaWduIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJjb2xvciIsInNpemUiLCJ1cmwiLCJEYXRlIiwiZ2V0VGltZSIsInRvSlNPTiIsInRvSVNPU3RyaW5nIiwicHYiLCIkdG9JU09TdHJpbmciLCJseiIsIm51bSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIkRhdGVQcm90byIsImhpbnQiLCJjcmVhdGVQcm9wZXJ0eSIsInVwVG8iLCJjbG9uZWQiLCIkc29ydCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwib3JpZ2luYWwiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiZGVmaW5lIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsImNoIiwiY2FwdHVyZSIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiJG1pbiIsIiRwdXNoIiwiU1VQUE9SVFNfWSIsIlNQTElUIiwiJHNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJsYXN0IiwiZmx1c2giLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwic3Ryb25nIiwiYWRkIiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsInRtcCIsIiRXZWFrTWFwIiwiZnJlZXplIiwiJGlzVmlldyIsImlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJpbml0IiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJyZWNlaXZlciIsImdldFByb3RvIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsInBhZFN0YXJ0IiwiJHBhZCIsInBhZEVuZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwb3AiLCJDb250ZXh0IiwicmVzZXQiLCJza2lwVGVtcFJlc2V0Iiwic2VudCIsIl9zZW50IiwiZGVsZWdhdGUiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInN0b3AiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJzdGF0ZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInVud3JhcHBlZCIsInJldHVybiIsImluZm8iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJobXIiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX1VSTF9fXzBfX18iLCJ1cmxFc2NhcGUiLCJuZWVkUXVvdGVzIiwibG9jYXRpb24iLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIiwiSW5pdCIsImJvZHkiLCJpbm5lckhUTUwiLCJ0ZW1wbGF0ZSIsIkNPTlNUQU5UUyIsIkhvbWUiLCJmb2N1cyIsIm9uUGxheSIsIkxvZ2luIiwicHJvY2Vzc0xvZ2luIiwiX3RoaXMiLCJpbnB1dCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0Iiwibmlja05hbWUiLCJrZXlDb2RlIiwiY2xpY2siLCJDT05GSUciLCJpbWFnZXMiLCJpbmRleE9mU3BsYXNoIiwidXBkYXRlSW50ZXJ2YWwiLCJzY2FsZSIsInBhdGgiLCJleHQiLCJhdWRpbyIsIkZpcmViYWxsIiwiZmlyZWJhbGxfY2xhc3NDYWxsQ2hlY2siLCJhdHRhY2siLCJBdWRpbyIsImxvYWRJbWFnZXMiLCJjYWxsYmFjayIsImRyYXciLCJfcGxheSIsIl9kcmF3IiwicGxheSIsIl90aGlzMiIsInJlcUlkIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3aWR0aCIsImZpbmlzaFBvaW50Iiwic3RhcnRQb2ludCIsInBhdXNlIiwiaW1nIiwiaGVpZ2h0IiwiZHJhd0ltYWdlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW1hZ2UiLCJJbWFnZSIsInBhcnNlIiwiQ09OU1QiLCJicmVhdGgiLCJpbnRlcnZhbFN0ZXAiLCJkZWF0aCIsInBlcmlvZCIsIkFic3RyYWN0Q2hhcmFjdGVyIiwiY2ZnIiwiY2hhcmFjdGVyX2NsYXNzQ2FsbENoZWNrIiwiaHAiLCJpbnRlcnZhbCIsImN1cnJlbnQiLCJpbWFnZXNMb2FkZWRDb3VudCIsImhhbmRBbmdsZSIsInJlY2FsY3VsYXRlQnJlYXRoIiwiZHJhd0xlZ3MiLCJkcmF3TGVmdEFybSIsImRyYXdCb2R5IiwiZHJhd1JpZ2h0QXJtIiwiZHJhd0hlYWQiLCJkcmF3SFAiLCJkcmF3TmFtZSIsIl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJkZWF0aFRpbWUiLCJwZXJmb3JtYW5jZSIsIl9kZWF0aCIsIl9nZXRFeGVjdGlvblRpbWUiLCJoZWlnaHRQb3NpdGlvbiIsIm9mZnNldEhlaWdodCIsImRlYWQiLCJ3aWR0aFBvc2l0aW9uIiwib2Zmc2V0V2lkdGgiLCJyYXRpbyIsImZvbnQiLCJ0ZXh0IiwiZmlsbFRleHQiLCJmaWxsU3R5bGUiLCJnZXRIcFN0YXR1c0NvbG9yIiwic2F2ZSIsInN0YXR1cyIsIk5PUk1BTCIsIkFWRVJBR0UiLCJDUklUSUNBTCIsImlubmVySGVpZ2h0IiwiUGVyc29uQ29tcG9uZW50IiwiY2FudmFzQ29udGV4dCIsInBlcnNvbl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2dldFByb3RvdHlwZU9mIiwid2VhcG9uIiwiaW5pdFdlYXBvbkNvbXBvbmVudCIsImJ1aWxkIiwibGVncyIsImxvYWRDaGFyYWN0ZXJQYXJ0IiwibGVmdEFybSIsImFybXMiLCJyaWdodEFybSIsInJpZ2h0IiwiZ2V0UGF0aCIsIm9ubG9hZCIsIm9uSW1hZ2VMb2FkZWQiLCJudW1iZXJPZlBhcnRzIiwicGVyZm9ybUF0dGFjayIsIndpZHRoU2l6ZSIsInNjYWxlUmF0aW9uIiwiaGVpZ2h0U2l6ZSIsInRyYW5zbGF0ZSIsIl9yb3RhdGVIYW5kIiwicmVzdG9yZSIsInJvdGF0ZSIsIlBJIiwiYW5nbGUiLCJudW1iZXJPZk1pbGxpc0luU2Vjb25kIiwiTWFnaWMiLCJtYWdpY19jbGFzc0NhbGxDaGVjayIsIk1vbnN0ZXJDb21wb25lbnQiLCJtb25zdGVyX2NsYXNzQ2FsbENoZWNrIiwibW9uc3Rlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwibW9uc3Rlcl9nZXRQcm90b3R5cGVPZiIsImxvYWRSYW5kb20iLCJsb2FkIiwiZ2V0UmFuZG9tUGF0aCIsImFybVdpZHRoIiwibnVtYmVyT2ZNb25zdGVycyIsIk1vZGFsV2luZG93Q29tcG9uZW50IiwiY29udGFpbmVyIiwibW9kYWwiLCJBYnN0cmFjdFRhc2tDb21wb25lbnQiLCJiYXNlX2NsYXNzQ2FsbENoZWNrIiwiYmFzZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiYmFzZV9nZXRQcm90b3R5cGVPZiIsInNob3ciLCJjbGVhbiIsImRlc2NyaXB0aW9uIiwic3VibWl0IiwiTWF0aFRhc2tDb21wb25lbnQiLCJBYnN0cmFjdFRhc2siLCJfZ2V0IiwibWF0aF9nZXRQcm90b3R5cGVPZiIsInJlc29sZXZlIiwiZ2V0UmFuZG9tVGFzayIsImlzQW5zd2VyVmFsaWQiLCJUcmFuc2xhdGlvblNlcnZpY2UiLCJ0YXNrSW5kZXgiLCJkaWN0aW9uYXJ5IiwiZXhwZWN0ZWQiLCJub3JtYWxpemVUZXh0IiwiZmxhdE1hcCIsInRyYW5zbGF0aW9ucyIsIlRyYW5sc2F0aW9uVGFza0NvbXBvbmVudCIsInRyYW5zbGF0ZV9nZXQiLCJ0cmFuc2xhdGVfZ2V0UHJvdG90eXBlT2YiLCJTcGVlY2hTZXJ2aWNlIiwid29yZHMiLCJ1dHRlcmFuY2UiLCJTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJvbmVuZCIsInNwZWVjaFN5bnRoZXNpcyIsImNhbmNlbCIsInNwZWFrIiwiQXVkaXRpb25UYXNrQ29tcG9uZW50IiwiYXVkaXRpb25fZ2V0IiwiYXVkaXRpb25fZ2V0UHJvdG90eXBlT2YiLCJhdWRpdGlvbl9hc3luY1RvR2VuZXJhdG9yIiwiX2NhbGxlZSIsIl9jb250ZXh0IiwicHJvbm91bmNlIiwiV29yZFNlcnZpY2UiLCJsZXR0ZXJBcnJheSIsInNodWZmbGUiLCJzZWxlY3RvciIsInZhbHVlQ2xhc3MiLCJ2YWx1ZVNlbGVjdG9yIiwiV29yZFRhc2tDb21wb25lbnQiLCJ0YXNrc193b3Jkc19jbGFzc0NhbGxDaGVjayIsIndvcmRzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJ3b3Jkc19nZXRQcm90b3R5cGVPZiIsImxldHRlcnMiLCJ3b3Jkc19nZXQiLCJfZGlzcGxheVRhc2siLCJfYXBwbHlMaXN0ZW5lcnMiLCJfYnVpbGRBbnN3ZXIiLCJfdGhpczMiLCJfZHJhZ1N0YXJ0IiwiX2RyYWdPdmVyIiwiX2RyYWdFbnRlciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZXR0ZXIiLCJfZHJhZ0Ryb3AiLCJjbG9zZXN0IiwiX2dldEluZGV4T2ZMZXR0ZXIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJjdXJyZW50RWxlbWVudEluZGV4Iiwib3RoZXIiLCJfdXBkYXRlVmFsdWVzIiwiZWxlbWVudCIsInJlc3VsdEluZGV4IiwiX3RoaXM0IiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwibGV0dGVyRWxlbWVudCIsIl9idWlsZExldHRlckVsZW1lbnQiLCJhcHBlbmQiLCJfYnVpbGRFbGVtZW50V2l0aENsYXNzZXMiLCJsZXR0ZXJDb250YWluZXIiLCJfbGVuIiwiY2xhc3NlcyIsIl9rZXkiLCJjbGFzc0xpc3QiLCJ0ZXh0Q29udGVudCIsIlRhc2tDaG9vc2VyQ29tcG9uZW50IiwidGFza0Nob29zZXJfY2xhc3NDYWxsQ2hlY2siLCJ0YXNrQ2hvb3Nlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwidGFza0Nob29zZXJfZ2V0UHJvdG90eXBlT2YiLCJ0YXNrcyIsImluaXRUYXNrcyIsIm1hdGgiLCJ0cmFuc2xhdGlvbiIsImF1ZGl0aW9uIiwiV29yZHNUYXNrQ29tcG9uZW50IiwidGFza0Nob29zZXJfZ2V0IiwiaW5pdEFjdGlvbnMiLCJ0YXNrTmFtZSIsImdldEF0dHJpYnV0ZSIsImdldEluc3RhbmNlT2ZUYXNrIiwiX3NsaWNlZFRvQXJyYXkiLCJwcmVmaXgiLCJMZXZlbEluZm9Db21wb25lbnQiLCJzZXNzaW9uIiwibGV2ZWxfY2xhc3NDYWxsQ2hlY2siLCJfZHJhd0xldmVsIiwibGV2ZWwiLCJSYW5kb21OYW1lR2VuZXJhdG9yIiwiZmlyc3ROYW1lIiwiZ2V0UmFuZG9tVmFsdWUiLCJuYW1lQ29uZmlnIiwibGFzdE5hbWUiLCJtaWRkbGVOYW1lIiwiQmF0dGxlIiwiaW5pdFRlbXBsYXRlIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsInRhc2tDaG9vc2VyIiwicmVmcmVzaFNjcmVlbiIsImluaXRQZXJzb24iLCJpbml0TW9uc3RlciIsImluaXRMZXZlbEluZm8iLCJnZXRGaWdodFJlc3VsdCIsIm1vbnN0ZXIiLCJwZXJzb24iLCJsZXZlbEluZm8iLCJjaG9zZUNvbXBvbmVudCIsImV4ZWN1dGUiLCJpc0NvcnJlY3RBbnN3ZXIiLCJoZWFsdGgiLCJiYXR0bGVfYXN5bmNUb0dlbmVyYXRvciIsIl9jYWxsZWUzIiwiX2NvbnRleHQzIiwibmV4dExldmVsIiwiX2J1aWxkUmVzdWx0IiwiU2NvcmVTZXJ2aWNlIiwic2NvcmVzIiwiX3NhdmUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsIlNjb3JlQm9hcmQiLCJzY3JlZW5zX3Njb3JlX2NsYXNzQ2FsbENoZWNrIiwic3RvcmFnZSIsIl9kcmF3U2NvcmVzIiwiX2luaXRFdmVudExpc3RlbmVycyIsInNjb3JlIiwiX2NyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MiLCJ0YWdOYW1lIiwiY2xhc3NUb0FkZCIsInByb2Nlc3NBY3Rpb24iLCJfY2FsbGVlMiIsImFjdGlvbiIsIl9jb250ZXh0MiIsInN0b3JlUmVzdWx0IiwidDAiLCJ0MSIsImFwcF9hc3luY1RvR2VuZXJhdG9yIiwiYXBwIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMs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QSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtB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bzZCLG1CQUFBclQsS0FBQSxTQUFBK3FCLEdBQUEsY0FBQUEsRUFBQXJ0QixLQUFBcXRCLEVBQUF6b0MsTUFBQSxVQUNNMDNCLEdBQU84USxLQUFZdlIsRUFEekIsQ0FBQXdSLEVBQUF6b0MsS0FBQSxlQUFBeW9DLEVBQUF6b0MsS0FBQSxFQUUyQmkzQixFQUFNb0ksT0FGakMsY0FFVTlILEVBRlZrUixFQUFBOVYsS0FBQThWLEVBQUF6b0MsS0FBQSxHQUd5QixJQUFJZ21DLElBQVN6bEMsTUFBTSxDQUN0Q2czQixhQUpOLE9BR1U1Z0MsRUFIVjh4QyxFQUFBOVYsTUFNSSxJQUFJa1YsSUFBYWEsWUFBWS94QyxHQU5qQyxjQUFBOHhDLEVBQUFFLEdBUUVMLEdBUkZHLEVBQUF6b0MsS0FBQSxJQVFzQixJQUFJNm5DLElBQWF4SSxPQVJ2QyxRQUFBb0osRUFBQUcsR0FBQUgsRUFBQTlWLE1BQUEsRUFBQThWLEVBQUFFLElBQUFGLEVBQUFHLElBQUEseUJBQUFILEVBQUF6VixTQUFBdVYsRUFBQWw0QyxpQ0FXUyxlQUFBWixFQUFBbzVDLEdBQUE5WCxtQkFBQWUsS0FBRyxTQUFBd1AsSUFBQSxJQUFBa0gsRUFBQSxPQUFBelgsbUJBQUFyVCxLQUFBLFNBQUE2akIsR0FBQSxjQUFBQSxFQUFBbm1CLEtBQUFtbUIsRUFBQXZoQyxNQUFBLGNBQ1Z5MkIsRUFBSzVLLE9BREswVixFQUFBdmhDLEtBQUEsRUFFVzgyQixFQUFLdUksT0FGaEIsY0FFSm1KLEVBRklqSCxFQUFBNU8sS0FBQTRPLEVBQUF4TixPQUFBLFNBR0h1VSxHQUFjRSxJQUhYLHdCQUFBakgsRUFBQXZPLFNBQUFzTyxFQUFBanhDLFNBQUgseUJBQUFaLEVBQUEwRCxNQUFBOUMsS0FBQXRCLGFBQUEsRUFNVCs1QyIsImZpbGUiOiJtYWluLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzMzIpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJjb25zdCBFTVBUWV9URVhUID0gJyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWxzIHtcbiAgc3RhdGljIHJhbmRvbShtYXggPSAwLCBtaW4gPSAwKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCkgKyBtaW47XG4gIH1cblxuICBzdGF0aWMgbm9ybWFsaXplVGV4dCh3b3JkKSB7XG4gICAgcmV0dXJuIHdvcmQgPyB3b3JkLnRvTG93ZXJDYXNlKCkudHJpbSgpIDogRU1QVFlfVEVYVDtcbiAgfVxuXG4gIHN0YXRpYyBzaHVmZmxlKGFycmF5KSB7XG4gICAgY29uc3QgdG1wQXJyYXkgPSBhcnJheTtcbiAgICBmb3IgKGxldCBpID0gdG1wQXJyYXkubGVuZ3RoIC0gMTsgaSA+IDA7IGkgLT0gMSkge1xuICAgICAgY29uc3QgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChpICsgMSkpO1xuICAgICAgW3RtcEFycmF5W2ldLCB0bXBBcnJheVtqXV0gPSBbdG1wQXJyYXlbal0sIHRtcEFycmF5W2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHRtcEFycmF5O1xuICB9XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gJ0BtZWRpYSAnICsgaXRlbVsyXSArICd7JyArIGNvbnRlbnQgKyAnfSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tpXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gJygnICsgaXRlbVsyXSArICcpIGFuZCAoJyArIG1lZGlhUXVlcnkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLyc7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG4gIHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59IiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gdHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nXG5cdFx0ID8gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcykgXG5cdFx0IDogb3B0aW9ucy50cmFuc2Zvcm0uZGVmYXVsdChvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAkQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoTmFOKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBoaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiIsImltcG9ydCBjb25maWcgZnJvbSAnLi9maWxlcy9jb25maWcuanNvbic7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhTZXJ2aWNlIHtcbiAgc3RhdGljIGdldFJhbmRvbVRhc2soKSB7XG4gICAgY29uc3QgZmlyc3RPcGVyYW5kID0gTWF0aFNlcnZpY2UuZ2V0T3BlcmFuZCgpO1xuICAgIGNvbnN0IHNlY29uZE9wZXJhbmQgPSBNYXRoU2VydmljZS5nZXRPcGVyYW5kKCk7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gY29uZmlnLm9wZXJhdG9yc1tVdGlscy5yYW5kb20oY29uZmlnLm9wZXJhdG9ycy5sZW5ndGggLSAxKV07XG4gICAgcmV0dXJuIGAke2ZpcnN0T3BlcmFuZH0gJHtvcGVyYXRpb259ICR7c2Vjb25kT3BlcmFuZH1gO1xuICB9XG5cbiAgc3RhdGljIGlzQW5zd2VyVmFsaWQodGFzaywgYW5zd2VyKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZXZhbCh0YXNrKSkgPT09IGFuc3dlcjtcbiAgfVxuXG4gIHN0YXRpYyBnZXRPcGVyYW5kKCkge1xuICAgIHJldHVybiBVdGlscy5yYW5kb20oY29uZmlnLnZhbHVlcy5tYXgsIGNvbmZpZy52YWx1ZXMubWluKTtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsInZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPG1haW4+XFxuICA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXJcXFwiPlxcblxcbiAgPC9kaXY+XFxuPC9tYWluPlxcbjxmb290ZXI+XFxuICA8cD5cXG4gICAgPHNwYW4+wqkgMjAxOTwvc3Bhbj5cXG4gICAgPGEgaHJlZj1cXFwibWFpbHRvOmFsZWtzZWkuYnVsZ2FrQGdtYWlsLmNvbVxcXCI+QWxla3NlaSBCdWxnYWs8L2E+XFxuICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9hbGVrc2VpLWJ1bGdhay1zdHVkeVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIGNsYXNzPVxcXCJnaXRodWJcXFwiPlxcbiAgICAgIDxzdmcgaGVpZ2h0PVxcXCIyNFxcXCIgY2xhc3M9XFxcIm9jdGljb24gb2N0aWNvbi1tYXJrLWdpdGh1YlxcXCIgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiB2ZXJzaW9uPVxcXCIxLjFcXFwiIHdpZHRoPVxcXCIyNFxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPlxcbiAgICAgICAgPHBhdGggZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIiBkPVxcXCJNOCAwQzMuNTggMCAwIDMuNTggMCA4YzAgMy41NCAyLjI5IDYuNTMgNS40NyA3LjU5LjQuMDcuNTUtLjE3LjU1LS4zOCAwLS4xOS0uMDEtLjgyLS4wMS0xLjQ5LTIuMDEuMzctMi41My0uNDktMi42OS0uOTQtLjA5LS4yMy0uNDgtLjk0LS44Mi0xLjEzLS4yOC0uMTUtLjY4LS41Mi0uMDEtLjUzLjYzLS4wMSAxLjA4LjU4IDEuMjMuODIuNzIgMS4yMSAxLjg3Ljg3IDIuMzMuNjYuMDctLjUyLjI4LS44Ny41MS0xLjA3LTEuNzgtLjItMy42NC0uODktMy42NC0zLjk1IDAtLjg3LjMxLTEuNTkuODItMi4xNS0uMDgtLjItLjM2LTEuMDIuMDgtMi4xMiAwIDAgLjY3LS4yMSAyLjIuODIuNjQtLjE4IDEuMzItLjI3IDItLjI3LjY4IDAgMS4zNi4wOSAyIC4yNyAxLjUzLTEuMDQgMi4yLS44MiAyLjItLjgyLjQ0IDEuMS4xNiAxLjkyLjA4IDIuMTIuNTEuNTYuODIgMS4yNy44MiAyLjE1IDAgMy4wNy0xLjg3IDMuNzUtMy42NSAzLjk1LjI5LjI1LjU0LjczLjU0IDEuNDggMCAxLjA3LS4wMSAxLjkzLS4wMSAyLjIgMCAuMjEuMTUuNDYuNTUuMzhBOC4wMTMgOC4wMTMgMCAwIDAgMTYgOGMwLTQuNDItMy41OC04LTgtOHpcXFwiPjwvcGF0aD5cXG4gICAgICA8L3N2Zz5cXG4gICAgPC9hPlxcbiAgPC9wPlxcbjwvZm9vdGVyPlwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJob21lXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImhvbWVfc2NyZWVucyB0b3BcXFwiPlxcbiAgICA8aW1nIHNyYz1cXFwiXCIgKyByZXF1aXJlKFwiLi9pbWFnZXMvYXR0YWNrLnBuZ1wiKSArIFwiXFxcIiBhbHQ9XFxcImJhdHRsZVxcXCIgLz5cXG4gICAgPGltZyBzcmM9XFxcIlwiICsgcmVxdWlyZShcIi4vaW1hZ2VzL21vbnN0ZXIucG5nXCIpICsgXCJcXFwiIGFsdD1cXFwibW9uc3RlclxcXCIgLz5cXG4gIDwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaG9tZV9jb250ZW50XFxcIj5cXG4gICAgPGgxIGNsYXNzPVxcXCJob21lX3RpdGxlXFxcIj5XZWxjb21lITwvaDE+XFxuICAgIDxwIGNsYXNzPVxcXCJob21lX21lc3NhZ2VcXFwiPlRvIHN0YXJ0IHRoZSBnYW1lIHBsZWFzZSBwcmVzcyBidXR0b24gYmVsb3c8L3A+XFxuICAgIDxidXR0b24gY2xhc3M9XFxcImhvbWVfYnV0dG9uIHBsYXlcXFwiPlN0YXJ0PC9idXR0b24+XFxuICAgIDxidXR0b24gY2xhc3M9XFxcImhvbWVfYnV0dG9uIHNjb3JlXFxcIj5TY29yZSBCb2FyZDwvYnV0dG9uPlxcbiAgPC9kaXY+XFxuXFxuICA8ZGl2IGNsYXNzPVxcXCJob21lX3NjcmVlbnMgYm90dG9tXFxcIj5cXG4gICAgPGltZyBzcmM9XFxcIlwiICsgcmVxdWlyZShcIi4vaW1hZ2VzL21vbnN0ZXItYXR0YWNrLnBuZ1wiKSArIFwiXFxcIiBhbHQ9XFxcIm1vbnN0ZXItYXR0YWNrXFxcIiAvPlxcbiAgICA8aW1nIHNyYz1cXFwiXCIgKyByZXF1aXJlKFwiLi9pbWFnZXMvcmlwLnBuZ1wiKSArIFwiXFxcIiBhbHQ9XFxcInJpcFxcXCIgLz5cXG4gIDwvZGl2PlxcbjwvZGl2PlwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJsb2dpblxcXCI+XFxuICA8Zm9ybSBjbGFzcz1cXFwibG9naW5fZm9ybVxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImxvZ2luX2NvbnRlbnRcXFwiPlxcbiAgICAgIDxsYWJlbCBjbGFzcz1cXFwibG9naW5fbGFiZWxcXFwiIGZvcj1cXFwibmFtZVxcXCI+RW50ZXIgTmlja25hbWU8L2xhYmVsPlxcbiAgICAgIDxpbnB1dCBjbGFzcz1cXFwibG9naW5fbmlja25hbWVcXFwiIGlkPVxcXCJuaWNrbmFtZVxcXCIgbmFtZT1cXFwibmFtZVxcXCIgdHlwZT1cXFwidGV4dFxcXCIgdmFsdWU9XFxcIlxcXCIvPlxcbiAgICAgIDxsYWJlbCBjbGFzcz1cXFwiZXJyb3JcXFwiPjwvbGFiZWw+XFxuICAgIDwvZGl2PlxcbiAgICA8YnV0dG9uIGNsYXNzPVxcXCJsb2dpbl9idXR0b25cXFwiPlBsYXk8L2J1dHRvbj5cXG4gIDwvZm9ybT5cXG48L2Rpdj5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGNhbnZhcz48L2NhbnZhcz5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwidGFzay1jb250YWluZXJcXFwiPlxcbiAgPGgxIGNsYXNzPVxcXCJ0YXNrLWNvbnRhaW5lcl90aXRsZVxcXCI+UGxlYXNlIGNob29zZSB0YXNrIGZyb20gdGhlIGxpc3QgYmVsb3c6PC9oMT5cXG4gIDxkaXYgaWQ9XFxcIm1hdGhcXFwiIGNsYXNzPVxcXCJ0YXNrLWNvbnRhaW5lcl9lbGVtZW50XFxcIj5cXG4gICAgPHNwYW4+TWF0aDwvc3Bhbj5cXG4gIDwvZGl2PlxcbiAgPGRpdiBpZD1cXFwidHJhbnNsYXRpb25cXFwiIGNsYXNzPVxcXCJ0YXNrLWNvbnRhaW5lcl9lbGVtZW50XFxcIj5cXG4gICAgPHNwYW4+VHJhbnNsYXRlPC9zcGFuPlxcbiAgPC9kaXY+XFxuICA8ZGl2IGlkPVxcXCJhdWRpdGlvblxcXCIgY2xhc3M9XFxcInRhc2stY29udGFpbmVyX2VsZW1lbnRcXFwiPlxcbiAgICA8c3Bhbj5BdWRpdGlvbjwvc3Bhbj5cXG4gIDwvZGl2PlxcbiAgPGRpdiBpZD1cXFwid29yZFxcXCIgY2xhc3M9XFxcInRhc2stY29udGFpbmVyX2VsZW1lbnRcXFwiPlxcbiAgICA8c3Bhbj5Xb3JkIGNvbnN0cnVjdGlvbjwvc3Bhbj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbFxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJtb2RhbF9jb250ZW50XFxcIj48L2Rpdj5cXG48L2Rpdj5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwidGFza1xcXCI+XFxuICA8cCBjbGFzcz1cXFwidGFza190aXRsZVxcXCI+UGxlYXNlIGVudGVyIG9ubHkgdGhlIGludGVnZXIgcGFydCBvZiB0aGUgcmVzdWx0IG51bWJlcjwvcD5cXG4gIDxwIGNsYXNzPVxcXCJ0YXNrX2Rlc2NyaXB0aW9uXFxcIj48L3A+XFxuICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBjbGFzcz1cXFwidGFza19pbnB1dFxcXCIgLz5cXG4gIDxidXR0b24gY2xhc3M9XFxcInRhc2tfc3VibWl0XFxcIj5TdWJtaXQ8L2J1dHRvbj5cXG48L2Rpdj5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwidGFza1xcXCI+XFxuICA8cCBjbGFzcz1cXFwidGFza190aXRsZVxcXCI+UGxlYXNlIGVudGVyIHRyYW5zbGF0aW9uIG9mIHdvcmsgc3BlY2lmaWVkIGJlbG93PC9wPlxcbiAgPHAgY2xhc3M9XFxcInRhc2tfZGVzY3JpcHRpb25cXFwiPjwvcD5cXG4gIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwidGFza19pbnB1dFxcXCIgLz5cXG4gIDxidXR0b24gY2xhc3M9XFxcInRhc2tfc3VibWl0XFxcIj5TdWJtaXQ8L2J1dHRvbj5cXG48L2Rpdj5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwidGFza1xcXCI+XFxuICA8cCBjbGFzcz1cXFwidGFza190aXRsZVxcXCI+UGxlYXNlIGVudGVyIHdvcmQgdGhhdCB3YXMgcHJvbm91bmNlczwvcD5cXG4gIDxidXR0b24gY2xhc3M9XFxcInRhc2tfcGxheVxcXCI+PC9idXR0b24+XFxuICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcInRhc2tfaW5wdXRcXFwiIC8+XFxuICA8YnV0dG9uIGNsYXNzPVxcXCJ0YXNrX3N1Ym1pdFxcXCI+U3VibWl0PC9idXR0b24+XFxuPC9kaXY+XFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInRhc2tcXFwiPlxcbiAgPHAgY2xhc3M9XFxcInRhc2tfdGl0bGVcXFwiPlBsZWFzZSByZW9yZGVyIGxldHRlciB0byBmb3JtIGEgd29yZDwvcD5cXG4gIDxkaXYgY2xhc3M9XFxcInRhc2tfZGVzY3JpcHRpb24gbGV0dGVyX2NvbnRhaW5lclxcXCI+PC9kaXY+XFxuICA8YnV0dG9uIGNsYXNzPVxcXCJ0YXNrX3N1Ym1pdFxcXCI+U3VibWl0PC9idXR0b24+XFxuPC9kaXY+XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNjb3JlLWNvbnRhaW5lclxcXCI+XFxuICA8aDEgY2xhc3M9XFxcInNjb3JlLWNvbnRhaW5lcl90aXRsZVxcXCI+U2NvcmVzOjwvaDE+XFxuICA8dGFibGUgY2xhc3M9XFxcInNjb3JlLWNvbnRhaW5lcl90YWJsZVxcXCI+XFxuICAgIDx0aGVhZD5cXG4gICAgICA8dHI+XFxuICAgICAgICA8dGg+TmFtZTwvdGg+XFxuICAgICAgICA8dGg+U2NvcmU8L3RoPlxcbiAgICAgIDwvdHI+XFxuICAgIDwvdGhlYWQ+XFxuICAgIDx0Ym9keT5cXG5cXG4gICAgPC90Ym9keT5cXG4gIDwvdGFibGU+XFxuICA8YnV0dG9uIGNsYXNzPVxcXCJyZXN0YXJ0XFxcIj5UcnkgQWdhaW48L2J1dHRvbj5cXG48L2Rpdj5cXG5cIjsiLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvZXM2XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvclwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC92YWx1ZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHlcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3dlYlwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pIHtcbiAgY29uc29sZS53YXJuKFwiQGJhYmVsL3BvbHlmaWxsIGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZSBvbiB0aGlzIHBhZ2UuIFRoaXMgaXMgcHJvYmFibHkgbm90IGRlc2lyYWJsZS9pbnRlbmRlZCBcIiArIFwiYW5kIG1heSBoYXZlIGNvbnNlcXVlbmNlcyBpZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHBvbHlmaWxscyBhcmUgYXBwbGllZCBzZXF1ZW50aWFsbHkuIFwiICsgXCJJZiB5b3UgZG8gbmVlZCB0byBsb2FkIHRoZSBwb2x5ZmlsbCBtb3JlIHRoYW4gb25jZSwgdXNlIEBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0IFwiICsgXCJpbnN0ZWFkIHRvIGJ5cGFzcyB0aGUgd2FybmluZy5cIik7XG59XG5cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gY2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gY2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxudmFyIFNVUFBPUlRTX1kgPSAhIShmdW5jdGlvbiAoKSB7IHRyeSB7IHJldHVybiBuZXcgUmVnRXhwKCd4JywgJ3knKTsgfSBjYXRjaCAoZSkge30gfSkoKTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDB4ZmZmZmZmZmYgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciB0bXAgPSB7fTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDc7IH0pKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5pbmNsdWRlcztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkU3RhcnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRFbmQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUHJvbWlzZVsnZmluYWxseSddO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG4gIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpXG4pO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gSW1wb3J0c1xudmFyIHVybEVzY2FwZSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvdXJsLWVzY2FwZS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzBfX18gPSB1cmxFc2NhcGUocmVxdWlyZShcIi4vaW1hZ2VzL2JhY2tncm91bmQucG5nXCIpKTtcblxuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5IHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuXFxuICBmb250LWZhbWlseTogJ09wZW4gU2FucycsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG5cXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMF9fXyArIFwiKTtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxufVxcblxcbmZvb3RlciB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbmZvb3RlciBhLmdpdGh1YiB7XFxuICBtYXJnaW46IDElO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlc2NhcGUodXJsLCBuZWVkUXVvdGVzKSB7XG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBuZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuICdcIicgKyB1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSArICdcIic7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIxYjVkZjlhNjU5MWFjZjkwNmJiNDYzN2U5NjM2MGQ5NS5wbmdcIjsiLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjg1OWM3OTIzODhkOTcwOWU1YzQyNjg0MWI4NDc3NWM3LnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImM4Nzc3NzQ3MzY1M2ZkMTIzMTVmMzYxMjdhODAyNWYwLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjI2M2ZkYTcyZjU1NTU3YjA0ZmE5Y2QxNjUyYWQ3ZDhiLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImI5YTU5YTA2ZmE4MThlMmE3MTIyNzMwZDE5MWFlYTQyLnBuZ1wiOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiZGl2LmhvbWUge1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG5cXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbmRpdi5ob21lX2NvbnRlbnQge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG5oMS5ob21lX3RpdGxlIHtcXG4gIG1hcmdpbjogNXB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDVlbTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmhvbWVfbWVzc2FnZSB7XFxuICBjb2xvcjogd2hpdGU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMS4zZW07XFxufVxcblxcbi5ob21lX2J1dHRvbiB7XFxuICBwYWRkaW5nOiAxJSAzJTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luOiAxMHB4IGF1dG87XFxuICBib3JkZXI6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTZjNzkwO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uaG9tZV9zY3JlZW5zIGltZ3tcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIG1heC13aWR0aDogMjAlO1xcbiAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMjBweCAzcHggI2I4Y2RmNTtcXG59XFxuXFxuLmhvbWVfc2NyZWVucyBpbWc6Zmlyc3QtY2hpbGR7XFxuICBsZWZ0OiAxJTtcXG59XFxuXFxuLmhvbWVfc2NyZWVucyBpbWc6bGFzdC1jaGlsZHtcXG4gIHJpZ2h0OiAxJTtcXG59XFxuXFxuLmhvbWVfc2NyZWVucy50b3AgaW1nIHtcXG4gIHRvcDogMSU7XFxufVxcblxcbi5ob21lX3NjcmVlbnMuYm90dG9tIGltZyB7XFxuICBib3R0b206IDElO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImRpdi5sb2dpbiB7XFxuICB3aWR0aDogMTAwdnc7XFxuICBoZWlnaHQ6IDEwMHZoO1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuLmxvZ2luX2Zvcm0ge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ubG9naW5fY29udGVudCB7XFxuICBtYXJnaW46IDFlbTtcXG59XFxuXFxuLmxvZ2luX2xhYmVsIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDJlbTtcXG59XFxuXFxuLmxvZ2luX25pY2tuYW1lIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luOiAxZW0gYXV0bztcXG4gIGZvbnQtc2l6ZTogMS42ZW07XFxufVxcblxcbi5sb2dpbl9idXR0b24ge1xcbiAgcGFkZGluZzogMSUgMyU7XFxuICBib3JkZXI6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTZjNzkwO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5sYWJlbC5lcnJvciB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMS41ZW07XFxuICBjb2xvcjogcmVkO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImNhbnZhcyB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudGFzay1jb250YWluZXIgPiBoMSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBjb2xvcjogIzQ3NjE0NDtcXG59XFxuXFxuLnRhc2stY29udGFpbmVyX2VsZW1lbnQge1xcbiAgcGFkZGluZzogMiUgNSU7XFxuICBtYXJnaW46IDVweCA1cHg7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzk2Yzc5MDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi50YXNrLWNvbnRhaW5lcl9lbGVtZW50OmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnRhc2stY29udGFpbmVyX2VsZW1lbnQ6YWN0aXZlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAxMHB4ICMwMDViYjE7XFxufVxcblxcbi50YXNrLWNvbnRhaW5lcl9lbGVtZW50OmZpcnN0LWNoaWxkIHtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxufVxcblxcbi50YXNrLWNvbnRhaW5lcl9lbGVtZW50Omxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubW9kYWwge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgei1pbmRleDogMTtcXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjQpO1xcbn1cXG5cXG4vKiBNb2RhbCBDb250ZW50ICovXFxuLm1vZGFsX2NvbnRlbnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2UzZjFmYztcXG4gIG1hcmdpbjogYXV0bztcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjODg4O1xcbiAgd2lkdGg6IDMwJTtcXG4gIGJveC1zaGFkb3c6IDAgNHB4IDhweCAwIHJnYmEoMCwgMCwgMCwgMC4yKSwwIDZweCAyMHB4IDAgcmdiYSgwLDAsMCwwLjE5KTtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudGFzayB7XFxuICBwYWRkaW5nOiA1JSAxMCU7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgY29sb3I6IGdyYXk7XFxuICBib3JkZXI6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTNmMWZjO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGFza19pbnB1dCB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBmb250LXNpemU6IDEuMmVtO1xcbn1cXG5cXG4udGFza19zdWJtaXQge1xcbiAgbWFyZ2luOiAxZW0gYXV0bztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogNSUgMTAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzk2Yzc5MDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudGFzayB7XFxuICBwYWRkaW5nOiA1JSAxMCU7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgY29sb3I6IGdyYXk7XFxuICBib3JkZXI6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTNmMWZjO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGFza19pbnB1dCB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBmb250LXNpemU6IDEuMmVtO1xcbn1cXG5cXG4udGFza19zdWJtaXQge1xcbiAgbWFyZ2luOiAxZW0gYXV0bztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogNSUgMTAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzk2Yzc5MDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudGFzayB7XFxuICBwYWRkaW5nOiAzJSAxNSU7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgY29sb3I6IGdyYXk7XFxuICBib3JkZXI6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTNmMWZjO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGFza19pbnB1dCB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBmb250LXNpemU6IDEuMmVtO1xcbn1cXG5cXG4udGFza19wbGF5e1xcbiAgd2lkdGg6IDUwcHg7XFxuICBoZWlnaHQ6IDUwcHg7XFxuICBwYWRkaW5nOiAwIDA7XFxuICBiYWNrZ3JvdW5kOiAjNjQ5NWVkO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcXG4gIG1hcmdpbjogMWVtIGF1dG87XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250LXNpemU6IDEuMmVtO1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLnRhc2tfcGxheTo6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IDFweDtcXG4gIGxlZnQ6IDNweDtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICBib3JkZXItd2lkdGg6IDEwcHggMCAxMHB4IDIwcHg7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHdoaXRlO1xcbn1cXG5cXG4udGFza19wbGF5OmFjdGl2ZSB7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMTBweCAjMDA1YmIxO1xcbn1cXG5cXG4udGFza19zdWJtaXQge1xcbiAgbWFyZ2luOiAxZW0gYXV0bztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogNSUgMTAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzk2Yzc5MDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubGV0dGVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbjogMSUgMyU7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5sZXR0ZXJfdmFsdWUge1xcbiAgcGFkZGluZzogMCAwLjVlbTtcXG4gIGN1cnNvcjogbW92ZTtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJkaXYuc2NvcmUtY29udGFpbmVyIHtcXG4gIGhlaWdodDogMTAwdmg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLnNjb3JlLWNvbnRhaW5lcl90aXRsZSB7ICBcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDNlbTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxudGFibGUge1xcbiAgd2lkdGg6IDYwJTtcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE1MCwgMTk5LCAxNDQsIDAuNSk7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG50YWJsZSB0aCB7XFxuICBwYWRkaW5nOiAxJSA1JTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgY29sb3I6ICMwNzM4OTk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTdjYTkyO1xcbn1cXG5cXG50YWJsZT50Ym9keT50cjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmVjYWY4O1xcbn1cXG5cXG50YWJsZSB0ZCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBwYWRkaW5nOiAxJSA1JTtcXG4gIGNvbG9yOiAjNjY2Njk5O1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlOGVkZmY7XFxufVxcblxcbnRib2R5PnRyOm50aC1jaGlsZCgybiArIDEpIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOGVkZmY7XFxufVxcblxcbmJ1dHRvbi5yZXN0YXJ0IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luLXRvcDogMWVtO1xcbiAgcGFkZGluZzogMSUgMyU7XFxuICBib3JkZXI6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTZjNzkwO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQgJy4vaW5kZXguY3NzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2luZGV4LnRlbXBsYXRlLmh0bWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbml0IHtcbiAgc3RhdGljIGluaXQoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgfVxufVxuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vaW5kZXgudGVtcGxhdGUuaHRtbCc7XG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuY29uc3QgQ09OU1RBTlRTID0ge1xuICBlbGVtZW50OiAnZGl2LmNvbnRhaW5lcicsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIHtcbiAgc3RhdGljIHNob3coKSB7XG4gICAgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKENPTlNUQU5UUy5lbGVtZW50KS5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgICBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbi5wbGF5JykuZm9jdXMoKTtcbiAgICByZXR1cm4gSG9tZS5vblBsYXkoKTtcbiAgfVxuXG4gIHN0YXRpYyBoaWRlKCkge1xuICAgIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihDT05TVEFOVFMuZWxlbWVudCkuaW5uZXJIVE1MID0gJyc7XG4gIH1cblxuICBzdGF0aWMgb25QbGF5KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKCdidXR0b24ucGxheScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBIb21lLmhpZGUoKTtcbiAgICAgICAgcmVzb2x2ZSgnc3RhcnQnKTtcbiAgICAgIH0pO1xuICAgICAgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKCdidXR0b24uc2NvcmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgSG9tZS5oaWRlKCk7XG4gICAgICAgIHJlc29sdmUoJ3Njb3JlJyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vaW5kZXgudGVtcGxhdGUuaHRtbCc7XG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuY29uc3QgQ09OU1RBTlRTID0ge1xuICBlbGVtZW50OiAnZGl2LmNvbnRhaW5lcicsXG4gIGlucHV0OiAnaW5wdXQjbmlja25hbWUnLFxuICBlcnJvcjogJ2xhYmVsLmVycm9yJyxcbiAgZXJyb3JNZXNzYWdlOiAnTmlja25hbWUgY2FuIG5vdCBiZSBudWxsIG9yIGVtcHR5JyxcbiAgZW50ZXJLZXk6IDEzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9naW4ge1xuICBzdGF0aWMgc2hvdygpIHtcbiAgICBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoQ09OU1RBTlRTLmVsZW1lbnQpLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3NMb2dpbigpO1xuICB9XG5cbiAgc3RhdGljIGhpZGUoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKENPTlNUQU5UUy5lbGVtZW50KS5pbm5lckhUTUwgPSAnJztcbiAgfVxuXG4gIHN0YXRpYyBwcm9jZXNzTG9naW4oKSB7XG4gICAgcmV0dXJuIExvZ2luLm9uUGxheSgpLmNhdGNoKCgpID0+IHtcbiAgICAgIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihDT05TVEFOVFMuZXJyb3IpLmlubmVySFRNTCA9IENPTlNUQU5UUy5lcnJvck1lc3NhZ2U7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzTG9naW4oKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBvblBsYXkoKSB7XG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoQ09OU1RBTlRTLmlucHV0KTtcbiAgICBpbnB1dC5mb2N1cygpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBuaWNrTmFtZSA9IGlucHV0LnZhbHVlO1xuICAgICAgICBpZiAobmlja05hbWUpIHtcbiAgICAgICAgICByZXNvbHZlKG5pY2tOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoKTtcbiAgICAgIH0pO1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBDT05TVEFOVFMuZW50ZXJLZXkpIHtcbiAgICAgICAgICBidXR0b24uY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImNvbnN0IENPTkZJRyA9IHtcbiAgaW1hZ2VzOiB7XG4gICAgY291bnQ6IDExLFxuICAgIGluZGV4T2ZTcGxhc2g6IDUsXG4gICAgc3RhcnQ6IDEsXG4gICAgdXBkYXRlSW50ZXJ2YWw6IDUsXG4gICAgc2NhbGU6IDEgLyA0LFxuICAgIHBhdGg6ICcuL2ltYWdlcy9maXJlYmFsbC9maXJlYmFsbF8nLFxuICAgIGV4dDogJy5wbmcnLFxuICB9LFxuICBhdWRpbzoge1xuICAgIHBhdGg6ICcuL2F1ZGlvL2ZpcmViYWxsX2F0dGFjay5tcDMnLFxuICB9LFxuICBzdGVwOiA1LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlyZWJhbGwge1xuICBjb25zdHJ1Y3RvcihjdHgpIHtcbiAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICB0aGlzLmF0dGFjayA9IGZhbHNlO1xuICAgIHRoaXMuaW5kZXggPSBDT05GSUcuaW1hZ2VzLnN0YXJ0O1xuICAgIHRoaXMudXBkYXRlSW50ZXJ2YWwgPSAwO1xuICAgIHRoaXMuaW1hZ2VzID0gW107XG4gICAgdGhpcy5hdWRpbyA9IG5ldyBBdWRpbyhDT05GSUcuYXVkaW8ucGF0aCk7XG4gICAgdGhpcy5sb2FkSW1hZ2VzKCk7XG4gIH1cblxuICBwZXJmb3JtQXR0YWNrKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5hdHRhY2sgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLmRyYXcoY2FsbGJhY2spO1xuICB9XG5cbiAgZHJhdyhjYWxsYmFjaykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5fcGxheSgpO1xuICAgICAgdGhpcy5fZHJhdyhjYWxsYmFjaywgcmVzb2x2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBfcGxheSgpIHtcbiAgICB0aGlzLmF1ZGlvLnBsYXkoKTtcbiAgfVxuXG4gIF9kcmF3KGNhbGxiYWNrLCByZXNvbHZlKSB7XG4gICAgaWYgKHRoaXMucmVxSWQpIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucmVxSWQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5hdHRhY2spIHtcbiAgICAgIGlmICh0aGlzLnBvaW50LndpZHRoID49IHRoaXMuZmluaXNoUG9pbnQud2lkdGggJiYgdGhpcy5pbmRleCA9PT0gQ09ORklHLmltYWdlcy5jb3VudCkge1xuICAgICAgICB0aGlzLmluZGV4ID0gQ09ORklHLmltYWdlcy5zdGFydDtcbiAgICAgICAgdGhpcy51cGRhdGVJbnRlcnZhbCA9IDA7XG4gICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLnN0YXJ0UG9pbnQ7XG4gICAgICAgIHRoaXMuYXR0YWNrID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXVkaW8ucGF1c2UoKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaW5kZXggPT09IENPTkZJRy5pbWFnZXMuaW5kZXhPZlNwbGFzaFxuICAgICAgICAmJiB0aGlzLnBvaW50LndpZHRoIDwgdGhpcy5maW5pc2hQb2ludC53aWR0aCkge1xuICAgICAgICB0aGlzLmluZGV4ID0gQ09ORklHLmltYWdlcy5zdGFydDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBvaW50LndpZHRoID49IHRoaXMuZmluaXNoUG9pbnQud2lkdGhcbiAgICAgICAgJiYgdGhpcy5pbmRleCA8IENPTkZJRy5pbWFnZXMuaW5kZXhPZlNwbGFzaCkge1xuICAgICAgICB0aGlzLmluZGV4ID0gQ09ORklHLmltYWdlcy5pbmRleE9mU3BsYXNoO1xuICAgICAgfVxuICAgICAgY29uc3QgaW1nID0gdGhpcy5pbWFnZXNbdGhpcy5pbmRleF07XG4gICAgICBjb25zdCBoZWlnaHQgPSBpbWcuaGVpZ2h0ICogQ09ORklHLmltYWdlcy5zY2FsZTtcbiAgICAgIGNvbnN0IHdpZHRoID0gaW1nLndpZHRoICogQ09ORklHLmltYWdlcy5zY2FsZTtcbiAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShpbWcsIHRoaXMucG9pbnQud2lkdGgsIHRoaXMucG9pbnQuaGVpZ2h0LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGlmICh0aGlzLnVwZGF0ZUludGVydmFsID09PSBDT05GSUcuaW1hZ2VzLnVwZGF0ZUludGVydmFsKSB7XG4gICAgICAgIHRoaXMuaW5kZXggKz0gMTtcbiAgICAgICAgdGhpcy51cGRhdGVJbnRlcnZhbCA9IDA7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZUludGVydmFsICs9IDE7XG5cbiAgICAgIGlmICh0aGlzLmluZGV4IDwgQ09ORklHLmltYWdlcy5pbmRleE9mU3BsYXNoKSB7XG4gICAgICAgIHRoaXMucG9pbnQud2lkdGggKz0gQ09ORklHLnN0ZXA7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVxSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuX2RyYXcoY2FsbGJhY2ssIHJlc29sdmUpKTtcbiAgfVxuXG4gIGxvYWRJbWFnZXMoKSB7XG4gICAgZm9yIChsZXQgaSA9IENPTkZJRy5pbWFnZXMuc3RhcnQ7IGkgPD0gQ09ORklHLmltYWdlcy5jb3VudDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgaW1hZ2Uuc3JjID0gQ09ORklHLmltYWdlcy5wYXRoICsgaSArIENPTkZJRy5pbWFnZXMuZXh0O1xuICAgICAgdGhpcy5pbWFnZXNbaV0gPSBpbWFnZTtcbiAgICB9XG4gIH1cblxuICBzZXQgc2hvdyhhdHRhY2spIHtcbiAgICB0aGlzLmF0dGFjayA9IGF0dGFjaztcbiAgfVxuXG4gIHNldCBzdGFydChzdGFydCkge1xuICAgIHRoaXMuc3RhcnRQb2ludCA9IHN0YXJ0O1xuICAgIHRoaXMucG9pbnQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXJ0KSk7XG4gIH1cblxuICBzZXQgZmluaXNoKGZpbmlzaCkge1xuICAgIHRoaXMuZmluaXNoUG9pbnQgPSBmaW5pc2g7XG4gIH1cbn1cbiIsImNvbnN0IENPTlNUID0ge1xuICBicmVhdGg6IHtcbiAgICBpbnRlcnZhbFN0ZXA6IDEsXG4gICAgZGVmYXVsdDogMCxcbiAgfSxcbiAgZGVhdGg6IHtcbiAgICBwZXJpb2Q6IDIsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBYnN0cmFjdENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGN0eCwgY2ZnKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNmZyA9IGNmZztcbiAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaHAgPSBjZmcuaHAudmFsdWU7XG4gICAgdGhpcy5icmVhdGggPSB7XG4gICAgICBpbnRlcnZhbDogMCxcbiAgICAgIGN1cnJlbnQ6IENPTlNULmJyZWF0aC5kZWZhdWx0LFxuICAgIH07XG4gICAgdGhpcy5pbWFnZXNMb2FkZWRDb3VudCA9IDA7XG4gICAgdGhpcy5oYW5kQW5nbGUgPSAwO1xuICAgIGlmICghbmV3LnRhcmdldCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0l0IGlzIG5vdCBhbGxvd2VkIHRvIGNyZWF0ZSBkaXJlY3QgaW5zdGFuY2Ugb2YgQWJzdHJhY3RDaGFyYWN0ZXInKTtcbiAgICB9XG4gIH1cblxuICBkcmF3KCkge1xuICAgIHRoaXMucmVjYWxjdWxhdGVCcmVhdGgoKTtcbiAgICB0aGlzLmRyYXdMZWdzKCk7XG4gICAgdGhpcy5kcmF3TGVmdEFybSgpO1xuICAgIHRoaXMuZHJhd0JvZHkoKTtcbiAgICB0aGlzLmRyYXdSaWdodEFybSgpO1xuICAgIHRoaXMuZHJhd0hlYWQoKTtcbiAgICB0aGlzLmRyYXdIUCgpO1xuICAgIHRoaXMuZHJhd05hbWUoKTtcbiAgICB0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcbiAgfVxuXG4gIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSB7XG4gICAgdGhpcy5fY2FuY2VsQW5pbWF0aW9uRnJhbWUoKTtcbiAgICB0aGlzLnJlcUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIF9jYW5jZWxBbmltYXRpb25GcmFtZSgpIHtcbiAgICBpZiAodGhpcy5yZXFJZCkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yZXFJZCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYXR0YWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH1cblxuICBhc3luYyBkZWF0aCgpIHtcbiAgICB0aGlzLl9jYW5jZWxBbmltYXRpb25GcmFtZSgpO1xuICAgIHRoaXMuZGVhdGhUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLl9kZWF0aChyZXNvbHZlKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9kZWF0aChyZXNvbHZlKSB7XG4gICAgaWYgKHRoaXMuX2dldEV4ZWN0aW9uVGltZSh0aGlzLmRlYXRoVGltZSkgPiBDT05TVC5kZWF0aC5wZXJpb2QpIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGVpZ2h0UG9zaXRpb24gPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCAtIHRoaXMuZGVhZC5oZWlnaHQgLSAxMDtcbiAgICBjb25zdCB3aWR0aFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIHRoaXMuY2ZnLmJvZHkucmF0aW8ud2lkdGg7XG4gICAgdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMuZGVhZCwgd2lkdGhQb3NpdGlvbiwgaGVpZ2h0UG9zaXRpb24pO1xuICAgIHRoaXMuX2NhbmNlbEFuaW1hdGlvbkZyYW1lKCk7XG4gICAgdGhpcy5yZXFJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLl9kZWF0aChyZXNvbHZlKSk7XG4gIH1cblxuICBfZ2V0RXhlY3Rpb25UaW1lKHN0YXJ0KSB7XG4gICAgcmV0dXJuIChwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvIDEwMDA7XG4gIH1cblxuICByZWNhbGN1bGF0ZUJyZWF0aCgpIHtcbiAgICBpZiAodGhpcy5icmVhdGguaW50ZXJ2YWwgPT09IHRoaXMuY2ZnLmJyZWF0aC5pbnRlcnZhbCkge1xuICAgICAgdGhpcy5icmVhdGguaW50ZXJ2YWwgPSBDT05TVC5icmVhdGguZGVmYXVsdDtcbiAgICAgIHRoaXMuYnJlYXRoLmN1cnJlbnQgKz0gdGhpcy5jZmcuYnJlYXRoLnN0ZXA7XG4gICAgICBpZiAodGhpcy5icmVhdGguY3VycmVudCA+IHRoaXMuY2ZnLmJyZWF0aC5tYXhcbiAgICAgICAgfHwgdGhpcy5icmVhdGguY3VycmVudCA8IHRoaXMuY2ZnLmJyZWF0aC5taW4pIHtcbiAgICAgICAgdGhpcy5jZmcuYnJlYXRoLnN0ZXAgPSAtdGhpcy5jZmcuYnJlYXRoLnN0ZXA7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYnJlYXRoLmludGVydmFsICs9IENPTlNULmJyZWF0aC5pbnRlcnZhbFN0ZXA7XG4gIH1cblxuICBkcmF3TmFtZSgpIHtcbiAgICBjb25zdCBoZWlnaHRQb3NpdGlvbiA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0ICogdGhpcy5jZmcubmFtZS5wb3NpdGlvbi5oZWlnaHQ7XG4gICAgY29uc3Qgd2lkdGhQb3NpdGlvbiA9IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggKiB0aGlzLmNmZy5uYW1lLnBvc2l0aW9uLndpZHRoO1xuXG4gICAgdGhpcy5jdHguZm9udCA9IHRoaXMuY2ZnLnRleHQuc3R5bGU7XG4gICAgdGhpcy5jdHguZmlsbFRleHQodGhpcy5uYW1lLCB3aWR0aFBvc2l0aW9uLCBoZWlnaHRQb3NpdGlvbik7XG4gIH1cblxuICBkcmF3SFAoKSB7XG4gICAgY29uc3QgaGVpZ2h0UG9zaXRpb24gPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCAqIHRoaXMuY2ZnLmhwLnBvc2l0aW9uLmhlaWdodDtcbiAgICBjb25zdCB3aWR0aFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIHRoaXMuY2ZnLmhwLnBvc2l0aW9uLndpZHRoO1xuXG4gICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5nZXRIcFN0YXR1c0NvbG9yKCk7XG4gICAgdGhpcy5jdHguZm9udCA9IHRoaXMuY2ZnLnRleHQuc3R5bGU7XG4gICAgdGhpcy5jdHguZmlsbFRleHQodGhpcy5ocCwgd2lkdGhQb3NpdGlvbiwgaGVpZ2h0UG9zaXRpb24pO1xuICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgfVxuXG4gIGdldEhwU3RhdHVzQ29sb3IoKSB7XG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLmNmZy5ocC5zdGF0dXMuTk9STUFMLmNvbG9yO1xuICAgIGlmICh0aGlzLmhwIDwgdGhpcy5jZmcuaHAuc3RhdHVzLkFWRVJBR0UudmFsdWUpIHtcbiAgICAgIGN1cnJlbnQgPSB0aGlzLmNmZy5ocC5zdGF0dXMuQVZFUkFHRS5jb2xvcjtcbiAgICB9XG4gICAgaWYgKHRoaXMuaHAgPCB0aGlzLmNmZy5ocC5zdGF0dXMuQ1JJVElDQUwudmFsdWUpIHtcbiAgICAgIGN1cnJlbnQgPSB0aGlzLmNmZy5ocC5zdGF0dXMuQ1JJVElDQUwuY29sb3I7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgc2V0IGhlYWx0aCh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmhwID4gdmFsdWUpIHtcbiAgICAgIHRoaXMuaHAgLT0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaHAgPSAwO1xuICAgIH1cbiAgfVxuXG4gIGdldCBoZWFsdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuaHA7XG4gIH1cbn1cbiIsImltcG9ydCBGaXJlYmFsbCBmcm9tICcuLi9maXJlYmFsbCc7XG5pbXBvcnQgQ09ORklHIGZyb20gJy4vZmlsZXMvY29uZmlnLmpzb24nO1xuXG5pbXBvcnQgQWJzdHJhY3RDaGFyYWN0ZXIgZnJvbSAnLi4vY2hhcmFjdGVyJztcblxuY29uc3QgQ09OU1RBTlRTID0ge1xuICBzdGFydDoge1xuICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0ICogMC44NSxcbiAgICB3aWR0aDogZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIDAuMzUsXG4gIH0sXG4gIGZpbmlzaDoge1xuICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0ICogMC44NSxcbiAgICB3aWR0aDogZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIDAuNixcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcnNvbkNvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0Q2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IoY2FudmFzQ29udGV4dCwgbmFtZSkge1xuICAgIHN1cGVyKG5hbWUsIGNhbnZhc0NvbnRleHQsIENPTkZJRyk7XG4gICAgdGhpcy53ZWFwb24gPSB0aGlzLmluaXRXZWFwb25Db21wb25lbnQoKTtcbiAgICB0aGlzLmJ1aWxkKCk7XG4gIH1cblxuICBpbml0V2VhcG9uQ29tcG9uZW50KCkge1xuICAgIGNvbnN0IHdlYXBvbiA9IG5ldyBGaXJlYmFsbCh0aGlzLmN0eCk7XG4gICAgd2VhcG9uLnN0YXJ0ID0gQ09OU1RBTlRTLnN0YXJ0O1xuICAgIHdlYXBvbi5maW5pc2ggPSBDT05TVEFOVFMuZmluaXNoO1xuICAgIHJldHVybiB3ZWFwb247XG4gIH1cblxuICBidWlsZCgpIHtcbiAgICB0aGlzLmxlZ3MgPSB0aGlzLmxvYWRDaGFyYWN0ZXJQYXJ0KENPTkZJRy5sZWdzLmltYWdlKTtcbiAgICB0aGlzLmxlZnRBcm0gPSB0aGlzLmxvYWRDaGFyYWN0ZXJQYXJ0KENPTkZJRy5hcm1zLmltYWdlLmxlZnQpO1xuICAgIHRoaXMuYm9keSA9IHRoaXMubG9hZENoYXJhY3RlclBhcnQoQ09ORklHLmJvZHkuaW1hZ2UpO1xuICAgIHRoaXMuaGVhZCA9IHRoaXMubG9hZENoYXJhY3RlclBhcnQoQ09ORklHLmhlYWQuaW1hZ2UpO1xuICAgIHRoaXMucmlnaHRBcm0gPSB0aGlzLmxvYWRDaGFyYWN0ZXJQYXJ0KENPTkZJRy5hcm1zLmltYWdlLnJpZ2h0KTtcbiAgfVxuXG4gIGxvYWRDaGFyYWN0ZXJQYXJ0KHR5cGUpIHtcbiAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIGltYWdlLnNyYyA9IFBlcnNvbkNvbXBvbmVudC5nZXRQYXRoKHR5cGUpO1xuICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHRoaXMub25JbWFnZUxvYWRlZCgpO1xuICAgIHJldHVybiBpbWFnZTtcbiAgfVxuXG4gIG9uSW1hZ2VMb2FkZWQoKSB7XG4gICAgdGhpcy5pbWFnZXNMb2FkZWRDb3VudCArPSAxO1xuICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZENvdW50ID09PSBDT05GSUcubnVtYmVyT2ZQYXJ0cykge1xuICAgICAgdGhpcy5kcmF3KCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYXR0YWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMud2VhcG9uLnBlcmZvcm1BdHRhY2soY2FsbGJhY2spO1xuICB9XG5cbiAgZHJhd0hlYWQoKSB7XG4gICAgY29uc3QgaGVpZ2h0UG9zaXRpb24gPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCAqIENPTkZJRy5oZWFkLnJhdGlvLmhlaWdodFxuICAgICAgLSB0aGlzLmJyZWF0aC5jdXJyZW50O1xuICAgIGNvbnN0IHdpZHRoUG9zaXRpb24gPSBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoICogQ09ORklHLmhlYWQucmF0aW8ud2lkdGg7XG4gICAgY29uc3Qgd2lkdGhTaXplID0gdGhpcy5oZWFkLndpZHRoIC8gQ09ORklHLnNjYWxlUmF0aW9uO1xuICAgIGNvbnN0IGhlaWdodFNpemUgPSB0aGlzLmhlYWQuaGVpZ2h0IC8gQ09ORklHLnNjYWxlUmF0aW9uO1xuICAgIHRoaXMuY3R4LmRyYXdJbWFnZSh0aGlzLmhlYWQsIHdpZHRoUG9zaXRpb24sIGhlaWdodFBvc2l0aW9uLCB3aWR0aFNpemUsIGhlaWdodFNpemUpO1xuICB9XG5cbiAgZHJhd0JvZHkoKSB7XG4gICAgY29uc3QgaGVpZ2h0UG9zaXRpb24gPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCAqIENPTkZJRy5ib2R5LnJhdGlvLmhlaWdodDtcbiAgICBjb25zdCB3aWR0aFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIENPTkZJRy5ib2R5LnJhdGlvLndpZHRoO1xuICAgIGNvbnN0IHdpZHRoU2l6ZSA9IHRoaXMuYm9keS53aWR0aCAvIENPTkZJRy5zY2FsZVJhdGlvbjtcbiAgICBjb25zdCBoZWlnaHRTaXplID0gdGhpcy5ib2R5LmhlaWdodCAvIENPTkZJRy5zY2FsZVJhdGlvbjtcbiAgICB0aGlzLmN0eC5kcmF3SW1hZ2UodGhpcy5ib2R5LCB3aWR0aFBvc2l0aW9uLCBoZWlnaHRQb3NpdGlvbiwgd2lkdGhTaXplLCBoZWlnaHRTaXplKTtcbiAgfVxuXG4gIGRyYXdMZWdzKCkge1xuICAgIGNvbnN0IGhlaWdodFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQgKiBDT05GSUcubGVncy5yYXRpby5oZWlnaHQ7XG4gICAgY29uc3Qgd2lkdGhQb3NpdGlvbiA9IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggKiBDT05GSUcubGVncy5yYXRpby53aWR0aDtcbiAgICBjb25zdCB3aWR0aFNpemUgPSB0aGlzLmxlZ3Mud2lkdGggLyBDT05GSUcuc2NhbGVSYXRpb247XG4gICAgY29uc3QgaGVpZ2h0U2l6ZSA9IHRoaXMubGVncy5oZWlnaHQgLyBDT05GSUcuc2NhbGVSYXRpb247XG4gICAgdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMubGVncywgd2lkdGhQb3NpdGlvbiwgaGVpZ2h0UG9zaXRpb24sIHdpZHRoU2l6ZSwgaGVpZ2h0U2l6ZSk7XG4gIH1cblxuICBkcmF3TGVmdEFybSgpIHtcbiAgICBjb25zdCBoZWlnaHRQb3NpdGlvbiA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0ICogQ09ORklHLmFybXMucmF0aW8ubGVmdC5oZWlnaHRcbiAgICAgIC0gdGhpcy5icmVhdGguY3VycmVudDtcbiAgICBjb25zdCB3aWR0aFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIENPTkZJRy5hcm1zLnJhdGlvLmxlZnQud2lkdGg7XG4gICAgY29uc3Qgd2lkdGhTaXplID0gdGhpcy5sZWZ0QXJtLndpZHRoIC8gQ09ORklHLnNjYWxlUmF0aW9uO1xuICAgIGNvbnN0IGhlaWdodFNpemUgPSB0aGlzLmxlZnRBcm0uaGVpZ2h0IC8gQ09ORklHLnNjYWxlUmF0aW9uO1xuICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICB0aGlzLmN0eC50cmFuc2xhdGUod2lkdGhQb3NpdGlvbiwgaGVpZ2h0UG9zaXRpb24pO1xuICAgIHRoaXMuX3JvdGF0ZUhhbmQoKTtcbiAgICB0aGlzLmN0eC5kcmF3SW1hZ2UodGhpcy5sZWZ0QXJtLCAwLCAwLCB3aWR0aFNpemUsIGhlaWdodFNpemUpO1xuICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIF9yb3RhdGVIYW5kKCkge1xuICAgIHRoaXMuY3R4LnJvdGF0ZSh0aGlzLmhhbmRBbmdsZSAqIE1hdGguUEkgLyAxODApO1xuICAgIGlmICh0aGlzLndlYXBvbi5hdHRhY2sgJiYgdGhpcy5oYW5kQW5nbGUgPiAtdGhpcy5jZmcuYXJtcy5hdHRhY2suYW5nbGUpIHtcbiAgICAgIHRoaXMuaGFuZEFuZ2xlIC09IHRoaXMuY2ZnLmFybXMuYXR0YWNrLnN0ZXA7XG4gICAgfSBlbHNlIGlmICghdGhpcy53ZWFwb24uYXR0YWNrICYmIHRoaXMuaGFuZEFuZ2xlIDwgMCkge1xuICAgICAgdGhpcy5oYW5kQW5nbGUgKz0gdGhpcy5jZmcuYXJtcy5hdHRhY2suc3RlcDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFuZEFuZ2xlICE9PSAwKSB7XG4gICAgICB0aGlzLmN0eC5zY2FsZSgtMSwgMSk7XG4gICAgfVxuICB9XG5cbiAgZHJhd1JpZ2h0QXJtKCkge1xuICAgIGNvbnN0IGhlaWdodFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQgKiBDT05GSUcuYXJtcy5yYXRpby5yaWdodC5oZWlnaHRcbiAgICAgIC0gdGhpcy5icmVhdGguY3VycmVudDtcbiAgICBjb25zdCB3aWR0aFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIENPTkZJRy5hcm1zLnJhdGlvLnJpZ2h0LndpZHRoO1xuICAgIGNvbnN0IHdpZHRoU2l6ZSA9IHRoaXMucmlnaHRBcm0ud2lkdGggLyBDT05GSUcuc2NhbGVSYXRpb247XG4gICAgY29uc3QgaGVpZ2h0U2l6ZSA9IHRoaXMucmlnaHRBcm0uaGVpZ2h0IC8gQ09ORklHLnNjYWxlUmF0aW9uO1xuICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcbiAgICAgIHRoaXMucmlnaHRBcm0sXG4gICAgICB3aWR0aFBvc2l0aW9uLCBoZWlnaHRQb3NpdGlvbixcbiAgICAgIHdpZHRoU2l6ZSwgaGVpZ2h0U2l6ZSxcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGdldFBhdGgodHlwZSkge1xuICAgIHJldHVybiBDT05GSUcuaW1hZ2UucGF0aCArIHR5cGUgKyBDT05GSUcuaW1hZ2UuZXh0O1xuICB9XG59XG4iLCJjb25zdCBDT05GSUcgPSB7XG4gIGltYWdlczoge1xuICAgIGNvdW50OiA1LFxuICAgIHN0YXJ0OiAxLFxuICAgIHNjYWxlOiAxLFxuICAgIHVwZGF0ZUludGVydmFsOiA1LFxuICAgIHBhdGg6ICcuL2ltYWdlcy9tYWdpYy9tYWdpY18nLFxuICAgIGV4dDogJy5wbmcnLFxuICB9LFxuICBhdWRpbzoge1xuICAgIHBhdGg6ICcuL2F1ZGlvL21hZ2ljX2F0dGFjay5tcDMnLFxuICB9LFxuICBzdGVwOiA1LFxuICB0aW1lOiAyLFxuICBudW1iZXJPZk1pbGxpc0luU2Vjb25kOiAxMDAwLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFnaWMge1xuICBjb25zdHJ1Y3RvcihjdHgpIHtcbiAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICB0aGlzLmF0dGFjayA9IGZhbHNlO1xuICAgIHRoaXMuaW5kZXggPSBDT05GSUcuaW1hZ2VzLnN0YXJ0O1xuICAgIHRoaXMudXBkYXRlSW50ZXJ2YWwgPSAwO1xuICAgIHRoaXMuaW1hZ2VzID0gW107XG4gICAgdGhpcy5sb2FkSW1hZ2VzKCk7XG4gICAgdGhpcy5hdWRpbyA9IG5ldyBBdWRpbyhDT05GSUcuYXVkaW8ucGF0aCk7XG4gIH1cblxuICBwZXJmb3JtQXR0YWNrKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5hdHRhY2sgPSB0cnVlO1xuICAgIHRoaXMuc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICByZXR1cm4gdGhpcy5kcmF3KGNhbGxiYWNrKTtcbiAgfVxuXG4gIGRyYXcoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMuX3BsYXkoKTtcbiAgICAgIHRoaXMuX2RyYXcoY2FsbGJhY2ssIHJlc29sdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgX3BsYXkoKSB7XG4gICAgdGhpcy5hdWRpby5wbGF5KCk7XG4gIH1cblxuICBfZHJhdyhjYWxsYmFjaywgcmVzb2x2ZSkge1xuICAgIGlmICh0aGlzLnJlcUlkKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJlcUlkKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYXR0YWNrKSB7XG4gICAgICBpZiAodGhpcy5fZ2V0RXhlY3Rpb25UaW1lKCkgPj0gQ09ORklHLnRpbWUpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IENPTkZJRy5pbWFnZXMuc3RhcnQ7XG4gICAgICAgIHRoaXMudXBkYXRlSW50ZXJ2YWwgPSAwO1xuICAgICAgICB0aGlzLmF0dGFjayA9IGZhbHNlO1xuICAgICAgICB0aGlzLmF1ZGlvLnBhdXNlKCk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmluZGV4ID4gQ09ORklHLmltYWdlcy5jb3VudCkge1xuICAgICAgICB0aGlzLmluZGV4ID0gQ09ORklHLmltYWdlcy5zdGFydDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGltZyA9IHRoaXMuaW1hZ2VzW3RoaXMuaW5kZXhdO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gaW1nLmhlaWdodCAqIENPTkZJRy5pbWFnZXMuc2NhbGU7XG4gICAgICBjb25zdCB3aWR0aCA9IGltZy53aWR0aCAqIENPTkZJRy5pbWFnZXMuc2NhbGU7XG4gICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoaW1nLCB0aGlzLnBvaW50LndpZHRoLCB0aGlzLnBvaW50LmhlaWdodCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBpZiAodGhpcy51cGRhdGVJbnRlcnZhbCA9PT0gQ09ORklHLmltYWdlcy51cGRhdGVJbnRlcnZhbCkge1xuICAgICAgICB0aGlzLmluZGV4ICs9IDE7XG4gICAgICAgIHRoaXMudXBkYXRlSW50ZXJ2YWwgPSAwO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVJbnRlcnZhbCArPSAxO1xuICAgIH1cbiAgICB0aGlzLnJlcUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLl9kcmF3KGNhbGxiYWNrLCByZXNvbHZlKSk7XG4gIH1cblxuICBfZ2V0RXhlY3Rpb25UaW1lKCkge1xuICAgIHJldHVybiAocGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLnN0YXJ0KSAvIENPTkZJRy5udW1iZXJPZk1pbGxpc0luU2Vjb25kO1xuICB9XG5cbiAgbG9hZEltYWdlcygpIHtcbiAgICBmb3IgKGxldCBpID0gQ09ORklHLmltYWdlcy5zdGFydDsgaSA8PSBDT05GSUcuaW1hZ2VzLmNvdW50OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICBpbWFnZS5zcmMgPSBDT05GSUcuaW1hZ2VzLnBhdGggKyBpICsgQ09ORklHLmltYWdlcy5leHQ7XG4gICAgICB0aGlzLmltYWdlc1tpXSA9IGltYWdlO1xuICAgIH1cbiAgfVxuXG4gIHNldCBzaG93KGF0dGFjaykge1xuICAgIHRoaXMuYXR0YWNrID0gYXR0YWNrO1xuICB9XG5cbiAgc2V0IHBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgdGhpcy5wb2ludCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocG9zaXRpb24pKTtcbiAgfVxufVxuIiwiaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uL3NlcnZpY2VzL3V0aWwnO1xuaW1wb3J0IENPTkZJRyBmcm9tICcuL2ZpbGVzL2NvbmZpZy5qc29uJztcblxuaW1wb3J0IEFic3RyYWN0Q2hhcmFjdGVyIGZyb20gJy4uL2NoYXJhY3Rlcic7XG5cbmltcG9ydCBNYWdpYyBmcm9tICcuLi9tYWdpYyc7XG5cbmNvbnN0IENPTlNUQU5UUyA9IHtcbiAgcG9zaXRpb246IHtcbiAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAqIChDT05GSUcuYXJtcy5hdHRhY2sucG9zaXRpb24uaGVpZ2h0KSxcbiAgICB3aWR0aDogZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIENPTkZJRy5hcm1zLmF0dGFjay5wb3NpdGlvbi53aWR0aCxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vbnN0ZXJDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKGNhbnZhc0NvbnRleHQsIG5hbWUpIHtcbiAgICBzdXBlcihuYW1lLCBjYW52YXNDb250ZXh0LCBDT05GSUcpO1xuICAgIHRoaXMud2VhcG9uID0gdGhpcy5pbml0V2VhcG9uQ29tcG9uZW50KCk7XG4gICAgdGhpcy5idWlsZCgpO1xuICB9XG5cbiAgaW5pdFdlYXBvbkNvbXBvbmVudCgpIHtcbiAgICBjb25zdCB3ZWFwb24gPSBuZXcgTWFnaWModGhpcy5jdHgpO1xuICAgIHdlYXBvbi5wb3NpdGlvbiA9IENPTlNUQU5UUy5wb3NpdGlvbjtcbiAgICByZXR1cm4gd2VhcG9uO1xuICB9XG5cbiAgYXN5bmMgYXR0YWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMud2VhcG9uLnBlcmZvcm1BdHRhY2soY2FsbGJhY2spO1xuICB9XG5cbiAgYnVpbGQoKSB7XG4gICAgdGhpcy5sZWdzID0gdGhpcy5sb2FkUmFuZG9tKENPTkZJRy5sZWdzLmltYWdlKTtcbiAgICB0aGlzLmxlZnRBcm0gPSB0aGlzLmxvYWRSYW5kb20oQ09ORklHLmFybXMuaW1hZ2UpO1xuICAgIHRoaXMuYm9keSA9IHRoaXMubG9hZFJhbmRvbShDT05GSUcuYm9keS5pbWFnZSk7XG4gICAgdGhpcy5oZWFkID0gdGhpcy5sb2FkUmFuZG9tKENPTkZJRy5oZWFkLmltYWdlKTtcbiAgICB0aGlzLnJpZ2h0QXJtID0gdGhpcy5sb2FkUmFuZG9tKENPTkZJRy5hcm1zLmltYWdlKTtcbiAgICB0aGlzLmRlYWQgPSB0aGlzLmxvYWQoTW9uc3RlckNvbXBvbmVudC5nZXRQYXRoKENPTkZJRy5kZWF0aC5pbWFnZSwgJycpKTtcbiAgfVxuXG4gIGxvYWRSYW5kb20odHlwZSkge1xuICAgIHJldHVybiB0aGlzLmxvYWQoTW9uc3RlckNvbXBvbmVudC5nZXRSYW5kb21QYXRoKHR5cGUpKTtcbiAgfVxuXG4gIGxvYWQocGF0aCkge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgaW1hZ2Uuc3JjID0gcGF0aDtcbiAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB0aGlzLm9uSW1hZ2VMb2FkZWQoKTtcbiAgICByZXR1cm4gaW1hZ2U7XG4gIH1cblxuICBvbkltYWdlTG9hZGVkKCkge1xuICAgIHRoaXMuaW1hZ2VzTG9hZGVkQ291bnQgKz0gMTtcbiAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWRDb3VudCA9PT0gQ09ORklHLm51bWJlck9mUGFydHMpIHtcbiAgICAgIHRoaXMuZHJhdygpO1xuICAgIH1cbiAgfVxuXG4gIGRyYXdIZWFkKCkge1xuICAgIGNvbnN0IGhlaWdodFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQgKiBDT05GSUcuaGVhZC5yYXRpby5oZWlnaHRcbiAgICAgIC0gdGhpcy5icmVhdGguY3VycmVudDtcbiAgICBjb25zdCB3aWR0aFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIENPTkZJRy5oZWFkLnJhdGlvLndpZHRoO1xuICAgIHRoaXMuY3R4LmRyYXdJbWFnZSh0aGlzLmhlYWQsIHdpZHRoUG9zaXRpb24sIGhlaWdodFBvc2l0aW9uKTtcbiAgfVxuXG4gIGRyYXdCb2R5KCkge1xuICAgIGNvbnN0IGhlaWdodFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQgKiBDT05GSUcuYm9keS5yYXRpby5oZWlnaHQ7XG4gICAgY29uc3Qgd2lkdGhQb3NpdGlvbiA9IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggKiBDT05GSUcuYm9keS5yYXRpby53aWR0aDtcbiAgICB0aGlzLmN0eC5kcmF3SW1hZ2UodGhpcy5ib2R5LCB3aWR0aFBvc2l0aW9uLCBoZWlnaHRQb3NpdGlvbik7XG4gIH1cblxuICBkcmF3TGVncygpIHtcbiAgICBjb25zdCBoZWlnaHRQb3NpdGlvbiA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0ICogQ09ORklHLmxlZ3MucmF0aW8uaGVpZ2h0O1xuICAgIGNvbnN0IHdpZHRoUG9zaXRpb24gPSBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoICogQ09ORklHLmxlZ3MucmF0aW8ud2lkdGg7XG4gICAgdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMubGVncywgd2lkdGhQb3NpdGlvbiwgaGVpZ2h0UG9zaXRpb24pO1xuICB9XG5cbiAgZHJhd0xlZnRBcm0oKSB7XG4gICAgY29uc3QgYXJtV2lkdGggPSB0aGlzLmxlZnRBcm0ud2lkdGggLSBDT05GSUcuYXJtcy5wb3NpdGlvbi5sZWZ0LndpZHRoO1xuICAgIGNvbnN0IGhlaWdodFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQgKiBDT05GSUcuYXJtcy5yYXRpby5sZWZ0LmhlaWdodFxuICAgICAgLSB0aGlzLmJyZWF0aC5jdXJyZW50O1xuICAgIGNvbnN0IHdpZHRoUG9zaXRpb24gPSBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoICogQ09ORklHLmFybXMucmF0aW8ubGVmdC53aWR0aDtcbiAgICB0aGlzLmN0eC50cmFuc2xhdGUod2lkdGhQb3NpdGlvbiArIGFybVdpZHRoLCBoZWlnaHRQb3NpdGlvbik7XG4gICAgdGhpcy5fcm90YXRlSGFuZCgpO1xuICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcbiAgICAgIHRoaXMubGVmdEFybSxcbiAgICAgIENPTkZJRy5hcm1zLnBvc2l0aW9uLmxlZnQud2lkdGgsIDAsXG4gICAgICBhcm1XaWR0aCwgdGhpcy5sZWZ0QXJtLmhlaWdodCxcbiAgICAgIC1hcm1XaWR0aCwgMCxcbiAgICAgIGFybVdpZHRoLCB0aGlzLmxlZnRBcm0uaGVpZ2h0LFxuICAgICk7XG4gICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgX3JvdGF0ZUhhbmQoKSB7XG4gICAgdGhpcy5jdHgucm90YXRlKHRoaXMuaGFuZEFuZ2xlICogTWF0aC5QSSAvIDE4MCk7XG4gICAgaWYgKHRoaXMud2VhcG9uLmF0dGFjayAmJiB0aGlzLmhhbmRBbmdsZSA8IHRoaXMuY2ZnLmFybXMuYXR0YWNrLmFuZ2xlKSB7XG4gICAgICB0aGlzLmhhbmRBbmdsZSArPSB0aGlzLmNmZy5hcm1zLmF0dGFjay5zdGVwO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMud2VhcG9uLmF0dGFjayAmJiB0aGlzLmhhbmRBbmdsZSA+IDApIHtcbiAgICAgIHRoaXMuaGFuZEFuZ2xlIC09IHRoaXMuY2ZnLmFybXMuYXR0YWNrLnN0ZXA7XG4gICAgfVxuICB9XG5cbiAgZHJhd1JpZ2h0QXJtKCkge1xuICAgIGNvbnN0IGhlaWdodFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQgKiBDT05GSUcuYXJtcy5yYXRpby5yaWdodC5oZWlnaHRcbiAgICAgIC0gdGhpcy5icmVhdGguY3VycmVudDtcbiAgICBjb25zdCB3aWR0aFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIENPTkZJRy5hcm1zLnJhdGlvLnJpZ2h0LndpZHRoO1xuICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcbiAgICAgIHRoaXMucmlnaHRBcm0sXG4gICAgICAwLCAwLFxuICAgICAgQ09ORklHLmFybXMucG9zaXRpb24ucmlnaHQud2lkdGgsIHRoaXMucmlnaHRBcm0uaGVpZ2h0LFxuICAgICAgd2lkdGhQb3NpdGlvbiwgaGVpZ2h0UG9zaXRpb24sXG4gICAgICBDT05GSUcuYXJtcy5wb3NpdGlvbi5yaWdodC53aWR0aCwgdGhpcy5yaWdodEFybS5oZWlnaHQsXG4gICAgKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRQYXRoKHR5cGUsIGluZGV4KSB7XG4gICAgcmV0dXJuIENPTkZJRy5pbWFnZS5wYXRoICsgdHlwZSArIGluZGV4ICsgQ09ORklHLmltYWdlLmV4dDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRSYW5kb21QYXRoKHR5cGUpIHtcbiAgICByZXR1cm4gTW9uc3RlckNvbXBvbmVudC5nZXRQYXRoKHR5cGUsIFV0aWxzLnJhbmRvbShDT05GSUcubnVtYmVyT2ZNb25zdGVycykpO1xuICB9XG59XG4iLCJpbXBvcnQgJy4vaW5kZXguY3NzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2luZGV4LnRlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDT05TVCA9IHtcbiAgbW9kYWxXaW5kb3dDb250YWluZXI6ICdkaXYnLFxuICBjb250ZW50RWxlbWVudDogJy5tb2RhbF9jb250ZW50Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsV2luZG93Q29tcG9uZW50IHtcbiAgc2hvdygpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoQ09OU1QubW9kYWxXaW5kb3dDb250YWluZXIpO1xuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpO1xuICAgIHRoaXMubW9kYWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKENPTlNULmNvbnRlbnRFbGVtZW50KTtcbiAgfVxuXG4gIGNsZWFuKCkge1xuICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgTW9kYWxXaW5kb3dDb21wb25lbnQgZnJvbSAnLi4vLi4vbW9kYWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBYnN0cmFjdFRhc2tDb21wb25lbnQgZXh0ZW5kcyBNb2RhbFdpbmRvd0NvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKCFuZXcudGFyZ2V0KSB7XG4gICAgICB0aHJvdyBFcnJvcignSXQgaXMgbm90IGFsbG93ZWQgdG8gY3JlYXRlIGRpcmVjdCBpbnN0YW5jZSBvZiAgQWJzdHJhY3RUYXNrQ29tcG9uZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZSgpIHtcbiAgICB0aGlzLnNob3coKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnByb2Nlc3MoKTtcbiAgICB0aGlzLmNsZWFuKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vaW5kZXgudGVtcGxhdGUuaHRtbCc7XG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuaW1wb3J0IEFic3RyYWN0VGFzayBmcm9tICcuLi9iYXNlJztcbmltcG9ydCBNYXRoU2VydmljZSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9tYXRoJztcblxuY29uc3QgQ09OU1QgPSB7XG4gIHRhc2s6IHtcbiAgICBkZXNjcmlwdGlvbjogJy50YXNrX2Rlc2NyaXB0aW9uJyxcbiAgICBpbnB1dDogJy50YXNrX2lucHV0JyxcbiAgICBzdWJtaXQ6ICcudGFza19zdWJtaXQnLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0aFRhc2tDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdFRhc2sge1xuICBzaG93KCkge1xuICAgIHN1cGVyLnNob3coKTtcbiAgICB0aGlzLm1vZGFsLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICB9XG5cbiAgcHJvY2VzcygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sZXZlKSA9PiB7XG4gICAgICBjb25zdCB0YXNrID0gTWF0aFNlcnZpY2UuZ2V0UmFuZG9tVGFzaygpO1xuICAgICAgY29uc3QgaW5wdXQgPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoQ09OU1QudGFzay5pbnB1dCk7XG4gICAgICB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoQ09OU1QudGFzay5kZXNjcmlwdGlvbikuaW5uZXJIVE1MID0gdGFzaztcbiAgICAgIHRoaXMubW9kYWwucXVlcnlTZWxlY3RvcihDT05TVC50YXNrLnN1Ym1pdCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IHBhcnNlSW50KGlucHV0LnZhbHVlLCAxMCk7XG4gICAgICAgIGlmIChNYXRoU2VydmljZS5pc0Fuc3dlclZhbGlkKHRhc2ssIGFuc3dlcikpIHtcbiAgICAgICAgICByZXNvbGV2ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbGV2ZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IGNvbmZpZyBmcm9tICcuL2ZpbGVzL2NvbmZpZy5qc29uJztcbmltcG9ydCBVdGlscyBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNsYXRpb25TZXJ2aWNlIHtcbiAgc3RhdGljIGdldFJhbmRvbVRhc2soKSB7XG4gICAgY29uc3QgdGFza0luZGV4ID0gVXRpbHMucmFuZG9tKGNvbmZpZy5kaWN0aW9uYXJ5Lmxlbmd0aCk7XG4gICAgcmV0dXJuIGNvbmZpZy5kaWN0aW9uYXJ5W3Rhc2tJbmRleF0ud29yZDtcbiAgfVxuXG4gIHN0YXRpYyBpc0Fuc3dlclZhbGlkKHRhc2ssIGFuc3dlcikge1xuICAgIGNvbnN0IGV4cGVjdGVkID0gVXRpbHMubm9ybWFsaXplVGV4dChhbnN3ZXIpO1xuICAgIHJldHVybiBjb25maWcuZGljdGlvbmFyeVxuICAgICAgLmZpbHRlcihlID0+IGUud29yZCA9PT0gdGFzaylcbiAgICAgIC5mbGF0TWFwKGUgPT4gZS50cmFuc2xhdGlvbnMpXG4gICAgICAuc29tZSh0ID0+IHQgPT09IGV4cGVjdGVkKTtcbiAgfVxufVxuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vaW5kZXgudGVtcGxhdGUuaHRtbCc7XG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuaW1wb3J0IEFic3RyYWN0VGFza0NvbXBvbmVudCBmcm9tICcuLi9iYXNlJztcbmltcG9ydCBUcmFuc2xhdGlvblNlcnZpY2UgZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvdHJhbnNsYXRpb24nO1xuXG5jb25zdCBDT05TVCA9IHtcbiAgdGFzazoge1xuICAgIGRlc2NyaXB0aW9uOiAnLnRhc2tfZGVzY3JpcHRpb24nLFxuICAgIGlucHV0OiAnLnRhc2tfaW5wdXQnLFxuICAgIHN1Ym1pdDogJy50YXNrX3N1Ym1pdCcsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFubHNhdGlvblRhc2tDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdFRhc2tDb21wb25lbnQge1xuICBzaG93KCkge1xuICAgIHN1cGVyLnNob3coKTtcbiAgICB0aGlzLm1vZGFsLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICB9XG5cbiAgcHJvY2VzcygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sZXZlKSA9PiB7XG4gICAgICBjb25zdCB0YXNrID0gVHJhbnNsYXRpb25TZXJ2aWNlLmdldFJhbmRvbVRhc2soKTtcbiAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5tb2RhbC5xdWVyeVNlbGVjdG9yKENPTlNULnRhc2suaW5wdXQpO1xuICAgICAgdGhpcy5tb2RhbC5xdWVyeVNlbGVjdG9yKENPTlNULnRhc2suZGVzY3JpcHRpb24pLmlubmVySFRNTCA9IHRhc2s7XG4gICAgICB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoQ09OU1QudGFzay5zdWJtaXQpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBpZiAoVHJhbnNsYXRpb25TZXJ2aWNlLmlzQW5zd2VyVmFsaWQodGFzaywgaW5wdXQudmFsdWUpKSB7XG4gICAgICAgICAgcmVzb2xldmUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2xldmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBjb25maWcgZnJvbSAnLi9maWxlcy9jb25maWcuanNvbic7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwZWVjaFNlcnZpY2Uge1xuICBzdGF0aWMgZ2V0UmFuZG9tVGFzaygpIHtcbiAgICBjb25zdCB0YXNrSW5kZXggPSBVdGlscy5yYW5kb20oY29uZmlnLndvcmRzLmxlbmd0aCk7XG4gICAgcmV0dXJuIGNvbmZpZy53b3Jkc1t0YXNrSW5kZXhdO1xuICB9XG5cbiAgc3RhdGljIGlzQW5zd2VyVmFsaWQodGFzaywgYW5zd2VyKSB7XG4gICAgY29uc3QgZXhwZWN0ZWQgPSBVdGlscy5ub3JtYWxpemVUZXh0KGFuc3dlcik7XG4gICAgcmV0dXJuIHRhc2sgPT09IGV4cGVjdGVkXG4gICAgICAmJiBjb25maWcud29yZHMuc29tZSh3b3JkID0+IHdvcmQgPT09IHRhc2spO1xuICB9XG5cbiAgc3RhdGljIHByb25vdW5jZSh3b3JkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCB1dHRlcmFuY2UgPSBuZXcgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlKFV0aWxzLm5vcm1hbGl6ZVRleHQod29yZCkpO1xuICAgICAgdXR0ZXJhbmNlLm9uZW5kID0gKCkgPT4gcmVzb2x2ZSgpO1xuICAgICAgd2luZG93LnNwZWVjaFN5bnRoZXNpcy5jYW5jZWwoKTtcbiAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuc3BlYWsodXR0ZXJhbmNlKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vaW5kZXgudGVtcGxhdGUuaHRtbCc7XG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuaW1wb3J0IEFic3RyYWN0VGFza0NvbXBvbmVudCBmcm9tICcuLi9iYXNlJztcbmltcG9ydCBTcGVlY2hTZXJ2aWNlIGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3NwZWVjaCc7XG5cbmNvbnN0IENPTlNUID0ge1xuICB0YXNrOiB7XG4gICAgaW5wdXQ6ICcudGFza19pbnB1dCcsXG4gICAgc3VibWl0OiAnLnRhc2tfc3VibWl0JyxcbiAgICBwbGF5OiAnLnRhc2tfcGxheScsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdWRpdGlvblRhc2tDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdFRhc2tDb21wb25lbnQge1xuICBzaG93KCkge1xuICAgIHN1cGVyLnNob3coKTtcbiAgICB0aGlzLm1vZGFsLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICB9XG5cbiAgcHJvY2VzcygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sZXZlKSA9PiB7XG4gICAgICBjb25zdCB0YXNrID0gU3BlZWNoU2VydmljZS5nZXRSYW5kb21UYXNrKCk7XG4gICAgICBjb25zdCBpbnB1dCA9IHRoaXMubW9kYWwucXVlcnlTZWxlY3RvcihDT05TVC50YXNrLmlucHV0KTtcbiAgICAgIHRoaXMubW9kYWwucXVlcnlTZWxlY3RvcihDT05TVC50YXNrLnN1Ym1pdCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmIChTcGVlY2hTZXJ2aWNlLmlzQW5zd2VyVmFsaWQodGFzaywgaW5wdXQudmFsdWUpKSB7XG4gICAgICAgICAgcmVzb2xldmUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2xldmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoQ09OU1QudGFzay5wbGF5KS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXG4gICAgICAgIGFzeW5jICgpID0+IFNwZWVjaFNlcnZpY2UucHJvbm91bmNlKHRhc2spKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IGNvbmZpZyBmcm9tICcuL2ZpbGVzL2NvbmZpZy5qc29uJztcbmltcG9ydCBVdGlscyBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29yZFNlcnZpY2Uge1xuICBzdGF0aWMgZ2V0UmFuZG9tVGFzaygpIHtcbiAgICBjb25zdCB3b3JkID0gY29uZmlnLndvcmRzW1V0aWxzLnJhbmRvbShjb25maWcud29yZHMubGVuZ3RoIC0gMSldO1xuICAgIGNvbnN0IGxldHRlckFycmF5ID0gd29yZC50cmltKCkuc3BsaXQoJycpO1xuICAgIHJldHVybiBVdGlscy5zaHVmZmxlKGxldHRlckFycmF5KTtcbiAgfVxuXG4gIHN0YXRpYyBpc0Fuc3dlclZhbGlkKGFuc3dlcikge1xuICAgIHJldHVybiBjb25maWcud29yZHMuaW5kZXhPZihVdGlscy5ub3JtYWxpemVUZXh0KGFuc3dlcikpICE9PSAtMTtcbiAgfVxufVxuIiwiaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9pbmRleC50ZW1wbGF0ZS5odG1sJztcblxuaW1wb3J0IEFic3RyYWN0VGFza0NvbXBvbmVudCBmcm9tICcuLi9iYXNlJztcbmltcG9ydCBXb3JkU2VydmljZSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy93b3Jkcyc7XG5cbmNvbnN0IENPTlNUID0ge1xuICBsZXR0ZXI6IHtcbiAgICBjb250YWluZXI6ICcubGV0dGVyX2NvbnRhaW5lcicsXG4gICAgYXR0cmlidXRlOiB7IG5hbWU6ICdkcmFnZ2FibGUnLCB2YWx1ZTogdHJ1ZSB9LFxuICAgIHNlbGVjdG9yOiAnLmxldHRlcicsXG4gICAgdmFsdWVDbGFzczogJ2xldHRlcl92YWx1ZScsXG4gICAgdmFsdWVTZWxlY3RvcjogJy5sZXR0ZXJfdmFsdWUnLFxuICB9LFxuICB0YXNrOiB7XG4gICAgZGVzY3JpcHRpb246ICcudGFza19kZXNjcmlwdGlvbicsXG4gICAgc3VibWl0OiAnLnRhc2tfc3VibWl0JyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvcmRUYXNrQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RUYXNrQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmxldHRlcnMgPSBbXTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgc3VwZXIuc2hvdygpO1xuICAgIHRoaXMubW9kYWwuaW5uZXJIVE1MID0gdGVtcGxhdGU7XG4gIH1cblxuICBwcm9jZXNzKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2xldmUpID0+IHtcbiAgICAgIHRoaXMuX2Rpc3BsYXlUYXNrKCk7XG4gICAgICB0aGlzLl9hcHBseUxpc3RlbmVycygpO1xuICAgICAgdGhpcy5tb2RhbC5xdWVyeVNlbGVjdG9yKENPTlNULnRhc2suc3VibWl0KS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgaWYgKFdvcmRTZXJ2aWNlLmlzQW5zd2VyVmFsaWQodGhpcy5fYnVpbGRBbnN3ZXIoKSkpIHtcbiAgICAgICAgICByZXNvbGV2ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbGV2ZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFuKCkge1xuICAgIHN1cGVyLmNsZWFuKCk7XG4gICAgLy8gY2xlYW4gbGlzdGVuZXJzXG4gIH1cblxuICBfYXBwbHlMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5tb2RhbC5xdWVyeVNlbGVjdG9yKENPTlNULmxldHRlci5jb250YWluZXIpO1xuICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLl9kcmFnU3RhcnQuYmluZCh0aGlzKSk7XG4gICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5fZHJhZ092ZXIuYmluZCh0aGlzKSk7XG4gICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIHRoaXMuX2RyYWdFbnRlci5iaW5kKHRoaXMpKTtcbiAgICBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChDT05TVC5sZXR0ZXIudmFsdWVTZWxlY3RvcikuZm9yRWFjaCgobGV0dGVyKSA9PiB7XG4gICAgICBsZXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIHRoaXMuX2RyYWdEcm9wLmJpbmQodGhpcykpO1xuICAgIH0pO1xuICB9XG5cbiAgX2RyYWdTdGFydChldmVudCkge1xuICAgIGNvbnN0IHZhbHVlID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoQ09OU1QubGV0dGVyLnZhbHVlU2VsZWN0b3IpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5pbmRleCA9IHRoaXMuX2dldEluZGV4T2ZMZXR0ZXIodmFsdWUpO1xuICAgICAgdGhpcy50bXBBcnJheSA9IFsuLi50aGlzLmxldHRlcnNdO1xuICAgIH1cbiAgfVxuXG4gIF9kcmFnT3ZlcihldmVudCkge1xuICAgIGNvbnN0IHZhbHVlID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoQ09OU1QubGV0dGVyLnZhbHVlU2VsZWN0b3IpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBfZHJhZ0VudGVyKGV2ZW50KSB7XG4gICAgY29uc3QgdmFsdWUgPSBldmVudC50YXJnZXQuY2xvc2VzdChDT05TVC5sZXR0ZXIudmFsdWVTZWxlY3Rvcik7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgY3VycmVudEVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEluZGV4T2ZMZXR0ZXIodmFsdWUpO1xuICAgICAgaWYgKGN1cnJlbnRFbGVtZW50SW5kZXggIT09IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgbGV0IG90aGVyID0gdGhpcy50bXBBcnJheS5zbGljZSgwLCB0aGlzLmluZGV4KTtcbiAgICAgICAgb3RoZXIgPSBvdGhlci5jb25jYXQodGhpcy50bXBBcnJheS5zbGljZSh0aGlzLmluZGV4ICsgMSkpO1xuICAgICAgICB0aGlzLnRtcEFycmF5ID0gW1xuICAgICAgICAgIC4uLm90aGVyLnNsaWNlKDAsIGN1cnJlbnRFbGVtZW50SW5kZXgpLFxuICAgICAgICAgIHRoaXMudG1wQXJyYXlbdGhpcy5pbmRleF0sXG4gICAgICAgICAgLi4ub3RoZXIuc2xpY2UoY3VycmVudEVsZW1lbnRJbmRleCksXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuaW5kZXggPSBjdXJyZW50RWxlbWVudEluZGV4O1xuICAgICAgICB0aGlzLl91cGRhdGVWYWx1ZXModGhpcy50bXBBcnJheSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3VwZGF0ZVZhbHVlcyh2YWx1ZXMpIHtcbiAgICB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3JBbGwoQ09OU1QubGV0dGVyLnZhbHVlU2VsZWN0b3IpXG4gICAgICAuZm9yRWFjaCgoZSwgaW5kZXgpID0+IHtcbiAgICAgICAgZS5pbm5lckhUTUwgPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgfSk7XG4gIH1cblxuICBfZHJhZ0Ryb3AoZXZlbnQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KENPTlNULmxldHRlci52YWx1ZVNlbGVjdG9yKTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMubGV0dGVycyA9IHRoaXMudG1wQXJyYXk7XG4gICAgfVxuICB9XG5cbiAgX2dldEluZGV4T2ZMZXR0ZXIoZWxlbWVudCkge1xuICAgIGxldCByZXN1bHRJbmRleCA9IC0xO1xuICAgIHRoaXMubW9kYWwucXVlcnlTZWxlY3RvckFsbChDT05TVC5sZXR0ZXIudmFsdWVTZWxlY3RvcilcbiAgICAgIC5mb3JFYWNoKChlLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoZSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgIHJlc3VsdEluZGV4ID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRJbmRleDtcbiAgfVxuXG4gIF9kaXNwbGF5VGFzaygpIHtcbiAgICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICB0aGlzLmxldHRlcnMgPSBXb3JkU2VydmljZS5nZXRSYW5kb21UYXNrKCk7XG4gICAgdGhpcy5sZXR0ZXJzLmZvckVhY2goKGxldHRlcikgPT4ge1xuICAgICAgY29uc3QgbGV0dGVyRWxlbWVudCA9IHRoaXMuX2J1aWxkTGV0dGVyRWxlbWVudChsZXR0ZXIpO1xuICAgICAgZnJhZ21lbnQuYXBwZW5kKGxldHRlckVsZW1lbnQpO1xuICAgIH0pO1xuICAgIGNvbnN0IGxldHRlcnNDb250YWluZXIgPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoQ09OU1QubGV0dGVyLmNvbnRhaW5lcik7XG4gICAgbGV0dGVyc0NvbnRhaW5lci5hcHBlbmQoZnJhZ21lbnQpO1xuICB9XG5cbiAgX2J1aWxkTGV0dGVyRWxlbWVudCh2YWx1ZSkge1xuICAgIGNvbnN0IGxldHRlciA9IHRoaXMuX2J1aWxkRWxlbWVudFdpdGhDbGFzc2VzKCdzcGFuJywgQ09OU1QubGV0dGVyLnZhbHVlQ2xhc3MpO1xuICAgIGxldHRlci5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICBsZXR0ZXIuc2V0QXR0cmlidXRlKENPTlNULmxldHRlci5hdHRyaWJ1dGUubmFtZSwgQ09OU1QubGV0dGVyLmF0dHJpYnV0ZS52YWx1ZSk7XG4gICAgY29uc3QgbGV0dGVyQ29udGFpbmVyID0gdGhpcy5fYnVpbGRFbGVtZW50V2l0aENsYXNzZXMoJ2RpdicsICdsZXR0ZXInKTtcbiAgICBsZXR0ZXJDb250YWluZXIuYXBwZW5kKGxldHRlcik7XG4gICAgcmV0dXJuIGxldHRlckNvbnRhaW5lcjtcbiAgfVxuXG4gIF9idWlsZEVsZW1lbnRXaXRoQ2xhc3NlcyhuYW1lLCAuLi5jbGFzc2VzKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG4gICAgaWYgKGNsYXNzZXMgJiYgY2xhc3Nlcy5sZW5ndGggIT09IDApIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc2VzKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBfYnVpbGRBbnN3ZXIoKSB7XG4gICAgY29uc3QgbGV0dGVycyA9IHRoaXMubW9kYWwucXVlcnlTZWxlY3RvcihDT05TVC5sZXR0ZXIuY29udGFpbmVyKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoQ09OU1QubGV0dGVyLnNlbGVjdG9yKTtcbiAgICBsZXQgYW5zd2VyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZXR0ZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBhbnN3ZXIgKz0gbGV0dGVyc1tpXS50ZXh0Q29udGVudDtcbiAgICB9XG4gICAgcmV0dXJuIGFuc3dlcjtcbiAgfVxufVxuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vaW5kZXgudGVtcGxhdGUuaHRtbCc7XG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuaW1wb3J0IE1vZGFsV2luZG93Q29tcG9uZW50IGZyb20gJy4uL21vZGFsJztcbmltcG9ydCBNYXRoVGFza0NvbXBvbmVudCBmcm9tICcuLi90YXNrcy9tYXRoJztcbmltcG9ydCBUcmFubHNhdGlvblRhc2tDb21wb25lbnQgZnJvbSAnLi4vdGFza3MvdHJhbnNsYXRlJztcbmltcG9ydCBBdWRpdGlvblRhc2tDb21wb25lbnQgZnJvbSAnLi4vdGFza3MvYXVkaXRpb24nO1xuaW1wb3J0IFdvcmRzVGFza0NvbXBvbmVudCBmcm9tICcuLi90YXNrcy93b3Jkcyc7XG5cbmNvbnN0IENPTlNUID0ge1xuICB0YXNrU2VsZWN0b3I6ICcudGFzay1jb250YWluZXJfZWxlbWVudCcsXG4gIHRhc2tOYW1lQXR0cmlidXRlOiAnaWQnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFza0Nob29zZXJDb21wb25lbnQgZXh0ZW5kcyBNb2RhbFdpbmRvd0NvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50YXNrcyA9IHRoaXMuaW5pdFRhc2tzKCk7XG4gIH1cblxuICBpbml0VGFza3MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hdGg6IE1hdGhUYXNrQ29tcG9uZW50LFxuICAgICAgdHJhbnNsYXRpb246IFRyYW5sc2F0aW9uVGFza0NvbXBvbmVudCxcbiAgICAgIGF1ZGl0aW9uOiBBdWRpdGlvblRhc2tDb21wb25lbnQsXG4gICAgICB3b3JkOiBXb3Jkc1Rhc2tDb21wb25lbnQsXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGNob3NlQ29tcG9uZW50KCkge1xuICAgIHN1cGVyLnNob3coKTtcbiAgICB0aGlzLm1vZGFsLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgIHJldHVybiB0aGlzLmluaXRBY3Rpb25zKCk7XG4gIH1cblxuICBpbml0QWN0aW9ucygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMubW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza05hbWUgPSBldmVudC50YXJnZXQuY2xvc2VzdChDT05TVC50YXNrU2VsZWN0b3IpXG4gICAgICAgICAgLmdldEF0dHJpYnV0ZShDT05TVC50YXNrTmFtZUF0dHJpYnV0ZSk7XG4gICAgICAgIGNvbnN0IHRhc2sgPSB0aGlzLmdldEluc3RhbmNlT2ZUYXNrKHRhc2tOYW1lKTtcbiAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICB0aGlzLmNsZWFuKCk7XG4gICAgICAgICAgcmVzb2x2ZSh0YXNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRJbnN0YW5jZU9mVGFzayh0YXNrTmFtZSkge1xuICAgIGxldCB0YXNrID0gdGhpcy50YXNrc1t0YXNrTmFtZV07XG4gICAgaWYgKCF0YXNrKSB7XG4gICAgICBbdGFza10gPSB0aGlzLnRhc2tzO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0YXNrLnByb3RvdHlwZSk7XG4gIH1cbn1cbiIsImNvbnN0IENPTlNUID0ge1xuICBwb3NpdGlvbjoge1xuICAgIHdpZHRoOiAwLjEsXG4gICAgaGVpZ2h0OiAwLjEsXG4gIH0sXG4gIHRleHQ6IHtcbiAgICBwcmVmaXg6ICdMZXZlbDogJyxcbiAgICBzdHlsZTogJzQ4cHggc2VyaWYnLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGV2ZWxJbmZvQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY2FudmFzQ29udGV4dCwgc2Vzc2lvbikge1xuICAgIHRoaXMuY3R4ID0gY2FudmFzQ29udGV4dDtcbiAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uO1xuICB9XG5cbiAgZHJhdygpIHtcbiAgICB0aGlzLl9kcmF3TGV2ZWwoKTtcbiAgICB0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcbiAgfVxuXG4gIF9kcmF3TGV2ZWwoKSB7XG4gICAgY29uc3QgaGVpZ2h0UG9zaXRpb24gPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCAqIENPTlNULnBvc2l0aW9uLmhlaWdodDtcbiAgICBjb25zdCB3aWR0aFBvc2l0aW9uID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAqIENPTlNULnBvc2l0aW9uLndpZHRoO1xuXG4gICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgIHRoaXMuY3R4LmZvbnQgPSBDT05TVC50ZXh0LnN0eWxlO1xuICAgIHRoaXMuY3R4LmZpbGxUZXh0KENPTlNULnRleHQucHJlZml4ICsgdGhpcy5zZXNzaW9uLmxldmVsLCB3aWR0aFBvc2l0aW9uLCBoZWlnaHRQb3NpdGlvbik7XG4gICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgX3JlcXVlc3RBbmltYXRpb25GcmFtZSgpIHtcbiAgICB0aGlzLl9jYW5jZWxBbmltYXRpb25GcmFtZSgpO1xuICAgIHRoaXMucmVxSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5kcmF3LmJpbmQodGhpcykpO1xuICB9XG5cbiAgX2NhbmNlbEFuaW1hdGlvbkZyYW1lKCkge1xuICAgIGlmICh0aGlzLnJlcUlkKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJlcUlkKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBuYW1lQ29uZmlnIGZyb20gJy4vZmlsZXMvbmFtZXMuanNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmRvbU5hbWVHZW5lcmF0b3Ige1xuICBzdGF0aWMgYnVpbGQoKSB7XG4gICAgY29uc3QgZmlyc3ROYW1lID0gUmFuZG9tTmFtZUdlbmVyYXRvci5nZXRSYW5kb21WYWx1ZShuYW1lQ29uZmlnLmZpcnN0TmFtZSk7XG4gICAgY29uc3QgbGFzdE5hbWUgPSBSYW5kb21OYW1lR2VuZXJhdG9yLmdldFJhbmRvbVZhbHVlKG5hbWVDb25maWcubGFzdE5hbWUpO1xuICAgIGNvbnN0IG1pZGRsZU5hbWUgPSBSYW5kb21OYW1lR2VuZXJhdG9yLmdldFJhbmRvbVZhbHVlKG5hbWVDb25maWcubWlkZGxlTmFtZSk7XG4gICAgcmV0dXJuIGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZX0gJHttaWRkbGVOYW1lfWA7XG4gIH1cblxuICBzdGF0aWMgZ2V0UmFuZG9tVmFsdWUoYXJyYXkpIHtcbiAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFycmF5Lmxlbmd0aCk7XG4gICAgcmV0dXJuIGFycmF5W3JhbmRvbUluZGV4XTtcbiAgfVxufVxuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vaW5kZXgudGVtcGxhdGUuaHRtbCc7XG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuaW1wb3J0IFBlcnNvbkNvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnRzL3BlcnNvbic7XG5pbXBvcnQgTW9uc3RlckNvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnRzL21vbnN0ZXInO1xuaW1wb3J0IFRhc2tDaG9vc2VyQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvdGFza0Nob29zZXInO1xuaW1wb3J0IExldmVsSW5mb0NvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2xldmVsJztcblxuaW1wb3J0IFJhbmRvbU5hbWVHZW5lcmF0b3IgZnJvbSAnLi4vLi4vc2VydmljZXMvbmFtZSc7XG5cbmNvbnN0IENPTkZJRyA9IHtcbiAgZWxlbWVudDogJ2Rpdi5jb250YWluZXInLFxuICBjYW52YXM6ICdjYW52YXMnLFxuICBkYW1hZ2U6IDUwLFxuICBkZWFkOiAwLFxuICBpbml0aWFsTGV2ZWw6IDAsXG4gIG5leHRMZXZlbDogMSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhdHRsZSB7XG4gIHN0YXRpYyBpbml0VGVtcGxhdGUoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKENPTkZJRy5lbGVtZW50KS5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoQ09ORklHLmNhbnZhcyk7XG4gICAgY2FudmFzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoKTtcbiAgICBjYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIEJhdHRsZS5pbml0VGVtcGxhdGUoKTtcbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2NhbnZhcycpO1xuICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnRhc2tDaG9vc2VyID0gbmV3IFRhc2tDaG9vc2VyQ29tcG9uZW50KCk7XG4gICAgdGhpcy5yZWZyZXNoU2NyZWVuKCk7XG4gIH1cblxuICBhc3luYyBzdGFydChzZXNzaW9uKSB7XG4gICAgdGhpcy5zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICB0aGlzLnNlc3Npb24ubGV2ZWwgPSBDT05GSUcuaW5pdGlhbExldmVsO1xuICAgIHRoaXMuaW5pdCgpO1xuICAgIHRoaXMuaW5pdFBlcnNvbigpO1xuICAgIHRoaXMuaW5pdE1vbnN0ZXIoKTtcbiAgICB0aGlzLmluaXRMZXZlbEluZm8oKTtcbiAgICByZXR1cm4gdGhpcy5nZXRGaWdodFJlc3VsdCgpO1xuICB9XG5cbiAgYXN5bmMgbmV4dExldmVsKCkge1xuICAgIGF3YWl0IHRoaXMubW9uc3Rlci5kZWF0aCgpO1xuICAgIHRoaXMuc2Vzc2lvbi5sZXZlbCArPSBDT05GSUcubmV4dExldmVsO1xuICAgIHRoaXMuaW5pdE1vbnN0ZXIodGhpcy5zZXNzaW9uKTtcbiAgfVxuXG4gIGluaXRQZXJzb24oKSB7XG4gICAgdGhpcy5wZXJzb24gPSBuZXcgUGVyc29uQ29tcG9uZW50KHRoaXMuY3R4LCB0aGlzLnNlc3Npb24ubmlja05hbWUpO1xuICB9XG5cbiAgaW5pdE1vbnN0ZXIoKSB7XG4gICAgdGhpcy5tb25zdGVyID0gbmV3IE1vbnN0ZXJDb21wb25lbnQodGhpcy5jdHgsIFJhbmRvbU5hbWVHZW5lcmF0b3IuYnVpbGQoKSk7XG4gIH1cblxuICBpbml0TGV2ZWxJbmZvKCkge1xuICAgIHRoaXMubGV2ZWxJbmZvID0gbmV3IExldmVsSW5mb0NvbXBvbmVudCh0aGlzLmN0eCwgdGhpcy5zZXNzaW9uKS5kcmF3KCk7XG4gIH1cblxuICByZWZyZXNoU2NyZWVuKCkge1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5jYW52YXMud2lkdGg7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnJlZnJlc2hTY3JlZW4oKSk7XG4gIH1cblxuICBhc3luYyBnZXRGaWdodFJlc3VsdCgpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrQ2hvb3Nlci5jaG9zZUNvbXBvbmVudCgpXG4gICAgICAudGhlbih0YXNrID0+IHRhc2suZXhlY3V0ZSgpKVxuICAgICAgLnRoZW4oKGlzQ29ycmVjdEFuc3dlcikgPT4ge1xuICAgICAgICBpZiAoaXNDb3JyZWN0QW5zd2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGVyc29uLmF0dGFjaygoKSA9PiB7IHRoaXMubW9uc3Rlci5oZWFsdGggPSBDT05GSUcuZGFtYWdlOyB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tb25zdGVyLmF0dGFjaygoKSA9PiB7IHRoaXMucGVyc29uLmhlYWx0aCA9IENPTkZJRy5kYW1hZ2U7IH0pO1xuICAgICAgfSkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLm1vbnN0ZXIuaGVhbHRoID09PSBDT05GSUcuZGVhZCkge1xuICAgICAgICAgIGF3YWl0IHRoaXMubmV4dExldmVsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wZXJzb24uaGVhbHRoID09PSBDT05GSUcuZGVhZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9idWlsZFJlc3VsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmlnaHRSZXN1bHQoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgX2J1aWxkUmVzdWx0KCkge1xuICAgIHJldHVybiB0aGlzLnNlc3Npb247XG4gIH1cbn1cbiIsImNvbnN0IENPTlNUID0ge1xuICBzdG9yYWdlOiAncnNzLWdhbWUtc2NvcmUtc3RvcmFnZScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY29yZVNlcnZpY2Uge1xuICBzdG9yZShyZXN1bHRzKSB7XG4gICAgaWYgKHJlc3VsdHMpIHtcbiAgICAgIGNvbnN0IHNjb3JlcyA9IHRoaXMubG9hZCgpO1xuICAgICAgc2NvcmVzLnB1c2goe1xuICAgICAgICBuYW1lOiByZXN1bHRzLm5pY2tOYW1lLFxuICAgICAgICBsZXZlbDogcmVzdWx0cy5sZXZlbCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fc2F2ZShzY29yZXMpO1xuICAgIH1cbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgY29uc3Qgc2NvcmVzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oQ09OU1Quc3RvcmFnZSk7XG4gICAgaWYgKCFzY29yZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zYXZlKFtdKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc2NvcmVzKTtcbiAgfVxuXG4gIF9zYXZlKHNjb3Jlcykge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKENPTlNULnN0b3JhZ2UsIEpTT04uc3RyaW5naWZ5KHNjb3JlcykpO1xuICAgIHJldHVybiBzY29yZXM7XG4gIH1cbn1cbiIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2luZGV4LnRlbXBsYXRlLmh0bWwnO1xuaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5cbmltcG9ydCBTY29yZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvc2NvcmUnO1xuXG5jb25zdCBDT05TVEFOVFMgPSB7XG4gIGVsZW1lbnQ6ICdkaXYuY29udGFpbmVyJyxcbiAgc2NvcmVDb250YWluZXI6ICdkaXYuc2NvcmUtY29udGFpbmVyIHRhYmxlPnRib2R5JyxcbiAgcmV0cnlBY3Rpb246ICdzdGFydCcsXG4gIGVudGVyS2V5OiAxMyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjb3JlQm9hcmQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0b3JhZ2UgPSBuZXcgU2NvcmVTZXJ2aWNlKCk7XG4gIH1cblxuICBzdG9yZVJlc3VsdChyZXN1bHRzKSB7XG4gICAgdGhpcy5zdG9yYWdlLnN0b3JlKHJlc3VsdHMpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoQ09OU1RBTlRTLmVsZW1lbnQpLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgIHRoaXMuX2RyYXdTY29yZXMoKTtcbiAgICByZXR1cm4gdGhpcy5faW5pdEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihDT05TVEFOVFMuZWxlbWVudCkuaW5uZXJIVE1MID0gbnVsbDtcbiAgfVxuXG4gIF9pbml0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLmZvY3VzKCk7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiByZXNvbHZlKENPTlNUQU5UUy5yZXRyeUFjdGlvbikpO1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBDT05TVEFOVFMuZW50ZXJLZXkpIHtcbiAgICAgICAgICByZXNvbHZlKENPTlNUQU5UUy5yZXRyeUFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2RyYXdTY29yZXMoKSB7XG4gICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgdGhpcy5zdG9yYWdlLmxvYWQoKVxuICAgICAgLnNvcnQoKGYsIHMpID0+IHMubGV2ZWwgLSBmLmxldmVsKVxuICAgICAgLnNsaWNlKDAsIDEwKVxuICAgICAgLmZvckVhY2goKHNjb3JlKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jcmVhdGVFbGVtZW50V2l0aENsYXNzKCd0cicpO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5fY3JlYXRlRWxlbWVudFdpdGhDbGFzcygndGQnKTtcbiAgICAgICAgbmFtZS5pbm5lckhUTUwgPSBzY29yZS5uYW1lO1xuXG4gICAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5fY3JlYXRlRWxlbWVudFdpdGhDbGFzcygndGQnKTtcbiAgICAgICAgbGV2ZWwuaW5uZXJIVE1MID0gc2NvcmUubGV2ZWw7XG5cbiAgICAgICAgZWxlbWVudC5hcHBlbmQobmFtZSwgbGV2ZWwpO1xuICAgICAgICBmcmFnbWVudC5hcHBlbmQoZWxlbWVudCk7XG4gICAgICB9KTtcbiAgICBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoQ09OU1RBTlRTLnNjb3JlQ29udGFpbmVyKS5hcHBlbmQoZnJhZ21lbnQpO1xuICB9XG5cbiAgX2NyZWF0ZUVsZW1lbnRXaXRoQ2xhc3ModGFnTmFtZSwgLi4uY2xhc3NMaXN0KSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgY2xhc3NMaXN0LmZvckVhY2goY2xhc3NUb0FkZCA9PiBlbGVtZW50LmNsYXNzTGlzdC5hcHBlbmQoY2xhc3NUb0FkZCkpO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG59XG4iLCJpbXBvcnQgJ0BiYWJlbC9wb2x5ZmlsbCc7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCBJbml0IGZyb20gJy4vY29tcG9uZW50cy9pbml0JztcblxuLy8gU2NyZWVuc1xuaW1wb3J0IEhvbWUgZnJvbSAnLi9zY3JlZW5zL2hvbWUnO1xuaW1wb3J0IExvZ2luIGZyb20gJy4vc2NyZWVucy9sb2dpbic7XG5pbXBvcnQgQmF0dGxlIGZyb20gJy4vc2NyZWVucy9iYXR0bGUnO1xuaW1wb3J0IFNjb3JlQm9hcmQgZnJvbSAnLi9zY3JlZW5zL3Njb3JlJztcblxuY29uc3QgQ09ORklHID0ge1xuICBzdGFydDogTG9naW4sXG4gIHNjb3JlOiBTY29yZUJvYXJkLFxufTtcblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0FjdGlvbihhY3Rpb24pIHtcbiAgaWYgKENPTkZJR1thY3Rpb25dID09PSBMb2dpbikge1xuICAgIGNvbnN0IG5pY2tOYW1lID0gYXdhaXQgTG9naW4uc2hvdygpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5ldyBCYXR0bGUoKS5zdGFydCh7XG4gICAgICBuaWNrTmFtZSxcbiAgICB9KTtcbiAgICBuZXcgU2NvcmVCb2FyZCgpLnN0b3JlUmVzdWx0KHJlc3VsdCk7XG4gIH1cbiAgcHJvY2Vzc0FjdGlvbihhd2FpdCBuZXcgU2NvcmVCb2FyZCgpLnNob3coKSk7XG59XG5cbmNvbnN0IGFwcCA9IGFzeW5jICgpID0+IHtcbiAgSW5pdC5pbml0KCk7XG4gIGNvbnN0IGFjdGlvbiA9IGF3YWl0IEhvbWUuc2hvdygpO1xuICByZXR1cm4gcHJvY2Vzc0FjdGlvbihhY3Rpb24pO1xufTtcblxuYXBwKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9